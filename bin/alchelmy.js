// Generated by purs bundle 0.12.0
var PS = {};
(function(exports) {exports.globEffect = function(reject){
    return function(resolve){
      return function(pattern){
        return function(){
          debugger
          const glob = require("glob");
          return glob(pattern, {}, function(err, results){
            if(err){
              reject(err)();
            }else{
              resolve(results)(); 
            }
          });
        };
      };
    };
  };
})(PS["Alchelmy"] = PS["Alchelmy"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
    "use strict";

  // module Data.Symbol

  exports.unsafeCoerce = function (arg) {
    return arg;
  };
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reifySymbol = function (s) {
      return function (f) {
          return $foreign.unsafeCoerce(function (dictIsSymbol) {
              return f(dictIsSymbol);
          })({
              reflectSymbol: function (v) {
                  return s;
              }
          })(SProxy.value);
      };
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["reifySymbol"] = reifySymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };

  exports.cons = function (head) {
    return function (tail) {
      return [head].concat(tail);
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
    "use strict";

  exports.unsafeHas = function (label) {
    return function (rec) {
      return {}.hasOwnProperty.call(rec, label);
    };
  };

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };

  exports.unsafeDelete = function (label) {
    return function (rec) {
      var copy = {};
      for (var key in rec) {
        if (key !== label && {}.hasOwnProperty.call(rec, key)) {
          copy[key] = rec[key];
        }
      }
      return copy;
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Record.Unsafe"];
  exports["unsafeHas"] = $foreign.unsafeHas;
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
  exports["unsafeDelete"] = $foreign.unsafeDelete;
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS["Type.Data.RowList"] = PS["Type.Data.RowList"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Show = function (show) {
      this.show = show;
  };
  var ShowRecordFields = function (showRecordFields) {
      this.showRecordFields = showRecordFields;
  };
  var showString = new Show($foreign.showStringImpl);
  var showRecordFieldsNil = new ShowRecordFields(function (v) {
      return function (v1) {
          return [  ];
      };
  });
  var showRecordFields = function (dict) {
      return dict.showRecordFields;
  };
  var showRecord = function (dictRowToList) {
      return function (dictShowRecordFields) {
          return new Show(function (record) {
              var v = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
              if (v.length === 0) {
                  return "{}";
              };
              return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
          });
      };
  };
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Data.Show line 20, column 1 - line 20, column 37: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  var showRecordFieldsCons = function (dictIsSymbol) {
      return function (dictShowRecordFields) {
          return function (dictShow) {
              return new ShowRecordFields(function (v) {
                  return function (record) {
                      var tail = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                      var focus = Record_Unsafe.unsafeGet(key)(record);
                      return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                  };
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["ShowRecordFields"] = ShowRecordFields;
  exports["showRecordFields"] = showRecordFields;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
  exports["showRecord"] = showRecord;
  exports["showRecordFieldsNil"] = showRecordFieldsNil;
  exports["showRecordFieldsCons"] = showRecordFieldsCons;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];                 
  var showUnit = new Data_Show.Show(function (v) {
      return "unit";
  });
  exports["showUnit"] = showUnit;
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Show = PS["Data.Show"];                 
  var Void = function (x) {
      return x;
  };
  var absurd = function (a) {
      var spin = function ($copy_v) {
          var $tco_result;
          function $tco_loop(v) {
              $copy_v = v;
              return;
          };
          while (!false) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return spin(a);
  };
  var showVoid = new Data_Show.Show(absurd);
  exports["absurd"] = absurd;
  exports["showVoid"] = showVoid;
})(PS["Data.Void"] = PS["Data.Void"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semigroup = function (append) {
      this.append = append;
  };
  var SemigroupRecord = function (appendRecord) {
      this.appendRecord = appendRecord;
  };
  var semigroupVoid = new Semigroup(function (v) {
      return Data_Void.absurd;
  });
  var semigroupUnit = new Semigroup(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupRecordNil = new SemigroupRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var appendRecord = function (dict) {
      return dict.appendRecord;
  };
  var semigroupRecord = function (dictRowToList) {
      return function (dictSemigroupRecord) {
          return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return append(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  var semigroupRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemigroupRecord) {
              return function (dictSemigroup) {
                  return new SemigroupRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                          };
                      };
                  });
              };
          };
      };
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["SemigroupRecord"] = SemigroupRecord;
  exports["appendRecord"] = appendRecord;
  exports["semigroupString"] = semigroupString;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupVoid"] = semigroupVoid;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
  exports["semigroupRecord"] = semigroupRecord;
  exports["semigroupRecordNil"] = semigroupRecordNil;
  exports["semigroupRecordCons"] = semigroupRecordCons;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
    "use strict";

  exports._localeCompare = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (s1) {
          return function (s2) {
            var result = s1.localeCompare(s2);
            return result < 0 ? lt : result > 0 ? gt : eq;
          };
        };
      };
    };
  };

  exports.replace = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(s1, s2);
      };
    };
  };

  exports.replaceAll = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2); // eslint-disable-line no-useless-escape
      };
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs === ys) return true;
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var RProxy = (function () {
      function RProxy() {

      };
      RProxy.value = new RProxy();
      return RProxy;
  })();
  exports["RProxy"] = RProxy;
})(PS["Type.Data.Row"] = PS["Type.Data.Row"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var HeytingAlgebraRecord = function (conjRecord, disjRecord, ffRecord, impliesRecord, notRecord, ttRecord) {
      this.conjRecord = conjRecord;
      this.disjRecord = disjRecord;
      this.ffRecord = ffRecord;
      this.impliesRecord = impliesRecord;
      this.notRecord = notRecord;
      this.ttRecord = ttRecord;
  };
  var ttRecord = function (dict) {
      return dict.ttRecord;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var notRecord = function (dict) {
      return dict.notRecord;
  };
  var not = function (dict) {
      return dict.not;
  };
  var impliesRecord = function (dict) {
      return dict.impliesRecord;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var heytingAlgebraUnit = new HeytingAlgebra(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, Data_Unit.unit, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, function (v) {
      return Data_Unit.unit;
  }, Data_Unit.unit);
  var heytingAlgebraRecordNil = new HeytingAlgebraRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  });
  var ffRecord = function (dict) {
      return dict.ffRecord;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disjRecord = function (dict) {
      return dict.disjRecord;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conjRecord = function (dict) {
      return dict.conjRecord;
  };
  var heytingAlgebraRecord = function (dictRowToList) {
      return function (dictHeytingAlgebraRecord) {
          return new HeytingAlgebra(conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));
      };
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  var heytingAlgebraRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictHeytingAlgebraRecord) {
              return function (dictHeytingAlgebra) {
                  return new HeytingAlgebraRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(conj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                          };
                      };
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(disj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                          };
                      };
                  }, function (v) {
                      return function (row) {
                          var tail = ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(ff(dictHeytingAlgebra))(tail);
                      };
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(implies(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                          };
                      };
                  }, function (v) {
                      return function (row) {
                          var tail = notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          var get = Record_Unsafe.unsafeGet(key);
                          return insert(not(dictHeytingAlgebra)(get(row)))(tail);
                      };
                  }, function (v) {
                      return function (row) {
                          var tail = ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(tt(dictHeytingAlgebra))(tail);
                      };
                  });
              };
          };
      };
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["HeytingAlgebraRecord"] = HeytingAlgebraRecord;
  exports["ffRecord"] = ffRecord;
  exports["ttRecord"] = ttRecord;
  exports["impliesRecord"] = impliesRecord;
  exports["conjRecord"] = conjRecord;
  exports["disjRecord"] = disjRecord;
  exports["notRecord"] = notRecord;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraUnit"] = heytingAlgebraUnit;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
  exports["heytingAlgebraRecord"] = heytingAlgebraRecord;
  exports["heytingAlgebraRecordNil"] = heytingAlgebraRecordNil;
  exports["heytingAlgebraRecordCons"] = heytingAlgebraRecordCons;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Eq1 = function (eq1) {
      this.eq1 = eq1;
  };
  var EqRecord = function (eqRecord) {
      this.eqRecord = eqRecord;
  };
  var eqVoid = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqUnit = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqString = new Eq($foreign.refEq);
  var eqRowNil = new EqRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return true;
          };
      };
  });
  var eqRecord = function (dict) {
      return dict.eqRecord;
  };
  var eqRec = function (dictRowToList) {
      return function (dictEqRecord) {
          return new Eq(eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var eqNumber = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);
  var eqBoolean = new Eq($foreign.refEq);
  var eq1 = function (dict) {
      return dict.eq1;
  };
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  };
  var eq1Array = new Eq1(function (dictEq) {
      return eq(eqArray(dictEq));
  });
  var eqRowCons = function (dictEqRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictEq) {
                  return new EqRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var get = Record_Unsafe.unsafeGet(key);
                              return eq(dictEq)(get(ra))(get(rb)) && tail;
                          };
                      };
                  });
              };
          };
      };
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  var notEq1 = function (dictEq1) {
      return function (dictEq) {
          return function (x) {
              return function (y) {
                  return eq(eqBoolean)(eq1(dictEq1)(dictEq)(x)(y))(false);
              };
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["Eq1"] = Eq1;
  exports["eq1"] = eq1;
  exports["notEq1"] = notEq1;
  exports["EqRecord"] = EqRecord;
  exports["eqRecord"] = eqRecord;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqUnit"] = eqUnit;
  exports["eqVoid"] = eqVoid;
  exports["eqArray"] = eqArray;
  exports["eqRec"] = eqRec;
  exports["eq1Array"] = eq1Array;
  exports["eqRowNil"] = eqRowNil;
  exports["eqRowCons"] = eqRowCons;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];                 
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var showOrdering = new Data_Show.Show(function (v) {
      if (v instanceof LT) {
          return "LT";
      };
      if (v instanceof GT) {
          return "GT";
      };
      if (v instanceof EQ) {
          return "EQ";
      };
      throw new Error("Failed pattern match at Data.Ordering line 26, column 1 - line 26, column 39: " + [ v.constructor.name ]);
  });
  var semigroupOrdering = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof LT) {
              return LT.value;
          };
          if (v instanceof GT) {
              return GT.value;
          };
          if (v instanceof EQ) {
              return v1;
          };
          throw new Error("Failed pattern match at Data.Ordering line 21, column 1 - line 21, column 49: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var invert = function (v) {
      if (v instanceof GT) {
          return LT.value;
      };
      if (v instanceof EQ) {
          return EQ.value;
      };
      if (v instanceof LT) {
          return GT.value;
      };
      throw new Error("Failed pattern match at Data.Ordering line 33, column 1 - line 33, column 31: " + [ v.constructor.name ]);
  };
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["invert"] = invert;
  exports["eqOrdering"] = eqOrdering;
  exports["semigroupOrdering"] = semigroupOrdering;
  exports["showOrdering"] = showOrdering;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  var composeFlipped = function (dictSemigroupoid) {
      return function (f) {
          return function (g) {
              return compose(dictSemigroupoid)(g)(f);
          };
      };
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["composeFlipped"] = composeFlipped;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                 
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.ordArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var x = xs[i];
          var y = ys[i];
          var o = f(x)(y);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];                 
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var SemiringRecord = function (addRecord, mulRecord, oneRecord, zeroRecord) {
      this.addRecord = addRecord;
      this.mulRecord = mulRecord;
      this.oneRecord = oneRecord;
      this.zeroRecord = zeroRecord;
  };
  var zeroRecord = function (dict) {
      return dict.zeroRecord;
  };
  var zero = function (dict) {
      return dict.zero;
  };
  var semiringUnit = new Semiring(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, Data_Unit.unit, Data_Unit.unit);
  var semiringRecordNil = new SemiringRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  });
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var oneRecord = function (dict) {
      return dict.oneRecord;
  };
  var one = function (dict) {
      return dict.one;
  };
  var mulRecord = function (dict) {
      return dict.mulRecord;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var addRecord = function (dict) {
      return dict.addRecord;
  };
  var semiringRecord = function (dictRowToList) {
      return function (dictSemiringRecord) {
          return new Semiring(addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));
      };
  };
  var add = function (dict) {
      return dict.add;
  };
  var semiringFn = function (dictSemiring) {
      return new Semiring(function (f) {
          return function (g) {
              return function (x) {
                  return add(dictSemiring)(f(x))(g(x));
              };
          };
      }, function (f) {
          return function (g) {
              return function (x) {
                  return mul(dictSemiring)(f(x))(g(x));
              };
          };
      }, function (v) {
          return one(dictSemiring);
      }, function (v) {
          return zero(dictSemiring);
      });
  };
  var semiringRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemiringRecord) {
              return function (dictSemiring) {
                  return new SemiringRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(add(dictSemiring)(get(ra))(get(rb)))(tail);
                          };
                      };
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(mul(dictSemiring)(get(ra))(get(rb)))(tail);
                          };
                      };
                  }, function (v) {
                      return function (v1) {
                          var tail = oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(one(dictSemiring))(tail);
                      };
                  }, function (v) {
                      return function (v1) {
                          var tail = zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(zero(dictSemiring))(tail);
                      };
                  });
              };
          };
      };
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["SemiringRecord"] = SemiringRecord;
  exports["addRecord"] = addRecord;
  exports["mulRecord"] = mulRecord;
  exports["oneRecord"] = oneRecord;
  exports["zeroRecord"] = zeroRecord;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
  exports["semiringFn"] = semiringFn;
  exports["semiringUnit"] = semiringUnit;
  exports["semiringRecord"] = semiringRecord;
  exports["semiringRecordNil"] = semiringRecordNil;
  exports["semiringRecordCons"] = semiringRecordCons;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var RingRecord = function (SemiringRecord0, subRecord) {
      this.SemiringRecord0 = SemiringRecord0;
      this.subRecord = subRecord;
  };
  var subRecord = function (dict) {
      return dict.subRecord;
  };
  var sub = function (dict) {
      return dict.sub;
  };
  var ringUnit = new Ring(function () {
      return Data_Semiring.semiringUnit;
  }, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var ringRecordNil = new RingRecord(function () {
      return Data_Semiring.semiringRecordNil;
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  });
  var ringRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictRingRecord) {
              return function (dictRing) {
                  return new RingRecord(function () {
                      return Data_Semiring.semiringRecordCons(dictIsSymbol)(dictCons)(dictRingRecord.SemiringRecord0())(dictRing.Semiring0());
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(sub(dictRing)(get(ra))(get(rb)))(tail);
                          };
                      };
                  });
              };
          };
      };
  };
  var ringRecord = function (dictRowToList) {
      return function (dictRingRecord) {
          return new Ring(function () {
              return Data_Semiring.semiringRecord(dictRowToList)(dictRingRecord.SemiringRecord0());
          }, subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var ringNumber = new Ring(function () {
      return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var ringFn = function (dictRing) {
      return new Ring(function () {
          return Data_Semiring.semiringFn(dictRing.Semiring0());
      }, function (f) {
          return function (g) {
              return function (x) {
                  return sub(dictRing)(f(x))(g(x));
              };
          };
      });
  };
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["negate"] = negate;
  exports["RingRecord"] = RingRecord;
  exports["subRecord"] = subRecord;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
  exports["ringUnit"] = ringUnit;
  exports["ringFn"] = ringFn;
  exports["ringRecord"] = ringRecord;
  exports["ringRecordNil"] = ringRecordNil;
  exports["ringRecordCons"] = ringRecordCons;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };
  var Ord1 = function (Eq10, compare1) {
      this.Eq10 = Eq10;
      this.compare1 = compare1;
  };
  var OrdRecord = function (EqRecord0, compareRecord) {
      this.EqRecord0 = EqRecord0;
      this.compareRecord = compareRecord;
  };
  var ordVoid = new Ord(function () {
      return Data_Eq.eqVoid;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordUnit = new Ord(function () {
      return Data_Eq.eqUnit;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordRecordNil = new OrdRecord(function () {
      return Data_Eq.eqRowNil;
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return Data_Ordering.EQ.value;
          };
      };
  });
  var ordOrdering = new Ord(function () {
      return Data_Ordering.eqOrdering;
  }, function (v) {
      return function (v1) {
          if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.EQ.value;
          };
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) {
              return Data_Ordering.EQ.value;
          };
          if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.EQ.value;
          };
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          throw new Error("Failed pattern match at Data.Ord line 73, column 1 - line 73, column 37: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordBoolean = new Ord(function () {
      return Data_Eq.eqBoolean;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compareRecord = function (dict) {
      return dict.compareRecord;
  };
  var ordRecord = function (dictRowToList) {
      return function (dictOrdRecord) {
          return new Ord(function () {
              return Data_Eq.eqRec(dictRowToList)(dictOrdRecord.EqRecord0());
          }, compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var compare1 = function (dict) {
      return dict.compare1;
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var signum = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $43 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($43) {
                  return Data_Semiring.one(dictRing.Semiring0());
              };
              return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var lessThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 128, column 3 - line 131, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 119, column 3 - line 122, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var ordArray = function (dictOrd) {
      return new Ord(function () {
          return Data_Eq.eqArray(dictOrd.Eq0());
      }, (function () {
          var toDelta = function (x) {
              return function (y) {
                  var v = compare(dictOrd)(x)(y);
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Ord line 66, column 7 - line 71, column 1: " + [ v.constructor.name ]);
              };
          };
          return function (xs) {
              return function (ys) {
                  return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
              };
          };
      })());
  };
  var ord1Array = new Ord1(function () {
      return Data_Eq.eq1Array;
  }, function (dictOrd) {
      return compare(ordArray(dictOrd));
  });
  var ordRecordCons = function (dictOrdRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictOrd) {
                  return new OrdRecord(function () {
                      return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())(dictCons)(dictIsSymbol)(dictOrd.Eq0());
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                              var $49 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);
                              if ($49) {
                                  return left;
                              };
                              return compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                          };
                      };
                  });
              };
          };
      };
  };
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  var between = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  if (lessThan(dictOrd)(x)(low)) {
                      return false;
                  };
                  if (greaterThan(dictOrd)(x)(hi)) {
                      return false;
                  };
                  return true;
              };
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $53 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($53) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["Ord1"] = Ord1;
  exports["compare1"] = compare1;
  exports["lessThan"] = lessThan;
  exports["lessThanOrEq"] = lessThanOrEq;
  exports["greaterThan"] = greaterThan;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["comparing"] = comparing;
  exports["min"] = min;
  exports["max"] = max;
  exports["clamp"] = clamp;
  exports["between"] = between;
  exports["abs"] = abs;
  exports["signum"] = signum;
  exports["OrdRecord"] = OrdRecord;
  exports["compareRecord"] = compareRecord;
  exports["ordBoolean"] = ordBoolean;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
  exports["ordUnit"] = ordUnit;
  exports["ordVoid"] = ordVoid;
  exports["ordArray"] = ordArray;
  exports["ordOrdering"] = ordOrdering;
  exports["ord1Array"] = ord1Array;
  exports["ordRecordNil"] = ordRecordNil;
  exports["ordRecordCons"] = ordRecordCons;
  exports["ordRecord"] = ordRecord;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];                 
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyN = function (f) {
      var go = function ($copy_n) {
          return function ($copy_acc) {
              var $tco_var_n = $copy_n;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(n, acc) {
                  if (n <= 0) {
                      $tco_done = true;
                      return acc;
                  };
                  if (Data_Boolean.otherwise) {
                      $tco_var_n = n - 1 | 0;
                      $copy_acc = f(acc);
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Function line 94, column 3 - line 96, column 37: " + [ n.constructor.name, acc.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_n, $copy_acc);
              };
              return $tco_result;
          };
      };
      return go;
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["apply"] = apply;
  exports["applyFlipped"] = applyFlipped;
  exports["applyN"] = applyN;
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];                 
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  var flap = function (dictFunctor) {
      return function (ff) {
          return function (x) {
              return map(dictFunctor)(function (f) {
                  return f(x);
              })(ff);
          };
      };
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["flap"] = flap;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];                 
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };
  var applyFn = new Apply(function () {
      return Data_Functor.functorFn;
  }, function (f) {
      return function (g) {
          return function (x) {
              return f(x)(g(x));
          };
      };
  });
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  var lift3 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);
                  };
              };
          };
      };
  };
  var lift4 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d);
                      };
                  };
              };
          };
      };
  };
  var lift5 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d))(e);
                          };
                      };
                  };
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["lift3"] = lift3;
  exports["lift4"] = lift4;
  exports["lift5"] = lift5;
  exports["applyFn"] = applyFn;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 62, column 1 - line 62, column 65: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 57, column 1 - line 57, column 63: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeFn = new Applicative(function () {
      return Control_Apply.applyFn;
  }, function (x) {
      return function (v) {
          return x;
      };
  });
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
  exports["applicativeFn"] = applicativeFn;
  exports["applicativeArray"] = applicativeArray;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };
  var bindFn = new Bind(function () {
      return Control_Apply.applyFn;
  }, function (m) {
      return function (f) {
          return function (x) {
              return f(m(x))(x);
          };
      };
  });
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var ifM = function (dictBind) {
      return function (cond) {
          return function (t) {
              return function (f) {
                  return bind(dictBind)(cond)(function (cond$prime) {
                      if (cond$prime) {
                          return t;
                      };
                      return f;
                  });
              };
          };
      };
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["ifM"] = ifM;
  exports["bindFn"] = bindFn;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var whenM = function (dictMonad) {
      return function (mb) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {
                  return Control_Applicative.when(dictMonad.Applicative0())(v)(m);
              });
          };
      };
  };
  var unlessM = function (dictMonad) {
      return function (mb) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {
                  return Control_Applicative.unless(dictMonad.Applicative0())(v)(m);
              });
          };
      };
  };
  var monadFn = new Monad(function () {
      return Control_Applicative.applicativeFn;
  }, function () {
      return Control_Bind.bindFn;
  });
  var monadArray = new Monad(function () {
      return Control_Applicative.applicativeArray;
  }, function () {
      return Control_Bind.bindArray;
  });
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(a)(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(f(v));
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["liftM1"] = liftM1;
  exports["ap"] = ap;
  exports["whenM"] = whenM;
  exports["unlessM"] = unlessM;
  exports["monadFn"] = monadFn;
  exports["monadArray"] = monadArray;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);

  exports.topNumber = Number.POSITIVE_INFINITY;
  exports.bottomNumber = Number.NEGATIVE_INFINITY;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };
  var boundedUnit = new Bounded(function () {
      return Data_Ord.ordUnit;
  }, Data_Unit.unit, Data_Unit.unit);
  var boundedOrdering = new Bounded(function () {
      return Data_Ord.ordOrdering;
  }, Data_Ordering.LT.value, Data_Ordering.GT.value);
  var boundedNumber = new Bounded(function () {
      return Data_Ord.ordNumber;
  }, $foreign.bottomNumber, $foreign.topNumber);
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var boundedBoolean = new Bounded(function () {
      return Data_Ord.ordBoolean;
  }, false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedBoolean"] = boundedBoolean;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
  exports["boundedOrdering"] = boundedOrdering;
  exports["boundedUnit"] = boundedUnit;
  exports["boundedNumber"] = boundedNumber;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };

  exports.numDiv = function (n1) {
    return function (n2) {
      return n1 / n2;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];                 
  var BooleanAlgebra = function (HeytingAlgebra0) {
      this.HeytingAlgebra0 = HeytingAlgebra0;
  };
  var BooleanAlgebraRecord = function (HeytingAlgebraRecord0) {
      this.HeytingAlgebraRecord0 = HeytingAlgebraRecord0;
  };
  var booleanAlgebraUnit = new BooleanAlgebra(function () {
      return Data_HeytingAlgebra.heytingAlgebraUnit;
  });
  var booleanAlgebraRecordNil = new BooleanAlgebraRecord(function () {
      return Data_HeytingAlgebra.heytingAlgebraRecordNil;
  });
  var booleanAlgebraRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictBooleanAlgebraRecord) {
              return function (dictBooleanAlgebra) {
                  return new BooleanAlgebraRecord(function () {
                      return Data_HeytingAlgebra.heytingAlgebraRecordCons(dictIsSymbol)(dictCons)(dictBooleanAlgebraRecord.HeytingAlgebraRecord0())(dictBooleanAlgebra.HeytingAlgebra0());
                  });
              };
          };
      };
  };
  var booleanAlgebraRecord = function (dictRowToList) {
      return function (dictBooleanAlgebraRecord) {
          return new BooleanAlgebra(function () {
              return Data_HeytingAlgebra.heytingAlgebraRecord(dictRowToList)(dictBooleanAlgebraRecord.HeytingAlgebraRecord0());
          });
      };
  };
  var booleanAlgebraFn = function (dictBooleanAlgebra) {
      return new BooleanAlgebra(function () {
          return Data_HeytingAlgebra.heytingAlgebraFunction(dictBooleanAlgebra.HeytingAlgebra0());
      });
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return Data_HeytingAlgebra.heytingAlgebraBoolean;
  });
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["BooleanAlgebraRecord"] = BooleanAlgebraRecord;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
  exports["booleanAlgebraUnit"] = booleanAlgebraUnit;
  exports["booleanAlgebraFn"] = booleanAlgebraFn;
  exports["booleanAlgebraRecord"] = booleanAlgebraRecord;
  exports["booleanAlgebraRecordNil"] = booleanAlgebraRecordNil;
  exports["booleanAlgebraRecordCons"] = booleanAlgebraRecordCons;
})(PS["Data.BooleanAlgebra"] = PS["Data.BooleanAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];                 
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  };
  var CommutativeRingRecord = function (RingRecord0) {
      this.RingRecord0 = RingRecord0;
  };
  var commutativeRingUnit = new CommutativeRing(function () {
      return Data_Ring.ringUnit;
  });
  var commutativeRingRecordNil = new CommutativeRingRecord(function () {
      return Data_Ring.ringRecordNil;
  });
  var commutativeRingRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictCommutativeRingRecord) {
              return function (dictCommutativeRing) {
                  return new CommutativeRingRecord(function () {
                      return Data_Ring.ringRecordCons(dictIsSymbol)(dictCons)(dictCommutativeRingRecord.RingRecord0())(dictCommutativeRing.Ring0());
                  });
              };
          };
      };
  };
  var commutativeRingRecord = function (dictRowToList) {
      return function (dictCommutativeRingRecord) {
          return new CommutativeRing(function () {
              return Data_Ring.ringRecord(dictRowToList)(dictCommutativeRingRecord.RingRecord0());
          });
      };
  };
  var commutativeRingNumber = new CommutativeRing(function () {
      return Data_Ring.ringNumber;
  });
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  var commutativeRingFn = function (dictCommutativeRing) {
      return new CommutativeRing(function () {
          return Data_Ring.ringFn(dictCommutativeRing.Ring0());
      });
  };
  exports["CommutativeRing"] = CommutativeRing;
  exports["CommutativeRingRecord"] = CommutativeRingRecord;
  exports["commutativeRingInt"] = commutativeRingInt;
  exports["commutativeRingNumber"] = commutativeRingNumber;
  exports["commutativeRingUnit"] = commutativeRingUnit;
  exports["commutativeRingFn"] = commutativeRingFn;
  exports["commutativeRingRecord"] = commutativeRingRecord;
  exports["commutativeRingRecordNil"] = commutativeRingRecordNil;
  exports["commutativeRingRecordCons"] = commutativeRingRecordCons;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];                 
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  };
  var gcd = function ($copy_dictEq) {
      return function ($copy_dictEuclideanRing) {
          return function ($copy_a) {
              return function ($copy_b) {
                  var $tco_var_dictEq = $copy_dictEq;
                  var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
                  var $tco_var_a = $copy_a;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dictEq, dictEuclideanRing, a, b) {
                      var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                      if ($7) {
                          $tco_done = true;
                          return a;
                      };
                      $tco_var_dictEq = dictEq;
                      $tco_var_dictEuclideanRing = dictEuclideanRing;
                      $tco_var_a = b;
                      $copy_b = mod(dictEuclideanRing)(a)(b);
                      return;
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
                  };
                  return $tco_result;
              };
          };
      };
  };
  var euclideanRingNumber = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingNumber;
  }, function (v) {
      return 1;
  }, $foreign.numDiv, function (v) {
      return function (v1) {
          return 0.0;
      };
  });
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var lcm = function (dictEq) {
      return function (dictEuclideanRing) {
          return function (a) {
              return function (b) {
                  var $8 = Data_Eq.eq(dictEq)(a)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())) || Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                  if ($8) {
                      return Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0());
                  };
                  return div(dictEuclideanRing)(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(a)(b))(gcd(dictEq)(dictEuclideanRing)(a)(b));
              };
          };
      };
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["gcd"] = gcd;
  exports["lcm"] = lcm;
  exports["euclideanRingInt"] = euclideanRingInt;
  exports["euclideanRingNumber"] = euclideanRingNumber;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var MonoidRecord = function (SemigroupRecord0, memptyRecord) {
      this.SemigroupRecord0 = SemigroupRecord0;
      this.memptyRecord = memptyRecord;
  };
  var monoidUnit = new Monoid(function () {
      return Data_Semigroup.semigroupUnit;
  }, Data_Unit.unit);
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var monoidRecordNil = new MonoidRecord(function () {
      return Data_Semigroup.semigroupRecordNil;
  }, function (v) {
      return {};
  });
  var monoidOrdering = new Monoid(function () {
      return Data_Ordering.semigroupOrdering;
  }, Data_Ordering.EQ.value);
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var memptyRecord = function (dict) {
      return dict.memptyRecord;
  };
  var monoidRecord = function (dictRowToList) {
      return function (dictMonoidRecord) {
          return new Monoid(function () {
              return Data_Semigroup.semigroupRecord(dictRowToList)(dictMonoidRecord.SemigroupRecord0());
          }, memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return new Monoid(function () {
          return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
      }, function (v) {
          return mempty(dictMonoid);
      });
  };
  var monoidRecordCons = function (dictIsSymbol) {
      return function (dictMonoid) {
          return function (dictCons) {
              return function (dictMonoidRecord) {
                  return new MonoidRecord(function () {
                      return Data_Semigroup.semigroupRecordCons(dictIsSymbol)(dictCons)(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                  }, function (v) {
                      var tail = memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      return insert(mempty(dictMonoid))(tail);
                  });
              };
          };
      };
  };
  var power = function (dictMonoid) {
      return function (x) {
          var go = function (p) {
              if (p <= 0) {
                  return mempty(dictMonoid);
              };
              if (p === 1) {
                  return x;
              };
              if (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(p)(2) === 0) {
                  var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);
              };
              if (Data_Boolean.otherwise) {
                  var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));
              };
              throw new Error("Failed pattern match at Data.Monoid line 66, column 3 - line 66, column 17: " + [ p.constructor.name ]);
          };
          return go;
      };
  };
  var guard = function (dictMonoid) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return mempty(dictMonoid);
              };
              throw new Error("Failed pattern match at Data.Monoid line 74, column 1 - line 74, column 49: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["power"] = power;
  exports["guard"] = guard;
  exports["MonoidRecord"] = MonoidRecord;
  exports["memptyRecord"] = memptyRecord;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidOrdering"] = monoidOrdering;
  exports["monoidFn"] = monoidFn;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
  exports["monoidRecord"] = monoidRecord;
  exports["monoidRecordNil"] = monoidRecordNil;
  exports["monoidRecordCons"] = monoidRecordCons;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Additive = function (x) {
      return x;
  };
  var showAdditive = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Additive " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupAdditive = function (dictSemiring) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semiring.add(dictSemiring)(v)(v1);
          };
      });
  };
  var ordAdditive = function (dictOrd) {
      return dictOrd;
  };
  var monoidAdditive = function (dictSemiring) {
      return new Data_Monoid.Monoid(function () {
          return semigroupAdditive(dictSemiring);
      }, Data_Semiring.zero(dictSemiring));
  };
  var functorAdditive = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var eqAdditive = function (dictEq) {
      return dictEq;
  };
  var eq1Additive = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqAdditive(dictEq));
  });
  var ord1Additive = new Data_Ord.Ord1(function () {
      return eq1Additive;
  }, function (dictOrd) {
      return Data_Ord.compare(ordAdditive(dictOrd));
  });
  var boundedAdditive = function (dictBounded) {
      return dictBounded;
  };
  var applyAdditive = new Control_Apply.Apply(function () {
      return functorAdditive;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindAdditive = new Control_Bind.Bind(function () {
      return applyAdditive;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeAdditive = new Control_Applicative.Applicative(function () {
      return applyAdditive;
  }, Additive);
  var monadAdditive = new Control_Monad.Monad(function () {
      return applicativeAdditive;
  }, function () {
      return bindAdditive;
  });
  exports["Additive"] = Additive;
  exports["eqAdditive"] = eqAdditive;
  exports["eq1Additive"] = eq1Additive;
  exports["ordAdditive"] = ordAdditive;
  exports["ord1Additive"] = ord1Additive;
  exports["boundedAdditive"] = boundedAdditive;
  exports["showAdditive"] = showAdditive;
  exports["functorAdditive"] = functorAdditive;
  exports["applyAdditive"] = applyAdditive;
  exports["applicativeAdditive"] = applicativeAdditive;
  exports["bindAdditive"] = bindAdditive;
  exports["monadAdditive"] = monadAdditive;
  exports["semigroupAdditive"] = semigroupAdditive;
  exports["monoidAdditive"] = monoidAdditive;
})(PS["Data.Monoid.Additive"] = PS["Data.Monoid.Additive"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Conj = function (x) {
      return x;
  };
  var showConj = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Conj " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringConj = function (dictHeytingAlgebra) {
      return new Data_Semiring.Semiring(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var ordConj = function (dictOrd) {
      return dictOrd;
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  var functorConj = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var eqConj = function (dictEq) {
      return dictEq;
  };
  var eq1Conj = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqConj(dictEq));
  });
  var ord1Conj = new Data_Ord.Ord1(function () {
      return eq1Conj;
  }, function (dictOrd) {
      return Data_Ord.compare(ordConj(dictOrd));
  });
  var boundedConj = function (dictBounded) {
      return dictBounded;
  };
  var applyConj = new Control_Apply.Apply(function () {
      return functorConj;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindConj = new Control_Bind.Bind(function () {
      return applyConj;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeConj = new Control_Applicative.Applicative(function () {
      return applyConj;
  }, Conj);
  var monadConj = new Control_Monad.Monad(function () {
      return applicativeConj;
  }, function () {
      return bindConj;
  });
  exports["Conj"] = Conj;
  exports["eqConj"] = eqConj;
  exports["eq1Conj"] = eq1Conj;
  exports["ordConj"] = ordConj;
  exports["ord1Conj"] = ord1Conj;
  exports["boundedConj"] = boundedConj;
  exports["showConj"] = showConj;
  exports["functorConj"] = functorConj;
  exports["applyConj"] = applyConj;
  exports["applicativeConj"] = applicativeConj;
  exports["bindConj"] = bindConj;
  exports["monadConj"] = monadConj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
  exports["semiringConj"] = semiringConj;
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Disj = function (x) {
      return x;
  };
  var showDisj = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Disj " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringDisj = function (dictHeytingAlgebra) {
      return new Data_Semiring.Semiring(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var ordDisj = function (dictOrd) {
      return dictOrd;
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  var functorDisj = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var eqDisj = function (dictEq) {
      return dictEq;
  };
  var eq1Disj = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqDisj(dictEq));
  });
  var ord1Disj = new Data_Ord.Ord1(function () {
      return eq1Disj;
  }, function (dictOrd) {
      return Data_Ord.compare(ordDisj(dictOrd));
  });
  var boundedDisj = function (dictBounded) {
      return dictBounded;
  };
  var applyDisj = new Control_Apply.Apply(function () {
      return functorDisj;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindDisj = new Control_Bind.Bind(function () {
      return applyDisj;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeDisj = new Control_Applicative.Applicative(function () {
      return applyDisj;
  }, Disj);
  var monadDisj = new Control_Monad.Monad(function () {
      return applicativeDisj;
  }, function () {
      return bindDisj;
  });
  exports["Disj"] = Disj;
  exports["eqDisj"] = eqDisj;
  exports["eq1Disj"] = eq1Disj;
  exports["ordDisj"] = ordDisj;
  exports["ord1Disj"] = ord1Disj;
  exports["boundedDisj"] = boundedDisj;
  exports["showDisj"] = showDisj;
  exports["functorDisj"] = functorDisj;
  exports["applyDisj"] = applyDisj;
  exports["applicativeDisj"] = applicativeDisj;
  exports["bindDisj"] = bindDisj;
  exports["monadDisj"] = monadDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
  exports["semiringDisj"] = semiringDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Dual = function (x) {
      return x;
  };
  var showDual = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Dual " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupDual = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v1)(v);
          };
      });
  };
  var ordDual = function (dictOrd) {
      return dictOrd;
  };
  var monoidDual = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDual(dictMonoid.Semigroup0());
      }, Data_Monoid.mempty(dictMonoid));
  };
  var functorDual = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var eqDual = function (dictEq) {
      return dictEq;
  };
  var eq1Dual = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqDual(dictEq));
  });
  var ord1Dual = new Data_Ord.Ord1(function () {
      return eq1Dual;
  }, function (dictOrd) {
      return Data_Ord.compare(ordDual(dictOrd));
  });
  var boundedDual = function (dictBounded) {
      return dictBounded;
  };
  var applyDual = new Control_Apply.Apply(function () {
      return functorDual;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindDual = new Control_Bind.Bind(function () {
      return applyDual;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeDual = new Control_Applicative.Applicative(function () {
      return applyDual;
  }, Dual);
  var monadDual = new Control_Monad.Monad(function () {
      return applicativeDual;
  }, function () {
      return bindDual;
  });
  exports["Dual"] = Dual;
  exports["eqDual"] = eqDual;
  exports["eq1Dual"] = eq1Dual;
  exports["ordDual"] = ordDual;
  exports["ord1Dual"] = ord1Dual;
  exports["boundedDual"] = boundedDual;
  exports["showDual"] = showDual;
  exports["functorDual"] = functorDual;
  exports["applyDual"] = applyDual;
  exports["applicativeDual"] = applicativeDual;
  exports["bindDual"] = bindDual;
  exports["monadDual"] = monadDual;
  exports["semigroupDual"] = semigroupDual;
  exports["monoidDual"] = monoidDual;
})(PS["Data.Monoid.Dual"] = PS["Data.Monoid.Dual"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Endo = function (x) {
      return x;
  };
  var showEndo = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Endo " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupEndo = function (dictSemigroupoid) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Control_Semigroupoid.compose(dictSemigroupoid)(v)(v1);
          };
      });
  };
  var ordEndo = function (dictOrd) {
      return dictOrd;
  };
  var monoidEndo = function (dictCategory) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEndo(dictCategory.Semigroupoid0());
      }, Control_Category.identity(dictCategory));
  };
  var eqEndo = function (dictEq) {
      return dictEq;
  };
  var boundedEndo = function (dictBounded) {
      return dictBounded;
  };
  exports["Endo"] = Endo;
  exports["eqEndo"] = eqEndo;
  exports["ordEndo"] = ordEndo;
  exports["boundedEndo"] = boundedEndo;
  exports["showEndo"] = showEndo;
  exports["semigroupEndo"] = semigroupEndo;
  exports["monoidEndo"] = monoidEndo;
})(PS["Data.Monoid.Endo"] = PS["Data.Monoid.Endo"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Multiplicative = function (x) {
      return x;
  };
  var showMultiplicative = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Multiplicative " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupMultiplicative = function (dictSemiring) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semiring.mul(dictSemiring)(v)(v1);
          };
      });
  };
  var ordMultiplicative = function (dictOrd) {
      return dictOrd;
  };
  var monoidMultiplicative = function (dictSemiring) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMultiplicative(dictSemiring);
      }, Data_Semiring.one(dictSemiring));
  };
  var functorMultiplicative = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var eqMultiplicative = function (dictEq) {
      return dictEq;
  };
  var eq1Multiplicative = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqMultiplicative(dictEq));
  });
  var ord1Multiplicative = new Data_Ord.Ord1(function () {
      return eq1Multiplicative;
  }, function (dictOrd) {
      return Data_Ord.compare(ordMultiplicative(dictOrd));
  });
  var boundedMultiplicative = function (dictBounded) {
      return dictBounded;
  };
  var applyMultiplicative = new Control_Apply.Apply(function () {
      return functorMultiplicative;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindMultiplicative = new Control_Bind.Bind(function () {
      return applyMultiplicative;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeMultiplicative = new Control_Applicative.Applicative(function () {
      return applyMultiplicative;
  }, Multiplicative);
  var monadMultiplicative = new Control_Monad.Monad(function () {
      return applicativeMultiplicative;
  }, function () {
      return bindMultiplicative;
  });
  exports["Multiplicative"] = Multiplicative;
  exports["eqMultiplicative"] = eqMultiplicative;
  exports["eq1Multiplicative"] = eq1Multiplicative;
  exports["ordMultiplicative"] = ordMultiplicative;
  exports["ord1Multiplicative"] = ord1Multiplicative;
  exports["boundedMultiplicative"] = boundedMultiplicative;
  exports["showMultiplicative"] = showMultiplicative;
  exports["functorMultiplicative"] = functorMultiplicative;
  exports["applyMultiplicative"] = applyMultiplicative;
  exports["applicativeMultiplicative"] = applicativeMultiplicative;
  exports["bindMultiplicative"] = bindMultiplicative;
  exports["monadMultiplicative"] = monadMultiplicative;
  exports["semigroupMultiplicative"] = semigroupMultiplicative;
  exports["monoidMultiplicative"] = monoidMultiplicative;
})(PS["Data.Monoid.Multiplicative"] = PS["Data.Monoid.Multiplicative"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var First = function (x) {
      return x;
  };
  var showFirst = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(First " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupFirst = new Data_Semigroup.Semigroup(function (x) {
      return function (v) {
          return x;
      };
  });
  var ordFirst = function (dictOrd) {
      return dictOrd;
  };
  var functorFirst = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var eqFirst = function (dictEq) {
      return dictEq;
  };
  var eq1First = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqFirst(dictEq));
  });
  var ord1First = new Data_Ord.Ord1(function () {
      return eq1First;
  }, function (dictOrd) {
      return Data_Ord.compare(ordFirst(dictOrd));
  });
  var boundedFirst = function (dictBounded) {
      return dictBounded;
  };
  var applyFirst = new Control_Apply.Apply(function () {
      return functorFirst;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindFirst = new Control_Bind.Bind(function () {
      return applyFirst;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeFirst = new Control_Applicative.Applicative(function () {
      return applyFirst;
  }, First);
  var monadFirst = new Control_Monad.Monad(function () {
      return applicativeFirst;
  }, function () {
      return bindFirst;
  });
  exports["First"] = First;
  exports["eqFirst"] = eqFirst;
  exports["eq1First"] = eq1First;
  exports["ordFirst"] = ordFirst;
  exports["ord1First"] = ord1First;
  exports["boundedFirst"] = boundedFirst;
  exports["showFirst"] = showFirst;
  exports["functorFirst"] = functorFirst;
  exports["applyFirst"] = applyFirst;
  exports["applicativeFirst"] = applicativeFirst;
  exports["bindFirst"] = bindFirst;
  exports["monadFirst"] = monadFirst;
  exports["semigroupFirst"] = semigroupFirst;
})(PS["Data.Semigroup.First"] = PS["Data.Semigroup.First"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Last = function (x) {
      return x;
  };
  var showLast = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Last " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
      return function (x) {
          return x;
      };
  });
  var ordLast = function (dictOrd) {
      return dictOrd;
  };
  var functorLast = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var eqLast = function (dictEq) {
      return dictEq;
  };
  var eq1Last = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqLast(dictEq));
  });
  var ord1Last = new Data_Ord.Ord1(function () {
      return eq1Last;
  }, function (dictOrd) {
      return Data_Ord.compare(ordLast(dictOrd));
  });
  var boundedLast = function (dictBounded) {
      return dictBounded;
  };
  var applyLast = new Control_Apply.Apply(function () {
      return functorLast;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindLast = new Control_Bind.Bind(function () {
      return applyLast;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeLast = new Control_Applicative.Applicative(function () {
      return applyLast;
  }, Last);
  var monadLast = new Control_Monad.Monad(function () {
      return applicativeLast;
  }, function () {
      return bindLast;
  });
  exports["Last"] = Last;
  exports["eqLast"] = eqLast;
  exports["eq1Last"] = eq1Last;
  exports["ordLast"] = ordLast;
  exports["ord1Last"] = ord1Last;
  exports["boundedLast"] = boundedLast;
  exports["showLast"] = showLast;
  exports["functorLast"] = functorLast;
  exports["applyLast"] = applyLast;
  exports["applicativeLast"] = applicativeLast;
  exports["bindLast"] = bindLast;
  exports["monadLast"] = monadLast;
  exports["semigroupLast"] = semigroupLast;
})(PS["Data.Semigroup.Last"] = PS["Data.Semigroup.Last"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Semigroup_First = PS["Data.Semigroup.First"];
  var Data_Semigroup_Last = PS["Data.Semigroup.Last"];
  var Prelude = PS["Prelude"];                 
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var underF2 = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($66) {
                              return function ($67) {
                                  return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(Data_Function.on(f)(Data_Functor.map(dictFunctor)(wrap(dictNewtype)))($66)($67));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var underF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($68) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($68)));
                          };
                      };
                  };
              };
          };
      };
  };
  var under2 = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($69) {
                      return function ($70) {
                          return unwrap(dictNewtype1)(Data_Function.on(f)(wrap(dictNewtype))($69)($70));
                      };
                  };
              };
          };
      };
  };
  var under = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($71) {
                      return unwrap(dictNewtype1)(f(wrap(dictNewtype)($71)));
                  };
              };
          };
      };
  };
  var un = function (dictNewtype) {
      return function (v) {
          return unwrap(dictNewtype);
      };
  };
  var traverse = function (dictFunctor) {
      return function (dictNewtype) {
          return function (v) {
              return function (f) {
                  return function ($72) {
                      return Data_Functor.map(dictFunctor)(wrap(dictNewtype))(f(unwrap(dictNewtype)($72)));
                  };
              };
          };
      };
  };
  var overF2 = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($73) {
                              return function ($74) {
                                  return Data_Functor.map(dictFunctor1)(wrap(dictNewtype1))(Data_Function.on(f)(Data_Functor.map(dictFunctor)(unwrap(dictNewtype)))($73)($74));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var overF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($75) {
                              return Data_Functor.map(dictFunctor1)(wrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(unwrap(dictNewtype))($75)));
                          };
                      };
                  };
              };
          };
      };
  };
  var over2 = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($76) {
                      return function ($77) {
                          return wrap(dictNewtype1)(Data_Function.on(f)(unwrap(dictNewtype))($76)($77));
                      };
                  };
              };
          };
      };
  };
  var over = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($78) {
                      return wrap(dictNewtype1)(f(unwrap(dictNewtype)($78)));
                  };
              };
          };
      };
  };
  var op = function (dictNewtype) {
      return un(dictNewtype);
  };
  var newtypeMultiplicative = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Multiplicative.Multiplicative);
  var newtypeLast = new Newtype(function (v) {
      return v;
  }, Data_Semigroup_Last.Last);
  var newtypeFirst = new Newtype(function (v) {
      return v;
  }, Data_Semigroup_First.First);
  var newtypeEndo = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Endo.Endo);
  var newtypeDual = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Dual.Dual);
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var newtypeConj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Conj.Conj);
  var newtypeAdditive = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Additive.Additive);
  var collect = function (dictFunctor) {
      return function (dictNewtype) {
          return function (v) {
              return function (f) {
                  return function ($79) {
                      return wrap(dictNewtype)(f(Data_Functor.map(dictFunctor)(unwrap(dictNewtype))($79)));
                  };
              };
          };
      };
  };
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($80) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($80)));
                          };
                      };
                  };
              };
          };
      };
  };
  var ala = function (dictFunctor) {
      return function (dictNewtype) {
          return function (dictNewtype1) {
              return function (v) {
                  return function (f) {
                      return Data_Functor.map(dictFunctor)(unwrap(dictNewtype))(f(wrap(dictNewtype1)));
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["un"] = un;
  exports["op"] = op;
  exports["ala"] = ala;
  exports["alaF"] = alaF;
  exports["over"] = over;
  exports["overF"] = overF;
  exports["under"] = under;
  exports["underF"] = underF;
  exports["over2"] = over2;
  exports["overF2"] = overF2;
  exports["under2"] = under2;
  exports["underF2"] = underF2;
  exports["traverse"] = traverse;
  exports["collect"] = collect;
  exports["newtypeAdditive"] = newtypeAdditive;
  exports["newtypeMultiplicative"] = newtypeMultiplicative;
  exports["newtypeConj"] = newtypeConj;
  exports["newtypeDisj"] = newtypeDisj;
  exports["newtypeDual"] = newtypeDual;
  exports["newtypeEndo"] = newtypeEndo;
  exports["newtypeFirst"] = newtypeFirst;
  exports["newtypeLast"] = newtypeLast;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Replacement = function (x) {
      return x;
  };
  var Pattern = function (x) {
      return x;
  };
  var showReplacement = new Data_Show.Show(function (v) {
      return "(Replacement " + (Data_Show.show(Data_Show.showString)(v) + ")");
  });
  var showPattern = new Data_Show.Show(function (v) {
      return "(Pattern " + (Data_Show.show(Data_Show.showString)(v) + ")");
  });
  var newtypeReplacement = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Replacement);
  var newtypePattern = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Pattern);
  var eqReplacement = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordReplacement = new Data_Ord.Ord(function () {
      return eqReplacement;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordString)(x)(y);
      };
  });
  var eqPattern = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordPattern = new Data_Ord.Ord(function () {
      return eqPattern;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordString)(x)(y);
      };
  });
  exports["Pattern"] = Pattern;
  exports["Replacement"] = Replacement;
  exports["eqPattern"] = eqPattern;
  exports["ordPattern"] = ordPattern;
  exports["newtypePattern"] = newtypePattern;
  exports["showPattern"] = showPattern;
  exports["eqReplacement"] = eqReplacement;
  exports["ordReplacement"] = ordReplacement;
  exports["newtypeReplacement"] = newtypeReplacement;
  exports["showReplacement"] = showReplacement;
})(PS["Data.String.Pattern"] = PS["Data.String.Pattern"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.Common"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Prelude = PS["Prelude"];                 
  var $$null = function (s) {
      return s === "";
  };
  var localeCompare = $foreign._localeCompare(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["null"] = $$null;
  exports["localeCompare"] = localeCompare;
  exports["replace"] = $foreign.replace;
  exports["replaceAll"] = $foreign.replaceAll;
  exports["split"] = $foreign.split;
  exports["toLower"] = $foreign.toLower;
  exports["toUpper"] = $foreign.toUpper;
  exports["trim"] = $foreign.trim;
  exports["joinWith"] = $foreign.joinWith;
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String_Common = PS["Data.String.Common"];                 
  var RouteToPageName = (function () {
      function RouteToPageName() {

      };
      RouteToPageName.value = new RouteToPageName();
      return RouteToPageName;
  })();
  var RouteToTop = (function () {
      function RouteToTop() {

      };
      RouteToTop.value = new RouteToTop();
      return RouteToTop;
  })();
  var RouteToNothing = (function () {
      function RouteToNothing() {

      };
      RouteToNothing.value = new RouteToNothing();
      return RouteToNothing;
  })();
  var bracket = function (str) {
      return "\"" + (str + "\"");
  };
  var renderBlankPage = function (application) {
      return function (pageName) {
          return function (routing) {
              return "\x0amodule " + (application + (".Page." + (pageName + (" exposing (Route, Model, Msg, route, page)\x0a\x0aimport Browser exposing (Document)\x0aimport Browser.Navigation exposing (Key)\x0aimport Html exposing (text, h1)\x0aimport Maybe exposing (Maybe)\x0aimport Url exposing (Url)\x0aimport Url.Parser exposing (Parser, map, " + ((function () {
                  if (routing instanceof RouteToPageName) {
                      return "s ";
                  };
                  if (routing instanceof RouteToTop) {
                      return "top";
                  };
                  if (routing instanceof RouteToNothing) {
                      return "custom";
                  };
                  throw new Error("Failed pattern match at Alchelmy.Template.Page line 20, column 50 - line 26, column 13: " + [ routing.constructor.name ]);
              })() + (")\x0aimport " + (application + (".Root as Root exposing (Flags, Session)\x0a\x0atype Msg\x0a  = NoOp\x0a\x0a\x0atype alias Model\x0a  = { session : Session }\x0a\x0a\x0atype alias Route\x0a  = ()\x0a\x0a\x0aroute : Parser (Route -> a) a\x0aroute =\x0a  " + ((function () {
                  if (routing instanceof RouteToPageName) {
                      return "map () (s " + (bracket(Data_String_Common.toLower(pageName)) + ")");
                  };
                  if (routing instanceof RouteToTop) {
                      return "map () top";
                  };
                  if (routing instanceof RouteToNothing) {
                      return "custom \"NOTHING\" (\\_ -> Nothing)";
                  };
                  throw new Error("Failed pattern match at Alchelmy.Template.Page line 43, column 11 - line 49, column 52: " + [ routing.constructor.name ]);
              })() + ("\x0a\x0a\x0ainit : Flags -> Url -> Key -> Route -> Maybe Session -> ( Model, Cmd Msg )\x0ainit _ _ _ _ session\x0a  = ( { session = Maybe.withDefault Root.initial session }, Cmd.none )\x0a\x0a\x0aupdate : Msg -> Model -> ( Model, Cmd Msg )\x0aupdate msg model\x0a  = ( model, Cmd.none )\x0a\x0a\x0asubscriptions : Model -> Sub Msg\x0asubscriptions _\x0a  = Sub.none\x0a\x0a\x0aview : Model -> Document Msg\x0aview model =\x0a  { title = " + (bracket(pageName + (" - " + application)) + ("\x0a  , body = [ h1 [] [text " + (bracket(pageName) + "] ]\x0a  }\x0a\x0a\x0apage : Root.Page a Route Model Msg\x0apage =\x0a  { route = route\x0a  , init = init\x0a  , view = view\x0a  , update = update\x0a  , subscriptions = subscriptions\x0a  }\x0a\x0a")))))))))))));
          };
      };
  };
  exports["RouteToPageName"] = RouteToPageName;
  exports["RouteToTop"] = RouteToTop;
  exports["RouteToNothing"] = RouteToNothing;
  exports["bracket"] = bracket;
  exports["renderBlankPage"] = renderBlankPage;
})(PS["Alchelmy.Template.Page"] = PS["Alchelmy.Template.Page"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Semigroup = PS["Data.Semigroup"];                 
  var renderRoot = function (application) {
      return "\x0amodule " + (application + ".Root exposing (..)\x0a\x0aimport Browser exposing (Document)\x0aimport Browser.Navigation exposing (Key)\x0aimport Maybe exposing (Maybe)\x0aimport Url exposing (Url)\x0aimport Url.Parser exposing (Parser)\x0a\x0atype alias Flags\x0a  = ()\x0a\x0a-- Application global state type.\x0a\x0a\x0atype alias Session\x0a  = {}\x0a\x0a\x0ainitial : Session\x0ainitial = {}\x0a\x0a\x0atype alias Page a route model msg =\x0a    { init : Flags -> Url -> Key -> route -> Maybe Session -> ( { model | session : Session }, Cmd msg )\x0a    , view : { model | session : Session } -> Document msg\x0a    , update : msg -> { model | session : Session } -> ( { model | session : Session }, Cmd msg )\x0a    , subscriptions : { model | session : Session } -> Sub msg\x0a    , route : Parser (route -> a) a\x0a    }\x0a\x0a");
  };
  exports["renderRoot"] = renderRoot;
})(PS["Alchelmy.Template.Root"] = PS["Alchelmy.Template.Root"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicate = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicate : replicatePolyfill;

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports.findLastIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = xs.length - 1; i >= 0; i--) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._insertAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i > l.length) return nothing;
            var l1 = l.slice();
            l1.splice(i, 0, a);
            return just(l1);
          };
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  exports.partition = function (f) {
    return function (xs) {
      var yes = [];
      var no  = [];
      for (var i = 0; i < xs.length; i++) {
        var x = xs[i];
        if (f(x))
          yes.push(x);
        else
          no.push(x);
      }
      return { yes: yes, no: no };
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];                 
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };
  var altArray = new Alt(function () {
      return Data_Functor.functorArray;
  }, Data_Semigroup.append(Data_Semigroup.semigroupArray));
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
  exports["altArray"] = altArray;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];                 
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };
  var plusArray = new Plus(function () {
      return Control_Alt.altArray;
  }, [  ]);
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
  exports["plusArray"] = plusArray;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];                 
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  var alternativeArray = new Alternative(function () {
      return Control_Applicative.applicativeArray;
  }, function () {
      return Control_Plus.plusArray;
  });
  exports["Alternative"] = Alternative;
  exports["alternativeArray"] = alternativeArray;
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Unit = PS["Data.Unit"];                 
  var Lazy = function (defer) {
      this.defer = defer;
  };
  var lazyUnit = new Lazy(function (v) {
      return Data_Unit.unit;
  });
  var lazyFn = new Lazy(function (f) {
      return function (x) {
          return f(Data_Unit.unit)(x);
      };
  });
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          var go = defer(dictLazy)(function (v) {
              return f(go);
          });
          return go;
      };
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
  exports["fix"] = fix;
  exports["lazyFn"] = lazyFn;
  exports["lazyUnit"] = lazyUnit;
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];                 
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var rmap = function (dictBifunctor) {
      return bimap(dictBifunctor)(Control_Category.identity(Control_Category.categoryFn));
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
  exports["rmap"] = rmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  exports.arrayExtend = function(f) {
    return function(xs) {
      return xs.map(function (_, i, xs) {
        return f(xs.slice(i));
      });
    };
  };
})(PS["Control.Extend"] = PS["Control.Extend"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Extend"];
  var Control_Category = PS["Control.Category"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];                 
  var Extend = function (Functor0, extend) {
      this.Functor0 = Functor0;
      this.extend = extend;
  };
  var extendFn = function (dictSemigroup) {
      return new Extend(function () {
          return Data_Functor.functorFn;
      }, function (f) {
          return function (g) {
              return function (w) {
                  return f(function (w$prime) {
                      return g(Data_Semigroup.append(dictSemigroup)(w)(w$prime));
                  });
              };
          };
      });
  };
  var extendArray = new Extend(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayExtend);
  var extend = function (dict) {
      return dict.extend;
  };
  var extendFlipped = function (dictExtend) {
      return function (w) {
          return function (f) {
              return extend(dictExtend)(f)(w);
          };
      };
  };
  var duplicate = function (dictExtend) {
      return extend(dictExtend)(Control_Category.identity(Control_Category.categoryFn));
  };
  var composeCoKleisliFlipped = function (dictExtend) {
      return function (f) {
          return function (g) {
              return function (w) {
                  return f(extend(dictExtend)(g)(w));
              };
          };
      };
  };
  var composeCoKleisli = function (dictExtend) {
      return function (f) {
          return function (g) {
              return function (w) {
                  return g(extend(dictExtend)(f)(w));
              };
          };
      };
  };
  exports["Extend"] = Extend;
  exports["extend"] = extend;
  exports["extendFlipped"] = extendFlipped;
  exports["composeCoKleisli"] = composeCoKleisli;
  exports["composeCoKleisliFlipped"] = composeCoKleisliFlipped;
  exports["duplicate"] = duplicate;
  exports["extendFn"] = extendFn;
  exports["extendArray"] = extendArray;
})(PS["Control.Extend"] = PS["Control.Extend"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Function = PS["Data.Function"];                 
  var Biapply = function (Bifunctor0, biapply) {
      this.Bifunctor0 = Bifunctor0;
      this.biapply = biapply;
  };
  var biapply = function (dict) {
      return dict.biapply;
  };
  var biapplyFirst = function (dictBiapply) {
      return function (a) {
          return function (b) {
              return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))))(a))(b);
          };
      };
  };
  var biapplySecond = function (dictBiapply) {
      return function (a) {
          return function (b) {
              return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"])(Data_Function["const"]))(a))(b);
          };
      };
  };
  var bilift2 = function (dictBiapply) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return function (b) {
                      return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b);
                  };
              };
          };
      };
  };
  var bilift3 = function (dictBiapply) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return function (b) {
                      return function (c) {
                          return biapply(dictBiapply)(biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b))(c);
                      };
                  };
              };
          };
      };
  };
  exports["biapply"] = biapply;
  exports["Biapply"] = Biapply;
  exports["biapplyFirst"] = biapplyFirst;
  exports["biapplySecond"] = biapplySecond;
  exports["bilift2"] = bilift2;
  exports["bilift3"] = bilift3;
})(PS["Control.Biapply"] = PS["Control.Biapply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Biapply = PS["Control.Biapply"];                 
  var Biapplicative = function (Biapply0, bipure) {
      this.Biapply0 = Biapply0;
      this.bipure = bipure;
  };
  var bipure = function (dict) {
      return dict.bipure;
  };
  exports["bipure"] = bipure;
  exports["Biapplicative"] = Biapplicative;
})(PS["Control.Biapplicative"] = PS["Control.Biapplicative"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Clown = function (x) {
      return x;
  };
  var showClown = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Clown " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var ordClown = function (dictOrd) {
      return dictOrd;
  };
  var newtypeClown = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Clown);
  var functorClown = new Data_Functor.Functor(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var eqClown = function (dictEq) {
      return dictEq;
  };
  var bifunctorClown = function (dictFunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (v) {
              return function (v1) {
                  return Data_Functor.map(dictFunctor)(f)(v1);
              };
          };
      });
  };
  var biapplyClown = function (dictApply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorClown(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return Control_Apply.apply(dictApply)(v)(v1);
          };
      });
  };
  var biapplicativeClown = function (dictApplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyClown(dictApplicative.Apply0());
      }, function (a) {
          return function (v) {
              return Control_Applicative.pure(dictApplicative)(a);
          };
      });
  };
  exports["Clown"] = Clown;
  exports["newtypeClown"] = newtypeClown;
  exports["eqClown"] = eqClown;
  exports["ordClown"] = ordClown;
  exports["showClown"] = showClown;
  exports["functorClown"] = functorClown;
  exports["bifunctorClown"] = bifunctorClown;
  exports["biapplyClown"] = biapplyClown;
  exports["biapplicativeClown"] = biapplicativeClown;
})(PS["Data.Bifunctor.Clown"] = PS["Data.Bifunctor.Clown"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Flip = function (x) {
      return x;
  };
  var showFlip = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Flip " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var ordFlip = function (dictOrd) {
      return dictOrd;
  };
  var newtypeFlip = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Flip);
  var functorFlip = function (dictBifunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Bifunctor.lmap(dictBifunctor)(f)(v);
          };
      });
  };
  var eqFlip = function (dictEq) {
      return dictEq;
  };
  var bifunctorFlip = function (dictBifunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (g) {
              return function (v) {
                  return Data_Bifunctor.bimap(dictBifunctor)(g)(f)(v);
              };
          };
      });
  };
  var biapplyFlip = function (dictBiapply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorFlip(dictBiapply.Bifunctor0());
      }, function (v) {
          return function (v1) {
              return Control_Biapply.biapply(dictBiapply)(v)(v1);
          };
      });
  };
  var biapplicativeFlip = function (dictBiapplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyFlip(dictBiapplicative.Biapply0());
      }, function (a) {
          return function (b) {
              return Control_Biapplicative.bipure(dictBiapplicative)(b)(a);
          };
      });
  };
  exports["Flip"] = Flip;
  exports["newtypeFlip"] = newtypeFlip;
  exports["eqFlip"] = eqFlip;
  exports["ordFlip"] = ordFlip;
  exports["showFlip"] = showFlip;
  exports["functorFlip"] = functorFlip;
  exports["bifunctorFlip"] = bifunctorFlip;
  exports["biapplyFlip"] = biapplyFlip;
  exports["biapplicativeFlip"] = biapplicativeFlip;
})(PS["Data.Bifunctor.Flip"] = PS["Data.Bifunctor.Flip"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Joker = function (x) {
      return x;
  };
  var showJoker = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Joker " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var ordJoker = function (dictOrd) {
      return dictOrd;
  };
  var newtypeJoker = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Joker);
  var functorJoker = function (dictFunctor) {
      return new Data_Functor.Functor(function (g) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(g)(v);
          };
      });
  };
  var eqJoker = function (dictEq) {
      return dictEq;
  };
  var bifunctorJoker = function (dictFunctor) {
      return new Data_Bifunctor.Bifunctor(function (v) {
          return function (g) {
              return function (v1) {
                  return Data_Functor.map(dictFunctor)(g)(v1);
              };
          };
      });
  };
  var biapplyJoker = function (dictApply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorJoker(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return Control_Apply.apply(dictApply)(v)(v1);
          };
      });
  };
  var biapplicativeJoker = function (dictApplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyJoker(dictApplicative.Apply0());
      }, function (v) {
          return function (b) {
              return Control_Applicative.pure(dictApplicative)(b);
          };
      });
  };
  exports["Joker"] = Joker;
  exports["newtypeJoker"] = newtypeJoker;
  exports["eqJoker"] = eqJoker;
  exports["ordJoker"] = ordJoker;
  exports["showJoker"] = showJoker;
  exports["functorJoker"] = functorJoker;
  exports["bifunctorJoker"] = bifunctorJoker;
  exports["biapplyJoker"] = biapplyJoker;
  exports["biapplicativeJoker"] = biapplicativeJoker;
})(PS["Data.Bifunctor.Joker"] = PS["Data.Bifunctor.Joker"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Product = (function () {
      function Product(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Product.create = function (value0) {
          return function (value1) {
              return new Product(value0, value1);
          };
      };
      return Product;
  })();
  var showProduct = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var eqProduct = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
              };
          });
      };
  };
  var ordProduct = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqProduct(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
              };
          });
      };
  };
  var bifunctorProduct = function (dictBifunctor) {
      return function (dictBifunctor1) {
          return new Data_Bifunctor.Bifunctor(function (f) {
              return function (g) {
                  return function (v) {
                      return new Product(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v.value0), Data_Bifunctor.bimap(dictBifunctor1)(f)(g)(v.value1));
                  };
              };
          });
      };
  };
  var biapplyProduct = function (dictBiapply) {
      return function (dictBiapply1) {
          return new Control_Biapply.Biapply(function () {
              return bifunctorProduct(dictBiapply.Bifunctor0())(dictBiapply1.Bifunctor0());
          }, function (v) {
              return function (v1) {
                  return new Product(Control_Biapply.biapply(dictBiapply)(v.value0)(v1.value0), Control_Biapply.biapply(dictBiapply1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var biapplicativeProduct = function (dictBiapplicative) {
      return function (dictBiapplicative1) {
          return new Control_Biapplicative.Biapplicative(function () {
              return biapplyProduct(dictBiapplicative.Biapply0())(dictBiapplicative1.Biapply0());
          }, function (a) {
              return function (b) {
                  return new Product(Control_Biapplicative.bipure(dictBiapplicative)(a)(b), Control_Biapplicative.bipure(dictBiapplicative1)(a)(b));
              };
          });
      };
  };
  exports["Product"] = Product;
  exports["eqProduct"] = eqProduct;
  exports["ordProduct"] = ordProduct;
  exports["showProduct"] = showProduct;
  exports["bifunctorProduct"] = bifunctorProduct;
  exports["biapplyProduct"] = biapplyProduct;
  exports["biapplicativeProduct"] = biapplicativeProduct;
})(PS["Data.Bifunctor.Product"] = PS["Data.Bifunctor.Product"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Wrap = function (x) {
      return x;
  };
  var showWrap = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Wrap " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var ordWrap = function (dictOrd) {
      return dictOrd;
  };
  var newtypeWrap = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Wrap);
  var functorWrap = function (dictBifunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Bifunctor.rmap(dictBifunctor)(f)(v);
          };
      });
  };
  var eqWrap = function (dictEq) {
      return dictEq;
  };
  var bifunctorWrap = function (dictBifunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (g) {
              return function (v) {
                  return Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v);
              };
          };
      });
  };
  var biapplyWrap = function (dictBiapply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorWrap(dictBiapply.Bifunctor0());
      }, function (v) {
          return function (v1) {
              return Control_Biapply.biapply(dictBiapply)(v)(v1);
          };
      });
  };
  var biapplicativeWrap = function (dictBiapplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyWrap(dictBiapplicative.Biapply0());
      }, function (a) {
          return function (b) {
              return Control_Biapplicative.bipure(dictBiapplicative)(a)(b);
          };
      });
  };
  exports["Wrap"] = Wrap;
  exports["newtypeWrap"] = newtypeWrap;
  exports["eqWrap"] = eqWrap;
  exports["ordWrap"] = ordWrap;
  exports["showWrap"] = showWrap;
  exports["functorWrap"] = functorWrap;
  exports["bifunctorWrap"] = bifunctorWrap;
  exports["biapplyWrap"] = biapplyWrap;
  exports["biapplicativeWrap"] = biapplicativeWrap;
})(PS["Data.Bifunctor.Wrap"] = PS["Data.Bifunctor.Wrap"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var MonadZero = function (Alternative1, Monad0) {
      this.Alternative1 = Alternative1;
      this.Monad0 = Monad0;
  };
  var monadZeroArray = new MonadZero(function () {
      return Control_Alternative.alternativeArray;
  }, function () {
      return Control_Monad.monadArray;
  });
  var guard = function (dictMonadZero) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure((dictMonadZero.Alternative1()).Applicative0())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty((dictMonadZero.Alternative1()).Plus1());
          };
          throw new Error("Failed pattern match at Control.MonadZero line 54, column 1 - line 54, column 52: " + [ v.constructor.name ]);
      };
  };
  exports["MonadZero"] = MonadZero;
  exports["guard"] = guard;
  exports["monadZeroArray"] = monadZeroArray;
})(PS["Control.MonadZero"] = PS["Control.MonadZero"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];                 
  var Invariant = function (imap) {
      this.imap = imap;
  };
  var invariantMultiplicative = new Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var invariantEndo = new Invariant(function (ab) {
      return function (ba) {
          return function (v) {
              return function ($31) {
                  return ab(v(ba($31)));
              };
          };
      };
  });
  var invariantDual = new Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var invariantDisj = new Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var invariantConj = new Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var invariantAdditive = new Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var imapF = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(f);
          };
      };
  };
  var invariantArray = new Invariant(imapF(Data_Functor.functorArray));
  var invariantFn = new Invariant(imapF(Data_Functor.functorFn));
  var imap = function (dict) {
      return dict.imap;
  };
  exports["imap"] = imap;
  exports["Invariant"] = Invariant;
  exports["imapF"] = imapF;
  exports["invariantFn"] = invariantFn;
  exports["invariantArray"] = invariantArray;
  exports["invariantAdditive"] = invariantAdditive;
  exports["invariantConj"] = invariantConj;
  exports["invariantDisj"] = invariantDisj;
  exports["invariantDual"] = invariantDual;
  exports["invariantEndo"] = invariantEndo;
  exports["invariantMultiplicative"] = invariantMultiplicative;
})(PS["Data.Functor.Invariant"] = PS["Data.Functor.Invariant"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Just) {
              return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe line 206, column 1 - line 206, column 47: " + [ v.constructor.name ]);
      });
  };
  var semigroupMaybe = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              if (v1 instanceof Nothing) {
                  return v;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Maybe line 175, column 1 - line 175, column 62: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var optional = function (dictAlternative) {
      return function (a) {
          return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Just.create)(a))(Control_Applicative.pure(dictAlternative.Applicative0())(Nothing.value));
      };
  };
  var monoidMaybe = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMaybe(dictSemigroup);
      }, Nothing.value);
  };
  var maybe$prime = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v(Data_Unit.unit);
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 231, column 1 - line 231, column 62: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 218, column 1 - line 218, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var invariantMaybe = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorMaybe));
  var fromMaybe$prime = function (a) {
      return maybe$prime(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var $__unused = function (dictPartial1) {
              return function ($dollar35) {
                  return $dollar35;
              };
          };
          return $__unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 269, column 1 - line 269, column 46: " + [ v.constructor.name ]);
          })());
      };
  };
  var extendMaybe = new Control_Extend.Extend(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Nothing) {
              return Nothing.value;
          };
          return new Just(v(v1));
      };
  });
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var ordMaybe = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqMaybe(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Nothing) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Nothing) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 195, column 8 - line 195, column 51: " + [ x.constructor.name, y.constructor.name ]);
          };
      });
  };
  var eq1Maybe = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqMaybe(dictEq));
  });
  var ord1Maybe = new Data_Ord.Ord1(function () {
      return eq1Maybe;
  }, function (dictOrd) {
      return Data_Ord.compare(ordMaybe(dictOrd));
  });
  var boundedMaybe = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordMaybe(dictBounded.Ord0());
      }, Nothing.value, new Just(Data_Bounded.top(dictBounded)));
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 67, column 1 - line 67, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 126, column 1 - line 126, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var monadMaybe = new Control_Monad.Monad(function () {
      return applicativeMaybe;
  }, function () {
      return bindMaybe;
  });
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  var plusMaybe = new Control_Plus.Plus(function () {
      return altMaybe;
  }, Nothing.value);
  var alternativeMaybe = new Control_Alternative.Alternative(function () {
      return applicativeMaybe;
  }, function () {
      return plusMaybe;
  });
  var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
      return alternativeMaybe;
  }, function () {
      return monadMaybe;
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["maybe'"] = maybe$prime;
  exports["fromMaybe"] = fromMaybe;
  exports["fromMaybe'"] = fromMaybe$prime;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["optional"] = optional;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["plusMaybe"] = plusMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
  exports["monadZeroMaybe"] = monadZeroMaybe;
  exports["extendMaybe"] = extendMaybe;
  exports["invariantMaybe"] = invariantMaybe;
  exports["semigroupMaybe"] = semigroupMaybe;
  exports["monoidMaybe"] = monoidMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["eq1Maybe"] = eq1Maybe;
  exports["ordMaybe"] = ordMaybe;
  exports["ord1Maybe"] = ord1Maybe;
  exports["boundedMaybe"] = boundedMaybe;
  exports["showMaybe"] = showMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var First = function (x) {
      return x;
  };
  var showFirst = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "First (" + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
      });
  };
  var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return v1;
      };
  });
  var ordFirst = function (dictOrd) {
      return Data_Maybe.ordMaybe(dictOrd);
  };
  var ord1First = Data_Maybe.ord1Maybe;
  var newtypeFirst = new Data_Newtype.Newtype(function (n) {
      return n;
  }, First);
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  var monadFirst = Data_Maybe.monadMaybe;
  var invariantFirst = Data_Maybe.invariantMaybe;
  var functorFirst = Data_Maybe.functorMaybe;
  var extendFirst = Data_Maybe.extendMaybe;
  var eqFirst = function (dictEq) {
      return Data_Maybe.eqMaybe(dictEq);
  };
  var eq1First = Data_Maybe.eq1Maybe;
  var boundedFirst = function (dictBounded) {
      return Data_Maybe.boundedMaybe(dictBounded);
  };
  var bindFirst = Data_Maybe.bindMaybe;
  var applyFirst = Data_Maybe.applyMaybe;
  var applicativeFirst = Data_Maybe.applicativeMaybe;
  var altFirst = new Control_Alt.Alt(function () {
      return functorFirst;
  }, Data_Semigroup.append(semigroupFirst));
  var plusFirst = new Control_Plus.Plus(function () {
      return altFirst;
  }, Data_Monoid.mempty(monoidFirst));
  var alternativeFirst = new Control_Alternative.Alternative(function () {
      return applicativeFirst;
  }, function () {
      return plusFirst;
  });
  var monadZeroFirst = new Control_MonadZero.MonadZero(function () {
      return alternativeFirst;
  }, function () {
      return monadFirst;
  });
  exports["First"] = First;
  exports["newtypeFirst"] = newtypeFirst;
  exports["eqFirst"] = eqFirst;
  exports["eq1First"] = eq1First;
  exports["ordFirst"] = ordFirst;
  exports["ord1First"] = ord1First;
  exports["boundedFirst"] = boundedFirst;
  exports["functorFirst"] = functorFirst;
  exports["invariantFirst"] = invariantFirst;
  exports["applyFirst"] = applyFirst;
  exports["applicativeFirst"] = applicativeFirst;
  exports["bindFirst"] = bindFirst;
  exports["monadFirst"] = monadFirst;
  exports["extendFirst"] = extendFirst;
  exports["showFirst"] = showFirst;
  exports["semigroupFirst"] = semigroupFirst;
  exports["monoidFirst"] = monoidFirst;
  exports["altFirst"] = altFirst;
  exports["plusFirst"] = plusFirst;
  exports["alternativeFirst"] = alternativeFirst;
  exports["monadZeroFirst"] = monadZeroFirst;
})(PS["Data.Maybe.First"] = PS["Data.Maybe.First"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Last = function (x) {
      return x;
  };
  var showLast = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Last " + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
      });
  };
  var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v1 instanceof Data_Maybe.Just) {
              return v1;
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              return v;
          };
          throw new Error("Failed pattern match at Data.Maybe.Last line 52, column 1 - line 52, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var ordLast = function (dictOrd) {
      return Data_Maybe.ordMaybe(dictOrd);
  };
  var ord1Last = Data_Maybe.ord1Maybe;
  var newtypeLast = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Last);
  var monoidLast = new Data_Monoid.Monoid(function () {
      return semigroupLast;
  }, Data_Maybe.Nothing.value);
  var monadLast = Data_Maybe.monadMaybe;
  var invariantLast = Data_Maybe.invariantMaybe;
  var functorLast = Data_Maybe.functorMaybe;
  var extendLast = Data_Maybe.extendMaybe;
  var eqLast = function (dictEq) {
      return Data_Maybe.eqMaybe(dictEq);
  };
  var eq1Last = Data_Maybe.eq1Maybe;
  var boundedLast = function (dictBounded) {
      return Data_Maybe.boundedMaybe(dictBounded);
  };
  var bindLast = Data_Maybe.bindMaybe;
  var applyLast = Data_Maybe.applyMaybe;
  var applicativeLast = Data_Maybe.applicativeMaybe;
  var altLast = new Control_Alt.Alt(function () {
      return functorLast;
  }, Data_Semigroup.append(semigroupLast));
  var plusLast = new Control_Plus.Plus(function () {
      return altLast;
  }, Data_Monoid.mempty(monoidLast));
  var alternativeLast = new Control_Alternative.Alternative(function () {
      return applicativeLast;
  }, function () {
      return plusLast;
  });
  var monadZeroLast = new Control_MonadZero.MonadZero(function () {
      return alternativeLast;
  }, function () {
      return monadLast;
  });
  exports["Last"] = Last;
  exports["newtypeLast"] = newtypeLast;
  exports["eqLast"] = eqLast;
  exports["eq1Last"] = eq1Last;
  exports["ordLast"] = ordLast;
  exports["ord1Last"] = ord1Last;
  exports["boundedLast"] = boundedLast;
  exports["functorLast"] = functorLast;
  exports["invariantLast"] = invariantLast;
  exports["applyLast"] = applyLast;
  exports["applicativeLast"] = applicativeLast;
  exports["bindLast"] = bindLast;
  exports["monadLast"] = monadLast;
  exports["extendLast"] = extendLast;
  exports["showLast"] = showLast;
  exports["semigroupLast"] = semigroupLast;
  exports["monoidLast"] = monoidLast;
  exports["altLast"] = altLast;
  exports["plusLast"] = plusLast;
  exports["alternativeLast"] = alternativeLast;
  exports["monadZeroLast"] = monadZeroLast;
})(PS["Data.Maybe.Last"] = PS["Data.Maybe.Last"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var indexr = function (dictFoldable) {
      return function (idx) {
          var go = function (a) {
              return function (cursor) {
                  if (cursor.elem instanceof Data_Maybe.Just) {
                      return cursor;
                  };
                  var $106 = cursor.pos === idx;
                  if ($106) {
                      return {
                          elem: new Data_Maybe.Just(a),
                          pos: cursor.pos
                      };
                  };
                  return {
                      pos: cursor.pos + 1 | 0,
                      elem: cursor.elem
                  };
              };
          };
          return function ($193) {
              return (function (v) {
                  return v.elem;
              })(foldr(dictFoldable)(go)({
                  elem: Data_Maybe.Nothing.value,
                  pos: 0
              })($193));
          };
      };
  };
  var $$null = function (dictFoldable) {
      return foldr(dictFoldable)(function (v) {
          return function (v1) {
              return false;
          };
      })(true);
  };
  var oneOf = function (dictFoldable) {
      return function (dictPlus) {
          return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
      };
  };
  var oneOfMap = function (dictFoldable) {
      return function (dictPlus) {
          return function (f) {
              return foldr(dictFoldable)(function ($194) {
                  return Control_Alt.alt(dictPlus.Alt0())(f($194));
              })(Control_Plus.empty(dictPlus));
          };
      };
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var indexl = function (dictFoldable) {
      return function (idx) {
          var go = function (cursor) {
              return function (a) {
                  if (cursor.elem instanceof Data_Maybe.Just) {
                      return cursor;
                  };
                  var $109 = cursor.pos === idx;
                  if ($109) {
                      return {
                          elem: new Data_Maybe.Just(a),
                          pos: cursor.pos
                      };
                  };
                  return {
                      pos: cursor.pos + 1 | 0,
                      elem: cursor.elem
                  };
              };
          };
          return function ($196) {
              return (function (v) {
                  return v.elem;
              })(foldl(dictFoldable)(go)({
                  elem: Data_Maybe.Nothing.value,
                  pos: 0
              })($196));
          };
      };
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var length = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(function (c) {
              return function (v) {
                  return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
              };
          })(Data_Semiring.zero(dictSemiring));
      };
  };
  var maximumBy = function (dictFoldable) {
      return function (cmp) {
          var max$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $116 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                          if ($116) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 376, column 3 - line 376, column 27: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
      };
  };
  var maximum = function (dictOrd) {
      return function (dictFoldable) {
          return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
  };
  var minimumBy = function (dictFoldable) {
      return function (cmp) {
          var min$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $120 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);
                          if ($120) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 389, column 3 - line 389, column 27: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
      };
  };
  var minimum = function (dictOrd) {
      return function (dictFoldable) {
          return minimumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
  };
  var product = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.mul(dictSemiring))(Data_Semiring.one(dictSemiring));
      };
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
      };
  };
  var foldableMultiplicative = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 129, column 1 - line 129, column 41: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 129, column 1 - line 129, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 129, column 1 - line 129, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldableDual = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableDisj = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableConj = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableAdditive = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMapDefaultL = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldl(dictFoldable)(function (acc) {
                  return function (x) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(x));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var foldableFirst = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldl(foldableMaybe)(f)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldr(foldableMaybe)(f)(z)(v);
          };
      };
  });
  var foldableLast = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldl(foldableMaybe)(f)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldr(foldableMaybe)(f)(z)(v);
          };
      };
  });
  var foldlDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function ($197) {
                      return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(c)($197)));
                  })(xs)))(u);
              };
          };
      };
  };
  var foldrDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($198) {
                      return Data_Monoid_Endo.Endo(c($198));
                  })(xs))(u);
              };
          };
      };
  };
  var surroundMap = function (dictFoldable) {
      return function (dictSemigroup) {
          return function (d) {
              return function (t) {
                  return function (f) {
                      var joined = function (a) {
                          return function (m) {
                              return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(a))(m));
                          };
                      };
                      return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
                  };
              };
          };
      };
  };
  var surround = function (dictFoldable) {
      return function (dictSemigroup) {
          return function (d) {
              return surroundMap(dictFoldable)(dictSemigroup)(d)(Control_Category.identity(Control_Category.categoryFn));
          };
      };
  };
  var foldM = function (dictFoldable) {
      return function (dictMonad) {
          return function (f) {
              return function (a0) {
                  return foldl(dictFoldable)(function (ma) {
                      return function (b) {
                          return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f)(b));
                      };
                  })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
              };
          };
      };
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var findMap = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return p(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($199) {
              return any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(dictEq)($199));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              return function ($200) {
                  return !elem(dictFoldable)(dictEq)(x)($200);
              };
          };
      };
  };
  var or = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return any(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  var and = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return all(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldrDefault"] = foldrDefault;
  exports["foldlDefault"] = foldlDefault;
  exports["foldMapDefaultL"] = foldMapDefaultL;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["fold"] = fold;
  exports["foldM"] = foldM;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["sequence_"] = sequence_;
  exports["oneOf"] = oneOf;
  exports["oneOfMap"] = oneOfMap;
  exports["intercalate"] = intercalate;
  exports["surroundMap"] = surroundMap;
  exports["surround"] = surround;
  exports["and"] = and;
  exports["or"] = or;
  exports["all"] = all;
  exports["any"] = any;
  exports["sum"] = sum;
  exports["product"] = product;
  exports["elem"] = elem;
  exports["notElem"] = notElem;
  exports["indexl"] = indexl;
  exports["indexr"] = indexr;
  exports["find"] = find;
  exports["findMap"] = findMap;
  exports["maximum"] = maximum;
  exports["maximumBy"] = maximumBy;
  exports["minimum"] = minimum;
  exports["minimumBy"] = minimumBy;
  exports["null"] = $$null;
  exports["length"] = length;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
  exports["foldableFirst"] = foldableFirst;
  exports["foldableLast"] = foldableLast;
  exports["foldableAdditive"] = foldableAdditive;
  exports["foldableDual"] = foldableDual;
  exports["foldableDisj"] = foldableDisj;
  exports["foldableConj"] = foldableConj;
  exports["foldableMultiplicative"] = foldableMultiplicative;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor_Clown = PS["Data.Bifunctor.Clown"];
  var Data_Bifunctor_Flip = PS["Data.Bifunctor.Flip"];
  var Data_Bifunctor_Joker = PS["Data.Bifunctor.Joker"];
  var Data_Bifunctor_Product = PS["Data.Bifunctor.Product"];
  var Data_Bifunctor_Wrap = PS["Data.Bifunctor.Wrap"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Bifoldable = function (bifoldMap, bifoldl, bifoldr) {
      this.bifoldMap = bifoldMap;
      this.bifoldl = bifoldl;
      this.bifoldr = bifoldr;
  };
  var bifoldr = function (dict) {
      return dict.bifoldr;
  };
  var bitraverse_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return bifoldr(dictBifoldable)(function ($97) {
                      return Control_Apply.applySecond(dictApplicative.Apply0())(f($97));
                  })(function ($98) {
                      return Control_Apply.applySecond(dictApplicative.Apply0())(g($98));
                  })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
              };
          };
      };
  };
  var bifor_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return function (g) {
                      return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
                  };
              };
          };
      };
  };
  var bisequence_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return bitraverse_(dictBifoldable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var bifoldl = function (dict) {
      return dict.bifoldl;
  };
  var bifoldableJoker = function (dictFoldable) {
      return new Bifoldable(function (dictMonoid) {
          return function (v) {
              return function (r) {
                  return function (v1) {
                      return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(r)(v1);
                  };
              };
          };
      }, function (v) {
          return function (r) {
              return function (u) {
                  return function (v1) {
                      return Data_Foldable.foldl(dictFoldable)(r)(u)(v1);
                  };
              };
          };
      }, function (v) {
          return function (r) {
              return function (u) {
                  return function (v1) {
                      return Data_Foldable.foldr(dictFoldable)(r)(u)(v1);
                  };
              };
          };
      });
  };
  var bifoldableClown = function (dictFoldable) {
      return new Bifoldable(function (dictMonoid) {
          return function (l) {
              return function (v) {
                  return function (v1) {
                      return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(l)(v1);
                  };
              };
          };
      }, function (l) {
          return function (v) {
              return function (u) {
                  return function (v1) {
                      return Data_Foldable.foldl(dictFoldable)(l)(u)(v1);
                  };
              };
          };
      }, function (l) {
          return function (v) {
              return function (u) {
                  return function (v1) {
                      return Data_Foldable.foldr(dictFoldable)(l)(u)(v1);
                  };
              };
          };
      });
  };
  var bifoldMapDefaultR = function (dictBifoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return bifoldr(dictBifoldable)(function ($99) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f($99));
                  })(function ($100) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(g($100));
                  })(Data_Monoid.mempty(dictMonoid));
              };
          };
      };
  };
  var bifoldMapDefaultL = function (dictBifoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return bifoldl(dictBifoldable)(function (m) {
                      return function (a) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(f(a));
                      };
                  })(function (m) {
                      return function (b) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(g(b));
                      };
                  })(Data_Monoid.mempty(dictMonoid));
              };
          };
      };
  };
  var bifoldMap = function (dict) {
      return dict.bifoldMap;
  };
  var bifoldableFlip = function (dictBifoldable) {
      return new Bifoldable(function (dictMonoid) {
          return function (r) {
              return function (l) {
                  return function (v) {
                      return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
                  };
              };
          };
      }, function (r) {
          return function (l) {
              return function (u) {
                  return function (v) {
                      return bifoldl(dictBifoldable)(l)(r)(u)(v);
                  };
              };
          };
      }, function (r) {
          return function (l) {
              return function (u) {
                  return function (v) {
                      return bifoldr(dictBifoldable)(l)(r)(u)(v);
                  };
              };
          };
      });
  };
  var bifoldableWrap = function (dictBifoldable) {
      return new Bifoldable(function (dictMonoid) {
          return function (l) {
              return function (r) {
                  return function (v) {
                      return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
                  };
              };
          };
      }, function (l) {
          return function (r) {
              return function (u) {
                  return function (v) {
                      return bifoldl(dictBifoldable)(l)(r)(u)(v);
                  };
              };
          };
      }, function (l) {
          return function (r) {
              return function (u) {
                  return function (v) {
                      return bifoldr(dictBifoldable)(l)(r)(u)(v);
                  };
              };
          };
      });
  };
  var bifoldlDefault = function (dictBifoldable) {
      return function (f) {
          return function (g) {
              return function (z) {
                  return function (p) {
                      return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function ($101) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(f)($101)));
                      })(function ($102) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(g)($102)));
                      })(p)))(z);
                  };
              };
          };
      };
  };
  var bifoldrDefault = function (dictBifoldable) {
      return function (f) {
          return function (g) {
              return function (z) {
                  return function (p) {
                      return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($103) {
                          return Data_Monoid_Endo.Endo(f($103));
                      })(function ($104) {
                          return Data_Monoid_Endo.Endo(g($104));
                      })(p))(z);
                  };
              };
          };
      };
  };
  var bifoldableProduct = function (dictBifoldable) {
      return function (dictBifoldable1) {
          return new Bifoldable(function (dictMonoid) {
              return function (l) {
                  return function (r) {
                      return function (v) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v.value0))(bifoldMap(dictBifoldable1)(dictMonoid)(l)(r)(v.value1));
                      };
                  };
              };
          }, function (l) {
              return function (r) {
                  return function (u) {
                      return function (m) {
                          return bifoldlDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                      };
                  };
              };
          }, function (l) {
              return function (r) {
                  return function (u) {
                      return function (m) {
                          return bifoldrDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                      };
                  };
              };
          });
      };
  };
  var bifold = function (dictBifoldable) {
      return function (dictMonoid) {
          return bifoldMap(dictBifoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var biany = function (dictBifoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function (q) {
                  return function ($105) {
                      return Data_Newtype.unwrap(Data_Newtype.newtypeDisj)(bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($106) {
                          return Data_Monoid_Disj.Disj(p($106));
                      })(function ($107) {
                          return Data_Monoid_Disj.Disj(q($107));
                      })($105));
                  };
              };
          };
      };
  };
  var biall = function (dictBifoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function (q) {
                  return function ($108) {
                      return Data_Newtype.unwrap(Data_Newtype.newtypeConj)(bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($109) {
                          return Data_Monoid_Conj.Conj(p($109));
                      })(function ($110) {
                          return Data_Monoid_Conj.Conj(q($110));
                      })($108));
                  };
              };
          };
      };
  };
  exports["bifoldMap"] = bifoldMap;
  exports["bifoldl"] = bifoldl;
  exports["bifoldr"] = bifoldr;
  exports["Bifoldable"] = Bifoldable;
  exports["bifoldrDefault"] = bifoldrDefault;
  exports["bifoldlDefault"] = bifoldlDefault;
  exports["bifoldMapDefaultR"] = bifoldMapDefaultR;
  exports["bifoldMapDefaultL"] = bifoldMapDefaultL;
  exports["bifold"] = bifold;
  exports["bitraverse_"] = bitraverse_;
  exports["bifor_"] = bifor_;
  exports["bisequence_"] = bisequence_;
  exports["biany"] = biany;
  exports["biall"] = biall;
  exports["bifoldableClown"] = bifoldableClown;
  exports["bifoldableJoker"] = bifoldableJoker;
  exports["bifoldableFlip"] = bifoldableFlip;
  exports["bifoldableProduct"] = bifoldableProduct;
  exports["bifoldableWrap"] = bifoldableWrap;
})(PS["Data.Bifoldable"] = PS["Data.Bifoldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Prelude = PS["Prelude"];                 
  var StateR = function (x) {
      return x;
  };
  var StateL = function (x) {
      return x;
  };
  var stateR = function (v) {
      return v;
  };
  var stateL = function (v) {
      return v;
  };
  var functorStateR = new Data_Functor.Functor(function (f) {
      return function (k) {
          return function (s) {
              var v = stateR(k)(s);
              return {
                  accum: v.accum,
                  value: f(v.value)
              };
          };
      };
  });
  var functorStateL = new Data_Functor.Functor(function (f) {
      return function (k) {
          return function (s) {
              var v = stateL(k)(s);
              return {
                  accum: v.accum,
                  value: f(v.value)
              };
          };
      };
  });
  var applyStateR = new Control_Apply.Apply(function () {
      return functorStateR;
  }, function (f) {
      return function (x) {
          return function (s) {
              var v = stateR(x)(s);
              var v1 = stateR(f)(v.accum);
              return {
                  accum: v1.accum,
                  value: v1.value(v.value)
              };
          };
      };
  });
  var applyStateL = new Control_Apply.Apply(function () {
      return functorStateL;
  }, function (f) {
      return function (x) {
          return function (s) {
              var v = stateL(f)(s);
              var v1 = stateL(x)(v.accum);
              return {
                  accum: v1.accum,
                  value: v.value(v1.value)
              };
          };
      };
  });
  var applicativeStateR = new Control_Applicative.Applicative(function () {
      return applyStateR;
  }, function (a) {
      return function (s) {
          return {
              accum: s,
              value: a
          };
      };
  });
  var applicativeStateL = new Control_Applicative.Applicative(function () {
      return applyStateL;
  }, function (a) {
      return function (s) {
          return {
              accum: s,
              value: a
          };
      };
  });
  exports["StateL"] = StateL;
  exports["stateL"] = stateL;
  exports["StateR"] = StateR;
  exports["stateR"] = stateR;
  exports["functorStateL"] = functorStateL;
  exports["applyStateL"] = applyStateL;
  exports["applicativeStateL"] = applicativeStateL;
  exports["functorStateR"] = functorStateR;
  exports["applyStateR"] = applyStateR;
  exports["applicativeStateR"] = applicativeStateR;
})(PS["Data.Traversable.Accum.Internal"] = PS["Data.Traversable.Accum.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];                 
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var traversableMultiplicative = new Traversable(function () {
      return Data_Foldable.foldableMultiplicative;
  }, function () {
      return Data_Monoid_Multiplicative.functorMultiplicative;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Multiplicative.Multiplicative)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
          };
      };
  });
  var traversableMaybe = new Traversable(function () {
      return Data_Foldable.foldableMaybe;
  }, function () {
      return Data_Maybe.functorMaybe;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Traversable line 86, column 1 - line 86, column 47: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Traversable line 86, column 1 - line 86, column 47: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var traversableDual = new Traversable(function () {
      return Data_Foldable.foldableDual;
  }, function () {
      return Data_Monoid_Dual.functorDual;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Dual.Dual)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Dual.Dual)(f(v));
          };
      };
  });
  var traversableDisj = new Traversable(function () {
      return Data_Foldable.foldableDisj;
  }, function () {
      return Data_Monoid_Disj.functorDisj;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Disj.Disj)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Disj.Disj)(f(v));
          };
      };
  });
  var traversableConj = new Traversable(function () {
      return Data_Foldable.foldableConj;
  }, function () {
      return Data_Monoid_Conj.functorConj;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Conj.Conj)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Conj.Conj)(f(v));
          };
      };
  });
  var traversableAdditive = new Traversable(function () {
      return Data_Foldable.foldableAdditive;
  }, function () {
      return Data_Monoid_Additive.functorAdditive;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Additive.Additive)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Additive.Additive)(f(v));
          };
      };
  });
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  var traversableFirst = new Traversable(function () {
      return Data_Foldable.foldableFirst;
  }, function () {
      return Data_Maybe_First.functorFirst;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
      };
  });
  var traversableLast = new Traversable(function () {
      return Data_Foldable.foldableLast;
  }, function () {
      return Data_Maybe_Last.functorLast;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
      };
  });
  var traverseDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (f) {
              return function (ta) {
                  return sequence(dictTraversable)(dictApplicative)(Data_Functor.map(dictTraversable.Functor0())(f)(ta));
              };
          };
      };
  };
  var mapAccumR = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return Data_Traversable_Accum_Internal.stateR(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateR)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanr = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumR(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(a)(b);
                          return {
                              accum: b$prime,
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  var mapAccumL = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return Data_Traversable_Accum_Internal.stateL(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateL)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanl = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumL(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(b)(a);
                          return {
                              accum: b$prime,
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["traverseDefault"] = traverseDefault;
  exports["sequenceDefault"] = sequenceDefault;
  exports["for"] = $$for;
  exports["scanl"] = scanl;
  exports["scanr"] = scanr;
  exports["mapAccumL"] = mapAccumL;
  exports["mapAccumR"] = mapAccumR;
  exports["traversableArray"] = traversableArray;
  exports["traversableMaybe"] = traversableMaybe;
  exports["traversableFirst"] = traversableFirst;
  exports["traversableLast"] = traversableLast;
  exports["traversableAdditive"] = traversableAdditive;
  exports["traversableDual"] = traversableDual;
  exports["traversableConj"] = traversableConj;
  exports["traversableDisj"] = traversableDisj;
  exports["traversableMultiplicative"] = traversableMultiplicative;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bifunctor_Clown = PS["Data.Bifunctor.Clown"];
  var Data_Bifunctor_Flip = PS["Data.Bifunctor.Flip"];
  var Data_Bifunctor_Joker = PS["Data.Bifunctor.Joker"];
  var Data_Bifunctor_Product = PS["Data.Bifunctor.Product"];
  var Data_Bifunctor_Wrap = PS["Data.Bifunctor.Wrap"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];                 
  var Bitraversable = function (Bifoldable1, Bifunctor0, bisequence, bitraverse) {
      this.Bifoldable1 = Bifoldable1;
      this.Bifunctor0 = Bifunctor0;
      this.bisequence = bisequence;
      this.bitraverse = bitraverse;
  };
  var bitraverse = function (dict) {
      return dict.bitraverse;
  };
  var lfor = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative))(t);
              };
          };
      };
  };
  var ltraverse = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (f) {
              return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative));
          };
      };
  };
  var rfor = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative))(f)(t);
              };
          };
      };
  };
  var rtraverse = function (dictBitraversable) {
      return function (dictApplicative) {
          return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative));
      };
  };
  var bitraversableJoker = function (dictTraversable) {
      return new Bitraversable(function () {
          return Data_Bifoldable.bifoldableJoker(dictTraversable.Foldable1());
      }, function () {
          return Data_Bifunctor_Joker.bifunctorJoker(dictTraversable.Functor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
          };
      }, function (dictApplicative) {
          return function (v) {
              return function (r) {
                  return function (v1) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(r)(v1));
                  };
              };
          };
      });
  };
  var bitraversableClown = function (dictTraversable) {
      return new Bitraversable(function () {
          return Data_Bifoldable.bifoldableClown(dictTraversable.Foldable1());
      }, function () {
          return Data_Bifunctor_Clown.bifunctorClown(dictTraversable.Functor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
          };
      }, function (dictApplicative) {
          return function (l) {
              return function (v) {
                  return function (v1) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(l)(v1));
                  };
              };
          };
      });
  };
  var bisequenceDefault = function (dictBitraversable) {
      return function (dictApplicative) {
          return bitraverse(dictBitraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var bisequence = function (dict) {
      return dict.bisequence;
  };
  var bitraversableFlip = function (dictBitraversable) {
      return new Bitraversable(function () {
          return Data_Bifoldable.bifoldableFlip(dictBitraversable.Bifoldable1());
      }, function () {
          return Data_Bifunctor_Flip.bifunctorFlip(dictBitraversable.Bifunctor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Flip.Flip)(bisequence(dictBitraversable)(dictApplicative)(v));
          };
      }, function (dictApplicative) {
          return function (r) {
              return function (l) {
                  return function (v) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Flip.Flip)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
                  };
              };
          };
      });
  };
  var bitraversableProduct = function (dictBitraversable) {
      return function (dictBitraversable1) {
          return new Bitraversable(function () {
              return Data_Bifoldable.bifoldableProduct(dictBitraversable.Bifoldable1())(dictBitraversable1.Bifoldable1());
          }, function () {
              return Data_Bifunctor_Product.bifunctorProduct(dictBitraversable.Bifunctor0())(dictBitraversable1.Bifunctor0());
          }, function (dictApplicative) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Product.Product.create)(bisequence(dictBitraversable)(dictApplicative)(v.value0)))(bisequence(dictBitraversable1)(dictApplicative)(v.value1));
              };
          }, function (dictApplicative) {
              return function (l) {
                  return function (r) {
                      return function (v) {
                          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Product.Product.create)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v.value0)))(bitraverse(dictBitraversable1)(dictApplicative)(l)(r)(v.value1));
                      };
                  };
              };
          });
      };
  };
  var bitraversableWrap = function (dictBitraversable) {
      return new Bitraversable(function () {
          return Data_Bifoldable.bifoldableWrap(dictBitraversable.Bifoldable1());
      }, function () {
          return Data_Bifunctor_Wrap.bifunctorWrap(dictBitraversable.Bifunctor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Wrap.Wrap)(bisequence(dictBitraversable)(dictApplicative)(v));
          };
      }, function (dictApplicative) {
          return function (l) {
              return function (r) {
                  return function (v) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Wrap.Wrap)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
                  };
              };
          };
      });
  };
  var bitraverseDefault = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return function (t) {
                      return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable.Bifunctor0())(f)(g)(t));
                  };
              };
          };
      };
  };
  var bifor = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return function (g) {
                      return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
                  };
              };
          };
      };
  };
  exports["Bitraversable"] = Bitraversable;
  exports["bitraverse"] = bitraverse;
  exports["bisequence"] = bisequence;
  exports["bitraverseDefault"] = bitraverseDefault;
  exports["bisequenceDefault"] = bisequenceDefault;
  exports["ltraverse"] = ltraverse;
  exports["rtraverse"] = rtraverse;
  exports["bifor"] = bifor;
  exports["lfor"] = lfor;
  exports["rfor"] = rfor;
  exports["bitraversableClown"] = bitraversableClown;
  exports["bitraversableJoker"] = bitraversableJoker;
  exports["bitraversableFlip"] = bitraversableFlip;
  exports["bitraversableProduct"] = bitraversableProduct;
  exports["bitraversableWrap"] = bitraversableWrap;
})(PS["Data.Bitraversable"] = PS["Data.Bitraversable"] || {});
(function(exports) {
    "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.FunctorWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  };
  var mapDefault = function (dictFunctorWithIndex) {
      return function (f) {
          return mapWithIndex(dictFunctorWithIndex)(Data_Function["const"](f));
      };
  };
  var functorWithIndexMultiplicative = new FunctorWithIndex(function () {
      return Data_Monoid_Multiplicative.functorMultiplicative;
  }, function (f) {
      return Data_Functor.map(Data_Monoid_Multiplicative.functorMultiplicative)(f(Data_Unit.unit));
  });
  var functorWithIndexMaybe = new FunctorWithIndex(function () {
      return Data_Maybe.functorMaybe;
  }, function (f) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(f(Data_Unit.unit));
  });
  var functorWithIndexLast = new FunctorWithIndex(function () {
      return Data_Maybe_Last.functorLast;
  }, function (f) {
      return Data_Functor.map(Data_Maybe_Last.functorLast)(f(Data_Unit.unit));
  });
  var functorWithIndexFirst = new FunctorWithIndex(function () {
      return Data_Maybe_First.functorFirst;
  }, function (f) {
      return Data_Functor.map(Data_Maybe_First.functorFirst)(f(Data_Unit.unit));
  });
  var functorWithIndexDual = new FunctorWithIndex(function () {
      return Data_Monoid_Dual.functorDual;
  }, function (f) {
      return Data_Functor.map(Data_Monoid_Dual.functorDual)(f(Data_Unit.unit));
  });
  var functorWithIndexDisj = new FunctorWithIndex(function () {
      return Data_Monoid_Disj.functorDisj;
  }, function (f) {
      return Data_Functor.map(Data_Monoid_Disj.functorDisj)(f(Data_Unit.unit));
  });
  var functorWithIndexConj = new FunctorWithIndex(function () {
      return Data_Monoid_Conj.functorConj;
  }, function (f) {
      return Data_Functor.map(Data_Monoid_Conj.functorConj)(f(Data_Unit.unit));
  });
  var functorWithIndexArray = new FunctorWithIndex(function () {
      return Data_Functor.functorArray;
  }, $foreign.mapWithIndexArray);
  var functorWithIndexAdditive = new FunctorWithIndex(function () {
      return Data_Monoid_Additive.functorAdditive;
  }, function (f) {
      return Data_Functor.map(Data_Monoid_Additive.functorAdditive)(f(Data_Unit.unit));
  });
  exports["FunctorWithIndex"] = FunctorWithIndex;
  exports["mapWithIndex"] = mapWithIndex;
  exports["mapDefault"] = mapDefault;
  exports["functorWithIndexArray"] = functorWithIndexArray;
  exports["functorWithIndexMaybe"] = functorWithIndexMaybe;
  exports["functorWithIndexFirst"] = functorWithIndexFirst;
  exports["functorWithIndexLast"] = functorWithIndexLast;
  exports["functorWithIndexAdditive"] = functorWithIndexAdditive;
  exports["functorWithIndexDual"] = functorWithIndexDual;
  exports["functorWithIndexConj"] = functorWithIndexConj;
  exports["functorWithIndexDisj"] = functorWithIndexDisj;
  exports["functorWithIndexMultiplicative"] = functorWithIndexMultiplicative;
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var traverseWithIndex_ = function (dictApplicative) {
      return function (dictFoldableWithIndex) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function ($46) {
                      return Control_Apply.applySecond(dictApplicative.Apply0())(f(i)($46));
                  };
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var forWithIndex_ = function (dictApplicative) {
      return function (dictFoldableWithIndex) {
          return Data_Function.flip(traverseWithIndex_(dictApplicative)(dictFoldableWithIndex));
      };
  };
  var foldrDefault = function (dictFoldableWithIndex) {
      return function (f) {
          return foldrWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
      };
  };
  var foldlWithIndex = function (dict) {
      return dict.foldlWithIndex;
  };
  var foldlDefault = function (dictFoldableWithIndex) {
      return function (f) {
          return foldlWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
      };
  };
  var foldableWithIndexMultiplicative = new FoldableWithIndex(function () {
      return Data_Foldable.foldableMultiplicative;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableMultiplicative)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
  });
  var foldableWithIndexMaybe = new FoldableWithIndex(function () {
      return Data_Foldable.foldableMaybe;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
  });
  var foldableWithIndexLast = new FoldableWithIndex(function () {
      return Data_Foldable.foldableLast;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableLast)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(Data_Foldable.foldableLast)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(Data_Foldable.foldableLast)(f(Data_Unit.unit));
  });
  var foldableWithIndexFirst = new FoldableWithIndex(function () {
      return Data_Foldable.foldableFirst;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableFirst)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
  });
  var foldableWithIndexDual = new FoldableWithIndex(function () {
      return Data_Foldable.foldableDual;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableDual)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(Data_Foldable.foldableDual)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(Data_Foldable.foldableDual)(f(Data_Unit.unit));
  });
  var foldableWithIndexDisj = new FoldableWithIndex(function () {
      return Data_Foldable.foldableDisj;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableDisj)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
  });
  var foldableWithIndexConj = new FoldableWithIndex(function () {
      return Data_Foldable.foldableConj;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableConj)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(Data_Foldable.foldableConj)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(Data_Foldable.foldableConj)(f(Data_Unit.unit));
  });
  var foldableWithIndexAdditive = new FoldableWithIndex(function () {
      return Data_Foldable.foldableAdditive;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableAdditive)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
  });
  var foldWithIndexM = function (dictFoldableWithIndex) {
      return function (dictMonad) {
          return function (f) {
              return function (a0) {
                  return foldlWithIndex(dictFoldableWithIndex)(function (i) {
                      return function (ma) {
                          return function (b) {
                              return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f(i))(b));
                          };
                      };
                  })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
              };
          };
      };
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = new FoldableWithIndex(function () {
      return Data_Foldable.foldableArray;
  }, function (dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
  }, function (f) {
      return function (z) {
          return function ($47) {
              return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
                  return function (v) {
                      return f(v.value0)(y)(v.value1);
                  };
              })(z)(Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create)($47));
          };
      };
  }, function (f) {
      return function (z) {
          return function ($48) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
                  return function (y) {
                      return f(v.value0)(v.value1)(y);
                  };
              })(z)(Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create)($48));
          };
      };
  });
  var foldMapWithIndexDefaultL = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldlWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (acc) {
                      return function (x) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(i)(x));
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldMapWithIndex = function (dict) {
      return dict.foldMapWithIndex;
  };
  var foldlWithIndexDefault = function (dictFoldableWithIndex) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function (i) {
                      return function ($49) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(c(i))($49)));
                      };
                  })(xs)))(u);
              };
          };
      };
  };
  var foldrWithIndexDefault = function (dictFoldableWithIndex) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function (i) {
                      return function ($50) {
                          return Data_Monoid_Endo.Endo(c(i)($50));
                      };
                  })(xs))(u);
              };
          };
      };
  };
  var surroundMapWithIndex = function (dictFoldableWithIndex) {
      return function (dictSemigroup) {
          return function (d) {
              return function (t) {
                  return function (f) {
                      var joined = function (i) {
                          return function (a) {
                              return function (m) {
                                  return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(i)(a))(m));
                              };
                          };
                      };
                      return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
                  };
              };
          };
      };
  };
  var foldMapDefault = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(Data_Function["const"](f));
          };
      };
  };
  var findWithIndex = function (dictFoldableWithIndex) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  return function (v2) {
                      if (v1 instanceof Data_Maybe.Nothing && p(v)(v2)) {
                          return new Data_Maybe.Just({
                              index: v,
                              value: v2
                          });
                      };
                      return v1;
                  };
              };
          };
          return foldlWithIndex(dictFoldableWithIndex)(go)(Data_Maybe.Nothing.value);
      };
  };
  var anyWithIndex = function (dictFoldableWithIndex) {
      return function (dictHeytingAlgebra) {
          return function (t) {
              return function ($51) {
                  return Data_Newtype.unwrap(Data_Newtype.newtypeDisj)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra))(function (i) {
                      return function ($52) {
                          return Data_Monoid_Disj.Disj(t(i)($52));
                      };
                  })($51));
              };
          };
      };
  };
  var allWithIndex = function (dictFoldableWithIndex) {
      return function (dictHeytingAlgebra) {
          return function (t) {
              return function ($53) {
                  return Data_Newtype.unwrap(Data_Newtype.newtypeConj)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra))(function (i) {
                      return function ($54) {
                          return Data_Monoid_Conj.Conj(t(i)($54));
                      };
                  })($53));
              };
          };
      };
  };
  exports["FoldableWithIndex"] = FoldableWithIndex;
  exports["foldrWithIndex"] = foldrWithIndex;
  exports["foldlWithIndex"] = foldlWithIndex;
  exports["foldMapWithIndex"] = foldMapWithIndex;
  exports["foldrWithIndexDefault"] = foldrWithIndexDefault;
  exports["foldlWithIndexDefault"] = foldlWithIndexDefault;
  exports["foldMapWithIndexDefaultR"] = foldMapWithIndexDefaultR;
  exports["foldMapWithIndexDefaultL"] = foldMapWithIndexDefaultL;
  exports["foldWithIndexM"] = foldWithIndexM;
  exports["traverseWithIndex_"] = traverseWithIndex_;
  exports["forWithIndex_"] = forWithIndex_;
  exports["surroundMapWithIndex"] = surroundMapWithIndex;
  exports["allWithIndex"] = allWithIndex;
  exports["anyWithIndex"] = anyWithIndex;
  exports["findWithIndex"] = findWithIndex;
  exports["foldrDefault"] = foldrDefault;
  exports["foldlDefault"] = foldlDefault;
  exports["foldMapDefault"] = foldMapDefault;
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
  exports["foldableWithIndexMaybe"] = foldableWithIndexMaybe;
  exports["foldableWithIndexFirst"] = foldableWithIndexFirst;
  exports["foldableWithIndexLast"] = foldableWithIndexLast;
  exports["foldableWithIndexAdditive"] = foldableWithIndexAdditive;
  exports["foldableWithIndexDual"] = foldableWithIndexDual;
  exports["foldableWithIndexDisj"] = foldableWithIndexDisj;
  exports["foldableWithIndexConj"] = foldableWithIndexConj;
  exports["foldableWithIndexMultiplicative"] = foldableWithIndexMultiplicative;
})(PS["Data.FoldableWithIndex"] = PS["Data.FoldableWithIndex"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var TraversableWithIndex = function (FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
      this.FoldableWithIndex1 = FoldableWithIndex1;
      this.FunctorWithIndex0 = FunctorWithIndex0;
      this.Traversable2 = Traversable2;
      this.traverseWithIndex = traverseWithIndex;
  };
  var traverseWithIndexDefault = function (dictTraversableWithIndex) {
      return function (dictApplicative) {
          return function (f) {
              return function ($19) {
                  return Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative)(Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f)($19));
              };
          };
      };
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  };
  var traverseDefault = function (dictTraversableWithIndex) {
      return function (dictApplicative) {
          return function (f) {
              return traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(Data_Function["const"](f));
          };
      };
  };
  var traversableWithIndexMultiplicative = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexMultiplicative;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexMultiplicative;
  }, function () {
      return Data_Traversable.traversableMultiplicative;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(Data_Traversable.traversableMultiplicative)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var traversableWithIndexMaybe = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexMaybe;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexMaybe;
  }, function () {
      return Data_Traversable.traversableMaybe;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var traversableWithIndexLast = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexLast;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexLast;
  }, function () {
      return Data_Traversable.traversableLast;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(Data_Traversable.traversableLast)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var traversableWithIndexFirst = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexFirst;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexFirst;
  }, function () {
      return Data_Traversable.traversableFirst;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(Data_Traversable.traversableFirst)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var traversableWithIndexDual = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexDual;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexDual;
  }, function () {
      return Data_Traversable.traversableDual;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(Data_Traversable.traversableDual)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var traversableWithIndexDisj = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexDisj;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexDisj;
  }, function () {
      return Data_Traversable.traversableDisj;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(Data_Traversable.traversableDisj)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var traversableWithIndexConj = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexConj;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexConj;
  }, function () {
      return Data_Traversable.traversableConj;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(Data_Traversable.traversableConj)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var traversableWithIndexArray = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexArray;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexArray;
  }, function () {
      return Data_Traversable.traversableArray;
  }, function (dictApplicative) {
      return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
  });
  var traversableWithIndexAdditive = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexAdditive;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexAdditive;
  }, function () {
      return Data_Traversable.traversableAdditive;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(Data_Traversable.traversableAdditive)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var mapAccumRWithIndex = function (dictTraversableWithIndex) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return Data_Traversable_Accum_Internal.stateR(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateR)(function (i) {
                      return function (a) {
                          return function (s) {
                              return f(i)(s)(a);
                          };
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanrWithIndex = function (dictTraversableWithIndex) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumRWithIndex(dictTraversableWithIndex)(function (i) {
                      return function (b) {
                          return function (a) {
                              var b$prime = f(i)(a)(b);
                              return {
                                  accum: b$prime,
                                  value: b$prime
                              };
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  var mapAccumLWithIndex = function (dictTraversableWithIndex) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return Data_Traversable_Accum_Internal.stateL(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateL)(function (i) {
                      return function (a) {
                          return function (s) {
                              return f(i)(s)(a);
                          };
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanlWithIndex = function (dictTraversableWithIndex) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumLWithIndex(dictTraversableWithIndex)(function (i) {
                      return function (b) {
                          return function (a) {
                              var b$prime = f(i)(b)(a);
                              return {
                                  accum: b$prime,
                                  value: b$prime
                              };
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  var forWithIndex = function (dictApplicative) {
      return function (dictTraversableWithIndex) {
          return Data_Function.flip(traverseWithIndex(dictTraversableWithIndex)(dictApplicative));
      };
  };
  exports["TraversableWithIndex"] = TraversableWithIndex;
  exports["traverseWithIndex"] = traverseWithIndex;
  exports["traverseWithIndexDefault"] = traverseWithIndexDefault;
  exports["forWithIndex"] = forWithIndex;
  exports["scanlWithIndex"] = scanlWithIndex;
  exports["mapAccumLWithIndex"] = mapAccumLWithIndex;
  exports["scanrWithIndex"] = scanrWithIndex;
  exports["mapAccumRWithIndex"] = mapAccumRWithIndex;
  exports["traverseDefault"] = traverseDefault;
  exports["traversableWithIndexArray"] = traversableWithIndexArray;
  exports["traversableWithIndexMaybe"] = traversableWithIndexMaybe;
  exports["traversableWithIndexFirst"] = traversableWithIndexFirst;
  exports["traversableWithIndexLast"] = traversableWithIndexLast;
  exports["traversableWithIndexAdditive"] = traversableWithIndexAdditive;
  exports["traversableWithIndexDual"] = traversableWithIndexDual;
  exports["traversableWithIndexConj"] = traversableWithIndexConj;
  exports["traversableWithIndexDisj"] = traversableWithIndexDisj;
  exports["traversableWithIndexMultiplicative"] = traversableWithIndexMultiplicative;
})(PS["Data.TraversableWithIndex"] = PS["Data.TraversableWithIndex"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var showEither = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              if (v instanceof Left) {
                  return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Right) {
                  return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Either line 163, column 1 - line 163, column 61: " + [ v.constructor.name ]);
          });
      };
  };
  var note$prime = function (f) {
      return Data_Maybe["maybe'"](function ($198) {
          return Left.create(f($198));
      })(Right.create);
  };
  var note = function (a) {
      return Data_Maybe.maybe(new Left(a))(Right.create);
  };
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 38, column 8 - line 38, column 52: " + [ m.constructor.name ]);
      };
  });
  var functorWithIndexEither = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorEither;
  }, function (f) {
      return Data_Functor.map(functorEither)(f(Data_Unit.unit));
  });
  var invariantEither = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorEither));
  var fromRight = function (dictPartial) {
      return function (v) {
          var $__unused = function (dictPartial1) {
              return function ($dollar71) {
                  return $dollar71;
              };
          };
          return $__unused(dictPartial)((function () {
              if (v instanceof Right) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Either line 261, column 1 - line 261, column 52: " + [ v.constructor.name ]);
          })());
      };
  };
  var fromLeft = function (dictPartial) {
      return function (v) {
          var $__unused = function (dictPartial1) {
              return function ($dollar75) {
                  return $dollar75;
              };
          };
          return $__unused(dictPartial)((function () {
              if (v instanceof Left) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Either line 256, column 1 - line 256, column 51: " + [ v.constructor.name ]);
          })());
      };
  };
  var foldableEither = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Left) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Right) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 187, column 1 - line 187, column 47: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return z;
              };
              if (v1 instanceof Right) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 187, column 1 - line 187, column 47: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return z;
              };
              if (v1 instanceof Right) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Either line 187, column 1 - line 187, column 47: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldableWithIndexEither = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableEither;
  }, function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Left) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Right) {
                  return f(Data_Unit.unit)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 195, column 1 - line 195, column 70: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return z;
              };
              if (v1 instanceof Right) {
                  return v(Data_Unit.unit)(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 195, column 1 - line 195, column 70: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return z;
              };
              if (v1 instanceof Right) {
                  return v(Data_Unit.unit)(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Either line 195, column 1 - line 195, column 70: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var traversableEither = new Data_Traversable.Traversable(function () {
      return foldableEither;
  }, function () {
      return functorEither;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Left) {
              return Control_Applicative.pure(dictApplicative)(new Left(v.value0));
          };
          if (v instanceof Right) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Either line 211, column 1 - line 211, column 53: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
              };
              if (v1 instanceof Right) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 211, column 1 - line 211, column 53: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var traversableWithIndexEither = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexEither;
  }, function () {
      return functorWithIndexEither;
  }, function () {
      return traversableEither;
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
              };
              if (v1 instanceof Right) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v(Data_Unit.unit)(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 217, column 1 - line 217, column 76: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var extendEither = new Control_Extend.Extend(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          return new Right(v(v1));
      };
  });
  var eqEither = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  if (x instanceof Left && y instanceof Left) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                  };
                  if (x instanceof Right && y instanceof Right) {
                      return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
                  };
                  return false;
              };
          });
      };
  };
  var ordEither = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqEither(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  if (x instanceof Left && y instanceof Left) {
                      return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  };
                  if (x instanceof Left) {
                      return Data_Ordering.LT.value;
                  };
                  if (y instanceof Left) {
                      return Data_Ordering.GT.value;
                  };
                  if (x instanceof Right && y instanceof Right) {
                      return Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either line 179, column 8 - line 179, column 64: " + [ x.constructor.name, y.constructor.name ]);
              };
          });
      };
  };
  var eq1Either = function (dictEq) {
      return new Data_Eq.Eq1(function (dictEq1) {
          return Data_Eq.eq(eqEither(dictEq)(dictEq1));
      });
  };
  var ord1Either = function (dictOrd) {
      return new Data_Ord.Ord1(function () {
          return eq1Either(dictOrd.Eq0());
      }, function (dictOrd1) {
          return Data_Ord.compare(ordEither(dictOrd)(dictOrd1));
      });
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 238, column 1 - line 238, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
  var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
  var choose = function (dictAlt) {
      return function (a) {
          return function (b) {
              return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Left.create)(a))(Data_Functor.map(dictAlt.Functor0())(Right.create)(b));
          };
      };
  };
  var boundedEither = function (dictBounded) {
      return function (dictBounded1) {
          return new Data_Bounded.Bounded(function () {
              return ordEither(dictBounded.Ord0())(dictBounded1.Ord0());
          }, new Left(Data_Bounded.bottom(dictBounded)), new Right(Data_Bounded.top(dictBounded1)));
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 46, column 1 - line 46, column 45: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var bifoldableEither = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return v(v2.value0);
                  };
                  if (v2 instanceof Right) {
                      return v1(v2.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either line 203, column 1 - line 203, column 47: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      };
  }, function (v) {
      return function (v1) {
          return function (z) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return v(z)(v2.value0);
                  };
                  if (v2 instanceof Right) {
                      return v1(z)(v2.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either line 203, column 1 - line 203, column 47: " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
              };
          };
      };
  }, function (v) {
      return function (v1) {
          return function (z) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return v(v2.value0)(z);
                  };
                  if (v2 instanceof Right) {
                      return v1(v2.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Either line 203, column 1 - line 203, column 47: " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
              };
          };
      };
  });
  var bitraversableEither = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableEither;
  }, function () {
      return bifunctorEither;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Left) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Left.create)(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Either line 221, column 1 - line 221, column 53: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Left.create)(v(v2.value0));
                  };
                  if (v2 instanceof Right) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v1(v2.value0));
                  };
                  throw new Error("Failed pattern match at Data.Either line 221, column 1 - line 221, column 53: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 82, column 1 - line 82, column 41: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var semigroupEither = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (x) {
          return function (y) {
              return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semigroup.append(dictSemigroup))(x))(y);
          };
      });
  };
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var monadEither = new Control_Monad.Monad(function () {
      return applicativeEither;
  }, function () {
      return bindEither;
  });
  var altEither = new Control_Alt.Alt(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return v1;
          };
          return v;
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["choose"] = choose;
  exports["isLeft"] = isLeft;
  exports["isRight"] = isRight;
  exports["fromLeft"] = fromLeft;
  exports["fromRight"] = fromRight;
  exports["note"] = note;
  exports["note'"] = note$prime;
  exports["hush"] = hush;
  exports["functorEither"] = functorEither;
  exports["functorWithIndexEither"] = functorWithIndexEither;
  exports["invariantEither"] = invariantEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["altEither"] = altEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
  exports["extendEither"] = extendEither;
  exports["showEither"] = showEither;
  exports["eqEither"] = eqEither;
  exports["eq1Either"] = eq1Either;
  exports["ordEither"] = ordEither;
  exports["ord1Either"] = ord1Either;
  exports["boundedEither"] = boundedEither;
  exports["foldableEither"] = foldableEither;
  exports["foldableWithIndexEither"] = foldableWithIndexEither;
  exports["bifoldableEither"] = bifoldableEither;
  exports["traversableEither"] = traversableEither;
  exports["traversableWithIndexEither"] = traversableWithIndexEither;
  exports["bitraversableEither"] = bitraversableEither;
  exports["semigroupEither"] = semigroupEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor = PS["Data.Functor"];                 
  var Comonad = function (Extend0, extract) {
      this.Extend0 = Extend0;
      this.extract = extract;
  };
  var extract = function (dict) {
      return dict.extract;
  };
  exports["Comonad"] = Comonad;
  exports["extract"] = extract;
})(PS["Control.Comonad"] = PS["Control.Comonad"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Max = function (x) {
      return x;
  };
  var showMax = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Max " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupMax = function (dictOrd) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Ord.max(dictOrd)(v)(v1);
          };
      });
  };
  var newtypeMax = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Max);
  var monoidMax = function (dictBounded) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMax(dictBounded.Ord0());
      }, Data_Bounded.bottom(dictBounded));
  };
  var eqMax = function (dictEq) {
      return dictEq;
  };
  var ordMax = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqMax(dictOrd.Eq0());
      }, function (v) {
          return function (v1) {
              return Data_Ord.compare(dictOrd)(v)(v1);
          };
      });
  };
  exports["Max"] = Max;
  exports["newtypeMax"] = newtypeMax;
  exports["eqMax"] = eqMax;
  exports["ordMax"] = ordMax;
  exports["semigroupMax"] = semigroupMax;
  exports["monoidMax"] = monoidMax;
  exports["showMax"] = showMax;
})(PS["Data.Ord.Max"] = PS["Data.Ord.Max"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Min = function (x) {
      return x;
  };
  var showMin = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Min " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupMin = function (dictOrd) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Ord.min(dictOrd)(v)(v1);
          };
      });
  };
  var newtypeMin = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Min);
  var monoidMin = function (dictBounded) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMin(dictBounded.Ord0());
      }, Data_Bounded.top(dictBounded));
  };
  var eqMin = function (dictEq) {
      return dictEq;
  };
  var ordMin = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqMin(dictOrd.Eq0());
      }, function (v) {
          return function (v1) {
              return Data_Ord.compare(dictOrd)(v)(v1);
          };
      });
  };
  exports["Min"] = Min;
  exports["newtypeMin"] = newtypeMin;
  exports["eqMin"] = eqMin;
  exports["ordMin"] = ordMin;
  exports["semigroupMin"] = semigroupMin;
  exports["monoidMin"] = monoidMin;
  exports["showMin"] = showMin;
})(PS["Data.Ord.Min"] = PS["Data.Ord.Min"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord_Max = PS["Data.Ord.Max"];
  var Data_Ord_Min = PS["Data.Ord.Min"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var JoinWith = function (x) {
      return x;
  };
  var Act = function (x) {
      return x;
  };
  var Foldable1 = function (Foldable0, fold1, foldMap1) {
      this.Foldable0 = Foldable0;
      this.fold1 = fold1;
      this.foldMap1 = foldMap1;
  };
  var semigroupJoinWith = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return JoinWith(function (j) {
                  return Data_Semigroup.append(dictSemigroup)(v(j))(Data_Semigroup.append(dictSemigroup)(j)(v1(j)));
              });
          };
      });
  };
  var semigroupAct = function (dictApply) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Control_Apply.applySecond(dictApply)(v)(v1);
          };
      });
  };
  var joinee = function (v) {
      return v;
  };
  var getAct = function (v) {
      return v;
  };
  var foldMap1 = function (dict) {
      return dict.foldMap1;
  };
  var intercalateMap = function (dictFoldable1) {
      return function (dictSemigroup) {
          return function (j) {
              return function (f) {
                  return function (foldable) {
                      return joinee(foldMap1(dictFoldable1)(semigroupJoinWith(dictSemigroup))(function ($43) {
                          return JoinWith(Data_Function["const"](f($43)));
                      })(foldable))(j);
                  };
              };
          };
      };
  };
  var intercalate = function (dictFoldable1) {
      return function (dictSemigroup) {
          return Data_Function.flip(intercalateMap(dictFoldable1)(dictSemigroup))(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var maximum = function (dictOrd) {
      return function (dictFoldable1) {
          return Data_Newtype.ala(Data_Functor.functorFn)(Data_Ord_Max.newtypeMax)(Data_Ord_Max.newtypeMax)(Data_Ord_Max.Max)(foldMap1(dictFoldable1)(Data_Ord_Max.semigroupMax(dictOrd)));
      };
  };
  var minimum = function (dictOrd) {
      return function (dictFoldable1) {
          return Data_Newtype.ala(Data_Functor.functorFn)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.Min)(foldMap1(dictFoldable1)(Data_Ord_Min.semigroupMin(dictOrd)));
      };
  };
  var traverse1_ = function (dictFoldable1) {
      return function (dictApply) {
          return function (f) {
              return function (t) {
                  return Data_Functor.voidRight(dictApply.Functor0())(Data_Unit.unit)(getAct(foldMap1(dictFoldable1)(semigroupAct(dictApply))(function ($44) {
                      return Act(f($44));
                  })(t)));
              };
          };
      };
  };
  var for1_ = function (dictFoldable1) {
      return function (dictApply) {
          return Data_Function.flip(traverse1_(dictFoldable1)(dictApply));
      };
  };
  var sequence1_ = function (dictFoldable1) {
      return function (dictApply) {
          return traverse1_(dictFoldable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var fold1Default = function (dictFoldable1) {
      return function (dictSemigroup) {
          return foldMap1(dictFoldable1)(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var foldableDual = new Foldable1(function () {
      return Data_Foldable.foldableDual;
  }, function (dictSemigroup) {
      return fold1Default(foldableDual)(dictSemigroup);
  }, function (dictSemigroup) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  });
  var foldableMultiplicative = new Foldable1(function () {
      return Data_Foldable.foldableMultiplicative;
  }, function (dictSemigroup) {
      return fold1Default(foldableMultiplicative)(dictSemigroup);
  }, function (dictSemigroup) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  });
  var fold1 = function (dict) {
      return dict.fold1;
  };
  var foldMap1Default = function (dictFoldable1) {
      return function (dictFunctor) {
          return function (dictSemigroup) {
              return function (f) {
                  return function ($45) {
                      return fold1(dictFoldable1)(dictSemigroup)(Data_Functor.map(dictFunctor)(f)($45));
                  };
              };
          };
      };
  };
  exports["Foldable1"] = Foldable1;
  exports["foldMap1"] = foldMap1;
  exports["fold1"] = fold1;
  exports["traverse1_"] = traverse1_;
  exports["for1_"] = for1_;
  exports["sequence1_"] = sequence1_;
  exports["foldMap1Default"] = foldMap1Default;
  exports["fold1Default"] = fold1Default;
  exports["intercalate"] = intercalate;
  exports["intercalateMap"] = intercalateMap;
  exports["maximum"] = maximum;
  exports["minimum"] = minimum;
  exports["foldableDual"] = foldableDual;
  exports["foldableMultiplicative"] = foldableMultiplicative;
})(PS["Data.Semigroup.Foldable"] = PS["Data.Semigroup.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];                 
  var Traversable1 = function (Foldable10, Traversable1, sequence1, traverse1) {
      this.Foldable10 = Foldable10;
      this.Traversable1 = Traversable1;
      this.sequence1 = sequence1;
      this.traverse1 = traverse1;
  };
  var traverse1 = function (dict) {
      return dict.traverse1;
  };
  var sequence1Default = function (dictTraversable1) {
      return function (dictApply) {
          return traverse1(dictTraversable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableDual = new Traversable1(function () {
      return Data_Semigroup_Foldable.foldableDual;
  }, function () {
      return Data_Traversable.traversableDual;
  }, function (dictApply) {
      return sequence1Default(traversableDual)(dictApply);
  }, function (dictApply) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Dual.Dual)(f(v));
          };
      };
  });
  var traversableMultiplicative = new Traversable1(function () {
      return Data_Semigroup_Foldable.foldableMultiplicative;
  }, function () {
      return Data_Traversable.traversableMultiplicative;
  }, function (dictApply) {
      return sequence1Default(traversableMultiplicative)(dictApply);
  }, function (dictApply) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
          };
      };
  });
  var sequence1 = function (dict) {
      return dict.sequence1;
  };
  var traverse1Default = function (dictTraversable1) {
      return function (dictApply) {
          return function (f) {
              return function (ta) {
                  return sequence1(dictTraversable1)(dictApply)(Data_Functor.map((dictTraversable1.Traversable1()).Functor0())(f)(ta));
              };
          };
      };
  };
  exports["sequence1"] = sequence1;
  exports["traverse1"] = traverse1;
  exports["Traversable1"] = Traversable1;
  exports["traverse1Default"] = traverse1Default;
  exports["sequence1Default"] = sequence1Default;
  exports["traversableDual"] = traversableDual;
  exports["traversableMultiplicative"] = traversableMultiplicative;
})(PS["Data.Semigroup.Traversable"] = PS["Data.Semigroup.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Identity = function (x) {
      return x;
  };
  var showIdentity = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Identity " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringIdentity = function (dictSemiring) {
      return dictSemiring;
  };
  var semigroupIdenity = function (dictSemigroup) {
      return dictSemigroup;
  };
  var ringIdentity = function (dictRing) {
      return dictRing;
  };
  var ordIdentity = function (dictOrd) {
      return dictOrd;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var monoidIdentity = function (dictMonoid) {
      return dictMonoid;
  };
  var lazyIdentity = function (dictLazy) {
      return dictLazy;
  };
  var heytingAlgebraIdentity = function (dictHeytingAlgebra) {
      return dictHeytingAlgebra;
  };
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var functorWithIndexIdentity = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorIdentity;
  }, function (f) {
      return function (v) {
          return f(Data_Unit.unit)(v);
      };
  });
  var invariantIdentity = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorIdentity));
  var foldableIdentity = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableWithIndexIdentity = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableIdentity;
  }, function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(Data_Unit.unit)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(Data_Unit.unit)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(Data_Unit.unit)(v)(z);
          };
      };
  });
  var traversableIdentity = new Data_Traversable.Traversable(function () {
      return foldableIdentity;
  }, function () {
      return functorIdentity;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(f(v));
          };
      };
  });
  var traversableWithIndexIdentity = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexIdentity;
  }, function () {
      return functorWithIndexIdentity;
  }, function () {
      return traversableIdentity;
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(f(Data_Unit.unit)(v));
          };
      };
  });
  var foldable1Identity = new Data_Semigroup_Foldable.Foldable1(function () {
      return foldableIdentity;
  }, function (dictSemigroup) {
      return function (v) {
          return v;
      };
  }, function (dictSemigroup) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  });
  var traversable1Identity = new Data_Semigroup_Traversable.Traversable1(function () {
      return foldable1Identity;
  }, function () {
      return traversableIdentity;
  }, function (dictApply) {
      return function (v) {
          return Data_Functor.map(dictApply.Functor0())(Identity)(v);
      };
  }, function (dictApply) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictApply.Functor0())(Identity)(f(v));
          };
      };
  });
  var extendIdentity = new Control_Extend.Extend(function () {
      return functorIdentity;
  }, function (f) {
      return function (m) {
          return f(m);
      };
  });
  var euclideanRingIdentity = function (dictEuclideanRing) {
      return dictEuclideanRing;
  };
  var eqIdentity = function (dictEq) {
      return dictEq;
  };
  var eq1Identity = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqIdentity(dictEq));
  });
  var ord1Identity = new Data_Ord.Ord1(function () {
      return eq1Identity;
  }, function (dictOrd) {
      return Data_Ord.compare(ordIdentity(dictOrd));
  });
  var comonadIdentity = new Control_Comonad.Comonad(function () {
      return extendIdentity;
  }, function (v) {
      return v;
  });
  var commutativeRingIdentity = function (dictCommutativeRing) {
      return dictCommutativeRing;
  };
  var boundedIdentity = function (dictBounded) {
      return dictBounded;
  };
  var booleanAlgebraIdentity = function (dictBooleanAlgebra) {
      return dictBooleanAlgebra;
  };
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  var altIdentity = new Control_Alt.Alt(function () {
      return functorIdentity;
  }, function (x) {
      return function (v) {
          return x;
      };
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["eqIdentity"] = eqIdentity;
  exports["ordIdentity"] = ordIdentity;
  exports["boundedIdentity"] = boundedIdentity;
  exports["heytingAlgebraIdentity"] = heytingAlgebraIdentity;
  exports["booleanAlgebraIdentity"] = booleanAlgebraIdentity;
  exports["semigroupIdenity"] = semigroupIdenity;
  exports["monoidIdentity"] = monoidIdentity;
  exports["semiringIdentity"] = semiringIdentity;
  exports["euclideanRingIdentity"] = euclideanRingIdentity;
  exports["ringIdentity"] = ringIdentity;
  exports["commutativeRingIdentity"] = commutativeRingIdentity;
  exports["lazyIdentity"] = lazyIdentity;
  exports["showIdentity"] = showIdentity;
  exports["eq1Identity"] = eq1Identity;
  exports["ord1Identity"] = ord1Identity;
  exports["functorIdentity"] = functorIdentity;
  exports["functorWithIndexIdentity"] = functorWithIndexIdentity;
  exports["invariantIdentity"] = invariantIdentity;
  exports["altIdentity"] = altIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
  exports["extendIdentity"] = extendIdentity;
  exports["comonadIdentity"] = comonadIdentity;
  exports["foldableIdentity"] = foldableIdentity;
  exports["foldable1Identity"] = foldable1Identity;
  exports["foldableWithIndexIdentity"] = foldableWithIndexIdentity;
  exports["traversableIdentity"] = traversableIdentity;
  exports["traversable1Identity"] = traversable1Identity;
  exports["traversableWithIndexIdentity"] = traversableWithIndexIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.untilE = function (f) {
    return function () {
      while (!f());
      return {};
    };
  };

  exports.whileE = function (f) {
    return function (a) {
      return function () {
        while (f()) {
          a();
        }
        return {};
      };
    };
  };

  exports.forE = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  var semigroupEffect = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup)));
  };
  var monoidEffect = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffect(dictMonoid.Semigroup0());
      }, $foreign.pureE(Data_Monoid.mempty(dictMonoid)));
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
  exports["semigroupEffect"] = semigroupEffect;
  exports["monoidEffect"] = monoidEffect;
  exports["untilE"] = $foreign.untilE;
  exports["whileE"] = $foreign.whileE;
  exports["forE"] = $foreign.forE;
  exports["foreachE"] = $foreign.foreachE;
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
    "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Ref"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];                 
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify"] = modify;
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["modify'"] = $foreign["modify'"];
  exports["write"] = $foreign.write;
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Partial"];          
  var crash = function (dictPartial) {
      return $foreign.crashWith(dictPartial)("Partial.crash: partial function");
  };
  exports["crash"] = crash;
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];                 
  var unsafePartialBecause = function (v) {
      return function (x) {
          return $foreign.unsafePartial(function (dictPartial) {
              return x(dictPartial);
          });
      };
  };
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafePartialBecause"] = unsafePartialBecause;
  exports["unsafeCrashWith"] = unsafeCrashWith;
  exports["unsafePartial"] = $foreign.unsafePartial;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Ref = PS["Effect.Ref"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRecM2 = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return tailRecM(dictMonadRec)(function (o) {
                      return f(o.a)(o.b);
                  })({
                      a: a,
                      b: b
                  });
              };
          };
      };
  };
  var tailRecM3 = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return tailRecM(dictMonadRec)(function (o) {
                          return f(o.a)(o.b)(o.c);
                      })({
                          a: a,
                          b: b,
                          c: c
                      });
                  };
              };
          };
      };
  };
  var tailRec = function (f) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Loop) {
                  $copy_v = f(v.value0);
                  return;
              };
              if (v instanceof Done) {
                  $tco_done = true;
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 91, column 3 - line 91, column 25: " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($53) {
          return go(f($53));
      };
  };
  var monadRecMaybe = new MonadRec(function () {
      return Data_Maybe.monadMaybe;
  }, function (f) {
      return function (a0) {
          var g = function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return new Done(Data_Maybe.Nothing.value);
              };
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Loop) {
                  return new Loop(f(v.value0.value0));
              };
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Done) {
                  return new Done(new Data_Maybe.Just(v.value0.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 127, column 7 - line 127, column 31: " + [ v.constructor.name ]);
          };
          return tailRec(g)(f(a0));
      };
  });
  var monadRecIdentity = new MonadRec(function () {
      return Data_Identity.monadIdentity;
  }, function (f) {
      var runIdentity = function (v) {
          return v;
      };
      return function ($54) {
          return Data_Identity.Identity(tailRec(function ($55) {
              return runIdentity(f($55));
          })($54));
      };
  });
  var monadRecFunction = new MonadRec(function () {
      return Control_Monad.monadFn;
  }, function (f) {
      return function (a0) {
          return function (e) {
              return tailRec(function (a) {
                  return f(a)(e);
              })(a0);
          };
      };
  });
  var monadRecEither = new MonadRec(function () {
      return Data_Either.monadEither;
  }, function (f) {
      return function (a0) {
          var g = function (v) {
              if (v instanceof Data_Either.Left) {
                  return new Done(new Data_Either.Left(v.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                  return new Loop(f(v.value0.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                  return new Done(new Data_Either.Right(v.value0.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 119, column 7 - line 119, column 33: " + [ v.constructor.name ]);
          };
          return tailRec(g)(f(a0));
      };
  });
  var monadRecEffect = new MonadRec(function () {
      return Effect.monadEffect;
  }, function (f) {
      return function (a) {
          var fromDone = function (v) {
              var $__unused = function (dictPartial1) {
                  return function ($dollar19) {
                      return $dollar19;
                  };
              };
              return $__unused()((function () {
                  if (v instanceof Done) {
                      return v.value0;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Rec.Class line 111, column 30 - line 111, column 44: " + [ v.constructor.name ]);
              })());
          };
          return function __do() {
              var v = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
              (function () {
                  while (!(function __do() {
                      var v1 = Effect_Ref.read(v)();
                      if (v1 instanceof Loop) {
                          var v2 = f(v1.value0)();
                          var v3 = Effect_Ref.write(v2)(v)();
                          return false;
                      };
                      if (v1 instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 102, column 22 - line 107, column 28: " + [ v1.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(v))();
          };
      };
  });
  var functorStep = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Loop) {
              return new Loop(m.value0);
          };
          if (m instanceof Done) {
              return new Done(f(m.value0));
          };
          throw new Error("Failed pattern match at Control.Monad.Rec.Class line 25, column 8 - line 25, column 48: " + [ m.constructor.name ]);
      };
  });
  var forever = function (dictMonadRec) {
      return function (ma) {
          return tailRecM(dictMonadRec)(function (u) {
              return Data_Functor.voidRight((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(new Loop(u))(ma);
          })(Data_Unit.unit);
      };
  };
  var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Loop) {
                  return new Loop(v(v2.value0));
              };
              if (v2 instanceof Done) {
                  return new Done(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 27, column 1 - line 27, column 41: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRec"] = tailRec;
  exports["tailRecM"] = tailRecM;
  exports["tailRecM2"] = tailRecM2;
  exports["tailRecM3"] = tailRecM3;
  exports["forever"] = forever;
  exports["functorStep"] = functorStep;
  exports["bifunctorStep"] = bifunctorStep;
  exports["monadRecIdentity"] = monadRecIdentity;
  exports["monadRecEffect"] = monadRecEffect;
  exports["monadRecFunction"] = monadRecFunction;
  exports["monadRecEither"] = monadRecEither;
  exports["monadRecMaybe"] = monadRecMaybe;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
    "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.run = function (f) {
    return f();
  };

  exports["while"] = function (f) {
    return function (a) {
      return function () {
        while (f()) {
          a();
        }
      };
    };
  };

  exports["for"] = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (a) {
    return function (ref) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Monad.ST.Internal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  var monadRecST = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadST;
  }, function (f) {
      return function (a) {
          var isLooping = function (v) {
              if (v instanceof Control_Monad_Rec_Class.Loop) {
                  return true;
              };
              return false;
          };
          var fromDone = function (v) {
              var $__unused = function (dictPartial1) {
                  return function ($dollar6) {
                      return $dollar6;
                  };
              };
              return $__unused()((function () {
                  if (v instanceof Control_Monad_Rec_Class.Done) {
                      return v.value0;
                  };
                  throw new Error("Failed pattern match at Control.Monad.ST.Internal line 54, column 32 - line 54, column 46: " + [ v.constructor.name ]);
              })());
          };
          return Control_Bind.bind(bindST)(Control_Bind.bindFlipped(bindST)($foreign["new"])(f(a)))(function (v) {
              return Control_Bind.discard(Control_Bind.discardUnit)(bindST)($foreign["while"](Data_Functor.map(functorST)(isLooping)($foreign.read(v)))(Control_Bind.bind(bindST)($foreign.read(v))(function (v1) {
                  if (v1 instanceof Control_Monad_Rec_Class.Loop) {
                      return Control_Bind.bind(bindST)(f(v1.value0))(function (v2) {
                          return Data_Functor["void"](functorST)($foreign.write(v2)(v));
                      });
                  };
                  if (v1 instanceof Control_Monad_Rec_Class.Done) {
                      return Control_Applicative.pure(applicativeST)(Data_Unit.unit);
                  };
                  throw new Error("Failed pattern match at Control.Monad.ST.Internal line 46, column 18 - line 50, column 28: " + [ v1.constructor.name ]);
              })))(function () {
                  return Data_Functor.map(functorST)(fromDone)($foreign.read(v));
              });
          });
      };
  });
  exports["modify"] = modify;
  exports["functorST"] = functorST;
  exports["applyST"] = applyST;
  exports["applicativeST"] = applicativeST;
  exports["bindST"] = bindST;
  exports["monadST"] = monadST;
  exports["monadRecST"] = monadRecST;
  exports["map_"] = $foreign.map_;
  exports["pure_"] = $foreign.pure_;
  exports["bind_"] = $foreign.bind_;
  exports["run"] = $foreign.run;
  exports["while"] = $foreign["while"];
  exports["for"] = $foreign["for"];
  exports["foreach"] = $foreign.foreach;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["modify'"] = $foreign["modify'"];
  exports["write"] = $foreign.write;
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function(exports) {
    "use strict";

  exports.fold1Impl = function (f) {
    return function (xs) {
      var acc = xs[0];
      var len = xs.length;
      for (var i = 1; i < len; i++) {
        acc = f(acc)(xs[i]);
      }
      return acc;
    };
  };

  exports.traverse1Impl = function () {
    function Cont(fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function finalCell(head) {
      return new ConsCell(head, emptyList);
    }

    function consList(x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray(list) {
      var arr = [];
      var xs = list;
      while (xs !== emptyList) {
        arr.push(xs.head);
        xs = xs.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (f) {
          var buildFrom = function (x, ys) {
            return apply(map(consList)(f(x)))(ys);
          };

          var go = function (acc, currentLen, xs) {
            if (currentLen === 0) {
              return acc;
            } else {
              var last = xs[currentLen - 1];
              return new Cont(function () {
                var built = go(buildFrom(last, acc), currentLen - 1, xs);
                return built;
              });
            }
          };

          return function (array) {
            var acc = map(finalCell)(f(array[array.length - 1]));
            var result = go(acc, array.length - 1, array);
            while (result instanceof Cont) {
              result = result.fn();
            }

            return map(listToArray)(result);
          };
        };
      };
    };
  }();
})(PS["Data.Array.NonEmpty.Internal"] = PS["Data.Array.NonEmpty.Internal"] || {});
(function(exports) {
    "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];                 
  var Distributive = function (Functor0, collect, distribute) {
      this.Functor0 = Functor0;
      this.collect = collect;
      this.distribute = distribute;
  };
  var distributiveIdentity = new Distributive(function () {
      return Data_Identity.functorIdentity;
  }, function (dictFunctor) {
      return function (f) {
          return function ($11) {
              return Data_Identity.Identity(Data_Functor.map(dictFunctor)(function ($12) {
                  return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(f($12));
              })($11));
          };
      };
  }, function (dictFunctor) {
      return function ($13) {
          return Data_Identity.Identity(Data_Functor.map(dictFunctor)(Data_Newtype.unwrap(Data_Identity.newtypeIdentity))($13));
      };
  });
  var distribute = function (dict) {
      return dict.distribute;
  };
  var distributiveFunction = new Distributive(function () {
      return Data_Functor.functorFn;
  }, function (dictFunctor) {
      return function (f) {
          return function ($14) {
              return distribute(distributiveFunction)(dictFunctor)(Data_Functor.map(dictFunctor)(f)($14));
          };
      };
  }, function (dictFunctor) {
      return function (a) {
          return function (e) {
              return Data_Functor.map(dictFunctor)(function (v) {
                  return v(e);
              })(a);
          };
      };
  });
  var cotraverse = function (dictDistributive) {
      return function (dictFunctor) {
          return function (f) {
              return function ($15) {
                  return Data_Functor.map(dictDistributive.Functor0())(f)(distribute(dictDistributive)(dictFunctor)($15));
              };
          };
      };
  };
  var collectDefault = function (dictDistributive) {
      return function (dictFunctor) {
          return function (f) {
              return function ($16) {
                  return distribute(dictDistributive)(dictFunctor)(Data_Functor.map(dictFunctor)(f)($16));
              };
          };
      };
  };
  var collect = function (dict) {
      return dict.collect;
  };
  var distributeDefault = function (dictDistributive) {
      return function (dictFunctor) {
          return collect(dictDistributive)(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["collect"] = collect;
  exports["distribute"] = distribute;
  exports["Distributive"] = Distributive;
  exports["distributeDefault"] = distributeDefault;
  exports["collectDefault"] = collectDefault;
  exports["cotraverse"] = cotraverse;
  exports["distributiveIdentity"] = distributiveIdentity;
  exports["distributiveFunction"] = distributiveFunction;
})(PS["Data.Distributive"] = PS["Data.Distributive"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var TypeEquals = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var to = function (dict) {
      return dict.to;
  };
  var refl = new TypeEquals(function (a) {
      return a;
  }, function (a) {
      return a;
  });
  var from = function (dict) {
      return dict.from;
  };
  exports["TypeEquals"] = TypeEquals;
  exports["to"] = to;
  exports["from"] = from;
  exports["refl"] = refl;
})(PS["Type.Equality"] = PS["Type.Equality"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var swap = function (v) {
      return new Tuple(v.value1, v.value0);
  };
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var semiringTuple = function (dictSemiring) {
      return function (dictSemiring1) {
          return new Data_Semiring.Semiring(function (v) {
              return function (v1) {
                  return new Tuple(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0), Data_Semiring.add(dictSemiring1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0), Data_Semiring.mul(dictSemiring1)(v.value1)(v1.value1));
              };
          }, new Tuple(Data_Semiring.one(dictSemiring), Data_Semiring.one(dictSemiring1)), new Tuple(Data_Semiring.zero(dictSemiring), Data_Semiring.zero(dictSemiring1)));
      };
  };
  var semigroupoidTuple = new Control_Semigroupoid.Semigroupoid(function (v) {
      return function (v1) {
          return new Tuple(v1.value0, v.value1);
      };
  });
  var semigroupTuple = function (dictSemigroup) {
      return function (dictSemigroup1) {
          return new Data_Semigroup.Semigroup(function (v) {
              return function (v1) {
                  return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var ringTuple = function (dictRing) {
      return function (dictRing1) {
          return new Data_Ring.Ring(function () {
              return semiringTuple(dictRing.Semiring0())(dictRing1.Semiring0());
          }, function (v) {
              return function (v1) {
                  return new Tuple(Data_Ring.sub(dictRing)(v.value0)(v1.value0), Data_Ring.sub(dictRing1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var monoidTuple = function (dictMonoid) {
      return function (dictMonoid1) {
          return new Data_Monoid.Monoid(function () {
              return semigroupTuple(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
          }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
      };
  };
  var lookup = function (dictFoldable) {
      return function (dictEq) {
          return function (a) {
              return function ($312) {
                  return Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst)(Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                      var $163 = Data_Eq.eq(dictEq)(a)(v.value0);
                      if ($163) {
                          return new Data_Maybe.Just(v.value1);
                      };
                      return Data_Maybe.Nothing.value;
                  })($312));
              };
          };
      };
  };
  var heytingAlgebraTuple = function (dictHeytingAlgebra) {
      return function (dictHeytingAlgebra1) {
          return new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
              return function (v1) {
                  return new Tuple(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.conj(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.disj(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, new Tuple(Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra1)), function (v) {
              return function (v1) {
                  return new Tuple(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.implies(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return new Tuple(Data_HeytingAlgebra.not(dictHeytingAlgebra)(v.value0), Data_HeytingAlgebra.not(dictHeytingAlgebra1)(v.value1));
          }, new Tuple(Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra1)));
      };
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Tuple(m.value0, f(m.value1));
      };
  });
  var functorWithIndexTuple = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorTuple;
  }, function (f) {
      return Data_Functor.map(functorTuple)(f(Data_Unit.unit));
  });
  var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));
  var fst = function (v) {
      return v.value0;
  };
  var lazyTuple = function (dictLazy) {
      return function (dictLazy1) {
          return new Control_Lazy.Lazy(function (f) {
              return new Tuple(Control_Lazy.defer(dictLazy)(function (v) {
                  return fst(f(Data_Unit.unit));
              }), Control_Lazy.defer(dictLazy1)(function (v) {
                  return snd(f(Data_Unit.unit));
              }));
          });
      };
  };
  var foldableTuple = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v.value1)(z);
          };
      };
  });
  var foldableWithIndexTuple = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableTuple;
  }, function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(Data_Unit.unit)(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(Data_Unit.unit)(z)(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(Data_Unit.unit)(v.value1)(z);
          };
      };
  });
  var traversableTuple = new Data_Traversable.Traversable(function () {
      return foldableTuple;
  }, function () {
      return functorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(f(v.value1));
          };
      };
  });
  var traversableWithIndexTuple = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexTuple;
  }, function () {
      return functorWithIndexTuple;
  }, function () {
      return traversableTuple;
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(f(Data_Unit.unit)(v.value1));
          };
      };
  });
  var foldable1Tuple = new Data_Semigroup_Foldable.Foldable1(function () {
      return foldableTuple;
  }, function (dictSemigroup) {
      return function (v) {
          return v.value1;
      };
  }, function (dictSemigroup) {
      return function (f) {
          return function (v) {
              return f(v.value1);
          };
      };
  });
  var traversable1Tuple = new Data_Semigroup_Traversable.Traversable1(function () {
      return foldable1Tuple;
  }, function () {
      return traversableTuple;
  }, function (dictApply) {
      return function (v) {
          return Data_Functor.map(dictApply.Functor0())(Tuple.create(v.value0))(v.value1);
      };
  }, function (dictApply) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictApply.Functor0())(Tuple.create(v.value0))(f(v.value1));
          };
      };
  });
  var extendTuple = new Control_Extend.Extend(function () {
      return functorTuple;
  }, function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v));
      };
  });
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
              };
          });
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
              };
          });
      };
  };
  var eq1Tuple = function (dictEq) {
      return new Data_Eq.Eq1(function (dictEq1) {
          return Data_Eq.eq(eqTuple(dictEq)(dictEq1));
      });
  };
  var ord1Tuple = function (dictOrd) {
      return new Data_Ord.Ord1(function () {
          return eq1Tuple(dictOrd.Eq0());
      }, function (dictOrd1) {
          return Data_Ord.compare(ordTuple(dictOrd)(dictOrd1));
      });
  };
  var distributiveTuple = function (dictTypeEquals) {
      return new Data_Distributive.Distributive(function () {
          return functorTuple;
      }, function (dictFunctor) {
          return Data_Distributive.collectDefault(distributiveTuple(dictTypeEquals))(dictFunctor);
      }, function (dictFunctor) {
          return function ($313) {
              return Tuple.create(Type_Equality.from(dictTypeEquals)(Data_Unit.unit))(Data_Functor.map(dictFunctor)(snd)($313));
          };
      });
  };
  var curry = function (f) {
      return function (a) {
          return function (b) {
              return f(new Tuple(a, b));
          };
      };
  };
  var comonadTuple = new Control_Comonad.Comonad(function () {
      return extendTuple;
  }, snd);
  var commutativeRingTuple = function (dictCommutativeRing) {
      return function (dictCommutativeRing1) {
          return new Data_CommutativeRing.CommutativeRing(function () {
              return ringTuple(dictCommutativeRing.Ring0())(dictCommutativeRing1.Ring0());
          });
      };
  };
  var boundedTuple = function (dictBounded) {
      return function (dictBounded1) {
          return new Data_Bounded.Bounded(function () {
              return ordTuple(dictBounded.Ord0())(dictBounded1.Ord0());
          }, new Tuple(Data_Bounded.bottom(dictBounded), Data_Bounded.bottom(dictBounded1)), new Tuple(Data_Bounded.top(dictBounded), Data_Bounded.top(dictBounded1)));
      };
  };
  var booleanAlgebraTuple = function (dictBooleanAlgebra) {
      return function (dictBooleanAlgebra1) {
          return new Data_BooleanAlgebra.BooleanAlgebra(function () {
              return heytingAlgebraTuple(dictBooleanAlgebra.HeytingAlgebra0())(dictBooleanAlgebra1.HeytingAlgebra0());
          });
      };
  };
  var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Tuple(f(v.value0), g(v.value1));
          };
      };
  });
  var bifoldableTuple = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(g(v.value1));
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return g(f(z)(v.value0))(v.value1);
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return f(v.value0)(g(v.value1)(z));
              };
          };
      };
  });
  var bitraversableTuple = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableTuple;
  }, function () {
      return bifunctorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create)(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create)(f(v.value0)))(g(v.value1));
              };
          };
      };
  });
  var biapplyTuple = new Control_Biapply.Biapply(function () {
      return bifunctorTuple;
  }, function (v) {
      return function (v1) {
          return new Tuple(v.value0(v1.value0), v.value1(v1.value1));
      };
  });
  var biapplicativeTuple = new Control_Biapplicative.Biapplicative(function () {
      return biapplyTuple;
  }, Tuple.create);
  var applyTuple = function (dictSemigroup) {
      return new Control_Apply.Apply(function () {
          return functorTuple;
      }, function (v) {
          return function (v1) {
              return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
          };
      });
  };
  var bindTuple = function (dictSemigroup) {
      return new Control_Bind.Bind(function () {
          return applyTuple(dictSemigroup);
      }, function (v) {
          return function (f) {
              var v1 = f(v.value1);
              return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v1.value1);
          };
      });
  };
  var applicativeTuple = function (dictMonoid) {
      return new Control_Applicative.Applicative(function () {
          return applyTuple(dictMonoid.Semigroup0());
      }, Tuple.create(Data_Monoid.mempty(dictMonoid)));
  };
  var monadTuple = function (dictMonoid) {
      return new Control_Monad.Monad(function () {
          return applicativeTuple(dictMonoid);
      }, function () {
          return bindTuple(dictMonoid.Semigroup0());
      });
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["curry"] = curry;
  exports["uncurry"] = uncurry;
  exports["swap"] = swap;
  exports["lookup"] = lookup;
  exports["showTuple"] = showTuple;
  exports["eqTuple"] = eqTuple;
  exports["eq1Tuple"] = eq1Tuple;
  exports["ordTuple"] = ordTuple;
  exports["ord1Tuple"] = ord1Tuple;
  exports["boundedTuple"] = boundedTuple;
  exports["semigroupoidTuple"] = semigroupoidTuple;
  exports["semigroupTuple"] = semigroupTuple;
  exports["monoidTuple"] = monoidTuple;
  exports["semiringTuple"] = semiringTuple;
  exports["ringTuple"] = ringTuple;
  exports["commutativeRingTuple"] = commutativeRingTuple;
  exports["heytingAlgebraTuple"] = heytingAlgebraTuple;
  exports["booleanAlgebraTuple"] = booleanAlgebraTuple;
  exports["functorTuple"] = functorTuple;
  exports["functorWithIndexTuple"] = functorWithIndexTuple;
  exports["invariantTuple"] = invariantTuple;
  exports["bifunctorTuple"] = bifunctorTuple;
  exports["applyTuple"] = applyTuple;
  exports["biapplyTuple"] = biapplyTuple;
  exports["applicativeTuple"] = applicativeTuple;
  exports["biapplicativeTuple"] = biapplicativeTuple;
  exports["bindTuple"] = bindTuple;
  exports["monadTuple"] = monadTuple;
  exports["extendTuple"] = extendTuple;
  exports["comonadTuple"] = comonadTuple;
  exports["lazyTuple"] = lazyTuple;
  exports["foldableTuple"] = foldableTuple;
  exports["foldable1Tuple"] = foldable1Tuple;
  exports["foldableWithIndexTuple"] = foldableWithIndexTuple;
  exports["bifoldableTuple"] = bifoldableTuple;
  exports["traversableTuple"] = traversableTuple;
  exports["traversable1Tuple"] = traversable1Tuple;
  exports["traversableWithIndexTuple"] = traversableWithIndexTuple;
  exports["bitraversableTuple"] = bitraversableTuple;
  exports["distributiveTuple"] = distributiveTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable1"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldr1 = function (dict) {
      return dict.unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  var replicate1 = function (dictUnfoldable1) {
      return function (n) {
          return function (v) {
              var step = function (i) {
                  if (i <= 0) {
                      return new Data_Tuple.Tuple(v, Data_Maybe.Nothing.value);
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_Tuple.Tuple(v, new Data_Maybe.Just(i - 1 | 0));
                  };
                  throw new Error("Failed pattern match at Data.Unfoldable1 line 47, column 5 - line 47, column 39: " + [ i.constructor.name ]);
              };
              return unfoldr1(dictUnfoldable1)(step)(n - 1 | 0);
          };
      };
  };
  var replicate1A = function (dictApply) {
      return function (dictUnfoldable1) {
          return function (dictTraversable1) {
              return function (n) {
                  return function (m) {
                      return Data_Semigroup_Traversable.sequence1(dictTraversable1)(dictApply)(replicate1(dictUnfoldable1)(n)(m));
                  };
              };
          };
      };
  };
  var singleton = function (dictUnfoldable1) {
      return replicate1(dictUnfoldable1)(1);
  };
  var range = function (dictUnfoldable1) {
      return function (start) {
          return function (end) {
              var go = function (delta) {
                  return function (i) {
                      var i$prime = i + delta | 0;
                      return new Data_Tuple.Tuple(i, (function () {
                          var $8 = i === end;
                          if ($8) {
                              return Data_Maybe.Nothing.value;
                          };
                          return new Data_Maybe.Just(i$prime);
                      })());
                  };
              };
              var delta = (function () {
                  var $9 = end >= start;
                  if ($9) {
                      return 1;
                  };
                  return -1 | 0;
              })();
              return unfoldr1(dictUnfoldable1)(go(delta))(start);
          };
      };
  };
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldr1"] = unfoldr1;
  exports["replicate1"] = replicate1;
  exports["replicate1A"] = replicate1A;
  exports["singleton"] = singleton;
  exports["range"] = range;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Array.NonEmpty.Internal"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var NonEmptyArray = function (x) {
      return x;
  };
  var unfoldable1NonEmptyArray = Data_Unfoldable1.unfoldable1Array;
  var traversableWithIndexNonEmptyArray = Data_TraversableWithIndex.traversableWithIndexArray;
  var traversableNonEmptyArray = Data_Traversable.traversableArray;
  var showNonEmptyArray = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyArray " + (Data_Show.show(Data_Show.showArray(dictShow))(v) + ")");
      });
  };
  var semigroupNonEmptyArray = Data_Semigroup.semigroupArray;
  var ordNonEmptyArray = function (dictOrd) {
      return Data_Ord.ordArray(dictOrd);
  };
  var ord1NonEmptyArray = Data_Ord.ord1Array;
  var monadNonEmptyArray = Control_Monad.monadArray;
  var functorWithIndexNonEmptyArray = Data_FunctorWithIndex.functorWithIndexArray;
  var functorNonEmptyArray = Data_Functor.functorArray;
  var foldableWithIndexNonEmptyArray = Data_FoldableWithIndex.foldableWithIndexArray;
  var foldableNonEmptyArray = Data_Foldable.foldableArray;
  var foldable1NonEmptyArray = new Data_Semigroup_Foldable.Foldable1(function () {
      return foldableNonEmptyArray;
  }, function (dictSemigroup) {
      return $foreign.fold1Impl(Data_Semigroup.append(dictSemigroup));
  }, function (dictSemigroup) {
      return Data_Semigroup_Foldable.foldMap1Default(foldable1NonEmptyArray)(functorNonEmptyArray)(dictSemigroup);
  });
  var traversable1NonEmptyArray = new Data_Semigroup_Traversable.Traversable1(function () {
      return foldable1NonEmptyArray;
  }, function () {
      return traversableNonEmptyArray;
  }, function (dictApply) {
      return Data_Semigroup_Traversable.sequence1Default(traversable1NonEmptyArray)(dictApply);
  }, function (dictApply) {
      return $foreign.traverse1Impl(Control_Apply.apply(dictApply))(Data_Functor.map(dictApply.Functor0()));
  });
  var eqNonEmptyArray = function (dictEq) {
      return Data_Eq.eqArray(dictEq);
  };
  var eq1NonEmptyArray = Data_Eq.eq1Array;
  var bindNonEmptyArray = Control_Bind.bindArray;
  var applyNonEmptyArray = Control_Apply.applyArray;
  var applicativeNonEmptyArray = Control_Applicative.applicativeArray;
  var altNonEmptyArray = Control_Alt.altArray;
  exports["showNonEmptyArray"] = showNonEmptyArray;
  exports["eqNonEmptyArray"] = eqNonEmptyArray;
  exports["eq1NonEmptyArray"] = eq1NonEmptyArray;
  exports["ordNonEmptyArray"] = ordNonEmptyArray;
  exports["ord1NonEmptyArray"] = ord1NonEmptyArray;
  exports["semigroupNonEmptyArray"] = semigroupNonEmptyArray;
  exports["functorNonEmptyArray"] = functorNonEmptyArray;
  exports["functorWithIndexNonEmptyArray"] = functorWithIndexNonEmptyArray;
  exports["foldableNonEmptyArray"] = foldableNonEmptyArray;
  exports["foldableWithIndexNonEmptyArray"] = foldableWithIndexNonEmptyArray;
  exports["foldable1NonEmptyArray"] = foldable1NonEmptyArray;
  exports["unfoldable1NonEmptyArray"] = unfoldable1NonEmptyArray;
  exports["traversableNonEmptyArray"] = traversableNonEmptyArray;
  exports["traversableWithIndexNonEmptyArray"] = traversableWithIndexNonEmptyArray;
  exports["traversable1NonEmptyArray"] = traversable1NonEmptyArray;
  exports["applyNonEmptyArray"] = applyNonEmptyArray;
  exports["applicativeNonEmptyArray"] = applicativeNonEmptyArray;
  exports["bindNonEmptyArray"] = bindNonEmptyArray;
  exports["monadNonEmptyArray"] = monadNonEmptyArray;
  exports["altNonEmptyArray"] = altNonEmptyArray;
})(PS["Data.Array.NonEmpty.Internal"] = PS["Data.Array.NonEmpty.Internal"] || {});
(function(exports) {
    "use strict";

  exports.empty = function () {
    return [];
  };

  exports.peekImpl = function (just) {
    return function (nothing) {
      return function (i) {
        return function (xs) {
          return function () {
            return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
          };
        };
      };
    };
  };

  exports.poke = function (i) {
    return function (a) {
      return function (xs) {
        return function () {
          var ret = i >= 0 && i < xs.length;
          if (ret) xs[i] = a;
          return ret;
        };
      };
    };
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.splice = function (i) {
    return function (howMany) {
      return function (bs) {
        return function (xs) {
          return function () {
            return xs.splice.apply(xs, [i, howMany].concat(bs));
          };
        };
      };
    };
  };

  exports.copyImpl = function (xs) {
    return function () {
      return xs.slice();
    };
  };

  exports.sortByImpl = function (comp) {
    return function (xs) {
      return function () {
        return xs.sort(function (x, y) {
          return comp(x)(y);
        });
      };
    };
  };

  exports.toAssocArray = function (xs) {
    return function () {
      var n = xs.length;
      var as = new Array(n);
      for (var i = 0; i < n; i++) as[i] = { value: xs[i], index: i };
      return as;
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Array.ST"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var unsafeThaw = function ($11) {
      return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)($11);
  };
  var unsafeFreeze = function ($12) {
      return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)($12);
  };
  var thaw = $foreign.copyImpl;
  var withArray = function (f) {
      return function (xs) {
          return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(thaw(xs))(function (v) {
              return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(f(v))(function (v1) {
                  return unsafeFreeze(v);
              });
          });
      };
  };
  var sortBy = function (comp) {
      var comp$prime = function (x) {
          return function (y) {
              var v = comp(x)(y);
              if (v instanceof Data_Ordering.GT) {
                  return 1;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return 0;
              };
              if (v instanceof Data_Ordering.LT) {
                  return -1 | 0;
              };
              throw new Error("Failed pattern match at Data.Array.ST line 85, column 15 - line 90, column 1: " + [ v.constructor.name ]);
          };
      };
      return $foreign.sortByImpl(comp$prime);
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var sort = function (dictOrd) {
      return sortBy(Data_Ord.compare(dictOrd));
  };
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var modify = function (i) {
      return function (f) {
          return function (xs) {
              return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(peek(i)(xs))(function (v) {
                  if (v instanceof Data_Maybe.Just) {
                      return $foreign.poke(i)(f(v.value0))(xs);
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(false);
                  };
                  throw new Error("Failed pattern match at Data.Array.ST line 147, column 3 - line 149, column 26: " + [ v.constructor.name ]);
              });
          };
      };
  };
  var freeze = $foreign.copyImpl;
  exports["withArray"] = withArray;
  exports["peek"] = peek;
  exports["push"] = push;
  exports["modify"] = modify;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["sortWith"] = sortWith;
  exports["freeze"] = freeze;
  exports["thaw"] = thaw;
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["unsafeThaw"] = unsafeThaw;
  exports["empty"] = $foreign.empty;
  exports["poke"] = $foreign.poke;
  exports["pushAll"] = $foreign.pushAll;
  exports["splice"] = $foreign.splice;
  exports["toAssocArray"] = $foreign.toAssocArray;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Monad_ST_Ref = PS["Control.Monad.ST.Ref"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];                 
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var peek = function (v) {
      return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Monad_ST_Internal.read(v.value1))(function (v1) {
          return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(v.value0(v1));
      });
  };
  var next = function (v) {
      return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Monad_ST_Internal.read(v.value1))(function (v1) {
          return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Monad_ST_Internal.modify(function (v2) {
              return v2 + 1 | 0;
          })(v.value1))(function (v2) {
              return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(v.value0(v1));
          });
      });
  };
  var pushWhile = function (p) {
      return function (iter) {
          return function (array) {
              return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Monad_ST_Internal["new"](false))(function (v) {
                  return Control_Monad_ST_Internal["while"](Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read(v)))(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(peek(iter))(function (v1) {
                      if (v1 instanceof Data_Maybe.Just && p(v1.value0)) {
                          return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.push(v1.value0)(array))(function (v2) {
                              return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter));
                          });
                      };
                      return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)(v));
                  }));
              });
          };
      };
  };
  var pushAll = pushWhile(Data_Function["const"](true));
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
  };
  var iterate = function (iter) {
      return function (f) {
          return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Monad_ST_Internal["new"](false))(function (v) {
              return Control_Monad_ST_Internal["while"](Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read(v)))(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(next(iter))(function (v1) {
                  if (v1 instanceof Data_Maybe.Just) {
                      return f(v1.value0);
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)(v));
                  };
                  throw new Error("Failed pattern match at Data.Array.ST.Iterator line 42, column 5 - line 44, column 47: " + [ v1.constructor.name ]);
              }));
          });
      };
  };
  var exhausted = function ($27) {
      return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_Maybe.isNothing)(peek($27));
  };
  exports["iterator"] = iterator;
  exports["iterate"] = iterate;
  exports["next"] = next;
  exports["peek"] = peek;
  exports["exhausted"] = exhausted;
  exports["pushWhile"] = pushWhile;
  exports["pushAll"] = pushAll;
})(PS["Data.Array.ST.Iterator"] = PS["Data.Array.ST.Iterator"] || {});
(function(exports) {
    "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  var replicate = function (dictUnfoldable) {
      return function (n) {
          return function (v) {
              var step = function (i) {
                  var $7 = i <= 0;
                  if ($7) {
                      return Data_Maybe.Nothing.value;
                  };
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
              };
              return unfoldr(dictUnfoldable)(step)(n);
          };
      };
  };
  var replicateA = function (dictApplicative) {
      return function (dictUnfoldable) {
          return function (dictTraversable) {
              return function (n) {
                  return function (m) {
                      return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                  };
              };
          };
      };
  };
  var none = function (dictUnfoldable) {
      return unfoldr(dictUnfoldable)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Unit.unit);
  };
  var fromMaybe = function (dictUnfoldable) {
      return unfoldr(dictUnfoldable)(function (b) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Maybe.Nothing.value))(b);
      });
  };
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["replicate"] = replicate;
  exports["replicateA"] = replicateA;
  exports["none"] = none;
  exports["fromMaybe"] = fromMaybe;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty_Internal = PS["Data.Array.NonEmpty.Internal"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAtIndices = function (dictFoldable) {
      return function (us) {
          return function (xs) {
              return Control_Monad_ST_Internal.run(Data_Array_ST.withArray(function (res) {
                  return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (v) {
                      return Data_Array_ST.poke(v.value0)(v.value1)(res);
                  })(us);
              })(xs));
          };
      };
  };
  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  };
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var toUnfoldable = function (dictUnfoldable) {
      return function (xs) {
          var len = $foreign.length(xs);
          var f = function (i) {
              if (i < len) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Array line 143, column 3 - line 145, column 26: " + [ i.constructor.name ]);
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
      };
  };
  var takeEnd = function (n) {
      return function (xs) {
          return $foreign.drop($foreign.length(xs) - n | 0)(xs);
      };
  };
  var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array line 702, column 15 - line 707, column 1: " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var nubByEq = function (eq) {
      return function (xs) {
          var v = uncons(xs);
          if (v instanceof Data_Maybe.Just) {
              return $foreign.cons(v.value0.head)(nubByEq(eq)($foreign.filter(function (y) {
                  return !eq(v.value0.head)(y);
              })(v.value0.tail)));
          };
          if (v instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          throw new Error("Failed pattern match at Data.Array line 929, column 3 - line 931, column 18: " + [ v.constructor.name ]);
      };
  };
  var nubEq = function (dictEq) {
      return nubByEq(Data_Eq.eq(dictEq));
  };
  var modifyAtIndices = function (dictFoldable) {
      return function (is) {
          return function (f) {
              return function (xs) {
                  return Control_Monad_ST_Internal.run(Data_Array_ST.withArray(function (res) {
                      return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (i) {
                          return Data_Array_ST.modify(i)(f)(res);
                      })(is);
                  })(xs));
              };
          };
      };
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([  ]));
          };
      };
  };
  var insertAt = $foreign._insertAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array line 323, column 1 - line 323, column 45: " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var unsnoc = function (xs) {
      return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return function (v1) {
              return {
                  init: v,
                  last: v1
              };
          };
      })(init(xs)))(last(xs));
  };
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  var span = function (p) {
      return function (arr) {
          var go = function ($copy_i) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(i) {
                  var v = index(arr)(i);
                  if (v instanceof Data_Maybe.Just) {
                      var $75 = p(v.value0);
                      if ($75) {
                          $copy_i = i + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return new Data_Maybe.Just(i);
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.Array line 834, column 5 - line 836, column 25: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_i);
              };
              return $tco_result;
          };
          var breakIndex = go(0);
          if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
              return {
                  init: [  ],
                  rest: arr
              };
          };
          if (breakIndex instanceof Data_Maybe.Just) {
              return {
                  init: $foreign.slice(0)(breakIndex.value0)(arr),
                  rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
              };
          };
          if (breakIndex instanceof Data_Maybe.Nothing) {
              return {
                  init: arr,
                  rest: [  ]
              };
          };
          throw new Error("Failed pattern match at Data.Array line 821, column 3 - line 827, column 30: " + [ breakIndex.constructor.name ]);
      };
  };
  var takeWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).init;
      };
  };
  var unzip = function (xs) {
      return Control_Monad_ST_Internal.run(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.empty)(function (v) {
          return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.empty)(function (v1) {
              return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST_Iterator.iterator(function (v2) {
                  return index(xs)(v2);
              }))(function (v2) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_ST_Internal.bindST)(Data_Array_ST_Iterator.iterate(v2)(function (v3) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_ST_Internal.bindST)(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v3.value0)(v)))(function () {
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v3.value1)(v1));
                      });
                  }))(function () {
                      return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.unsafeFreeze(v))(function (v3) {
                          return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.unsafeFreeze(v1))(function (v4) {
                              return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Data_Tuple.Tuple(v3, v4));
                          });
                      });
                  });
              });
          });
      }));
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var nubBy = function (comp) {
      return function (xs) {
          var indexedAndSorted = sortBy(function (x) {
              return function (y) {
                  return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));
              };
          })(mapWithIndex(Data_Tuple.Tuple.create)(xs));
          var v = head(indexedAndSorted);
          if (v instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(sortWith(Data_Ord.ordInt)(Data_Tuple.fst)(Control_Monad_ST_Internal.run(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.unsafeThaw(singleton(v.value0)))(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_ST_Internal.bindST)(Control_Monad_ST_Internal.foreach(indexedAndSorted)(function (v2) {
                      return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Functor.map(Control_Monad_ST_Internal.functorST)(function ($111) {
                          return Data_Tuple.snd((function ($112) {
                              return Data_Maybe.fromJust()(last($112));
                          })($111));
                      })(Data_Array_ST.unsafeFreeze(v1)))(function (v3) {
                          return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(Data_Eq.notEq(Data_Ordering.eqOrdering)(comp(v3)(v2.value1))(Data_Ordering.EQ.value))(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v2)(v1)));
                      });
                  }))(function () {
                      return Data_Array_ST.unsafeFreeze(v1);
                  });
              }))));
          };
          throw new Error("Failed pattern match at Data.Array line 903, column 17 - line 911, column 29: " + [ v.constructor.name ]);
      };
  };
  var nub = function (dictOrd) {
      return nubBy(Data_Ord.compare(dictOrd));
  };
  var groupBy = function (op) {
      return function (xs) {
          return Control_Monad_ST_Internal.run(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.empty)(function (v) {
              return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST_Iterator.iterator(function (v1) {
                  return index(xs)(v1);
              }))(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_ST_Internal.bindST)(Data_Array_ST_Iterator.iterate(v1)(function (x) {
                      return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.empty)(function (v2) {
                          return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.push(x)(v2))(function (v3) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_ST_Internal.bindST)(Data_Array_ST_Iterator.pushWhile(op(x))(v1)(v2))(function () {
                                  return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.unsafeFreeze(v2))(function (v4) {
                                      return Data_Array_ST.push(v4)(v);
                                  });
                              });
                          });
                      }));
                  }))(function () {
                      return Data_Array_ST.unsafeFreeze(v);
                  });
              });
          }));
      };
  };
  var group = function (dictEq) {
      return function (xs) {
          return groupBy(Data_Eq.eq(dictEq))(xs);
      };
  };
  var group$prime = function (dictOrd) {
      return function ($113) {
          return group(dictOrd.Eq0())(sort(dictOrd)($113));
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldRecM = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (array) {
                  var go = function (res) {
                      return function (i) {
                          if (i >= $foreign.length(array)) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(res));
                          };
                          if (Data_Boolean.otherwise) {
                              return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(res)(unsafeIndex()(array)(i)))(function (v) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                                      a: v,
                                      b: i + 1 | 0
                                  }));
                              });
                          };
                          throw new Error("Failed pattern match at Data.Array line 1098, column 3 - line 1102, column 42: " + [ res.constructor.name, i.constructor.name ]);
                      };
                  };
                  return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(go)(a)(0);
              };
          };
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return $foreign["uncons'"](function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(a);
              })(function (b) {
                  return function (bs) {
                      return Control_Bind.bind(dictMonad.Bind1())(f(a)(b))(function (a$prime) {
                          return foldM(dictMonad)(f)(a$prime)(bs);
                      });
                  };
              });
          };
      };
  };
  var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var insertBy = function (cmp) {
      return function (x) {
          return function (ys) {
              var i = Data_Maybe.maybe(0)(function (v) {
                  return v + 1 | 0;
              })(findLastIndex(function (y) {
                  return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
              })(ys));
              return Data_Maybe.fromJust()(insertAt(i)(x)(ys));
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var intersectBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return $foreign.filter(function (x) {
                  return Data_Maybe.isJust(findIndex(eq(x))(ys));
              })(xs);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).rest;
      };
  };
  var dropEnd = function (n) {
      return function (xs) {
          return $foreign.take($foreign.length(xs) - n | 0)(xs);
      };
  };
  var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return Data_Foldable.foldr(Data_Foldable.foldableArray)($$delete(dictEq));
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($114) {
          return Data_Maybe.maybe([  ])(singleton)(f($114));
      });
  };
  var filterA = function (dictApplicative) {
      return function (p) {
          return function ($115) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(mapMaybe(function (v) {
                  if (v.value1) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  return Data_Maybe.Nothing.value;
              }))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(function (x) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(x))(p(x));
              })($115));
          };
      };
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  var alterAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  var v = f(x);
                  if (v instanceof Data_Maybe.Nothing) {
                      return deleteAt(i)(xs);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return updateAt(i)(v.value0)(xs);
                  };
                  throw new Error("Failed pattern match at Data.Array line 544, column 10 - line 546, column 32: " + [ v.constructor.name ]);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["singleton"] = singleton;
  exports["some"] = some;
  exports["many"] = many;
  exports["null"] = $$null;
  exports["insert"] = insert;
  exports["insertBy"] = insertBy;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
  exports["uncons"] = uncons;
  exports["unsnoc"] = unsnoc;
  exports["index"] = index;
  exports["elemIndex"] = elemIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["insertAt"] = insertAt;
  exports["deleteAt"] = deleteAt;
  exports["updateAt"] = updateAt;
  exports["updateAtIndices"] = updateAtIndices;
  exports["modifyAt"] = modifyAt;
  exports["modifyAtIndices"] = modifyAtIndices;
  exports["alterAt"] = alterAt;
  exports["concatMap"] = concatMap;
  exports["filterA"] = filterA;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["sortWith"] = sortWith;
  exports["takeEnd"] = takeEnd;
  exports["takeWhile"] = takeWhile;
  exports["dropEnd"] = dropEnd;
  exports["dropWhile"] = dropWhile;
  exports["span"] = span;
  exports["group"] = group;
  exports["group'"] = group$prime;
  exports["groupBy"] = groupBy;
  exports["nub"] = nub;
  exports["nubEq"] = nubEq;
  exports["nubBy"] = nubBy;
  exports["nubByEq"] = nubByEq;
  exports["union"] = union;
  exports["unionBy"] = unionBy;
  exports["delete"] = $$delete;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["intersect"] = intersect;
  exports["intersectBy"] = intersectBy;
  exports["zipWithA"] = zipWithA;
  exports["zip"] = zip;
  exports["unzip"] = unzip;
  exports["foldM"] = foldM;
  exports["foldRecM"] = foldRecM;
  exports["unsafeIndex"] = unsafeIndex;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["snoc"] = $foreign.snoc;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["partition"] = $foreign.partition;
  exports["slice"] = $foreign.slice;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
  exports["zipWith"] = $foreign.zipWith;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Prelude = PS["Prelude"];                 
  var renderRouter = function (application) {
      return function (pages) {
          return "\x0a--------------------------\x0a-- Auto-generated codes --\x0a-- Do not edit this     --\x0a--------------------------\x0a\x0amodule " + (application + (".Alchelmy exposing (Model, Msg, program)\x0a\x0aimport Browser exposing (Document, UrlRequest(..), application)\x0aimport Browser.Navigation exposing (Key, load, pushUrl)\x0aimport Html as Html exposing (Html, text)\x0aimport Maybe as Maybe exposing (Maybe(..))\x0aimport Url exposing (Url)\x0aimport Url.Parser as UrlParser exposing (s, oneOf, Parser, parse, (</>))\x0aimport " + (application + (".Root as Root\x0a" + (Data_String_Common.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "import " + (application + (".Page." + (page + (" as " + page))));
          })(pages)) + ("\x0a\x0atype Model = Model\x0a  { route : RouteState\x0a  , session : Root.Session\x0a  , key : Key\x0a  , flags : Root.Flags\x0a  }\x0a\x0atype Route\x0a  = " + (Data_String_Common.joinWith("\x0a  | ")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "Route__" + (page + (" " + (page + ".Route")));
          })(pages)) + ("\x0a\x0atype RouteState\x0a  = " + (Data_String_Common.joinWith("\x0a  | ")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "State__" + (page + (" " + (page + ".Model")));
          })(pages)) + ("\x0a\x0atype Msg\x0a  = UrlRequest UrlRequest\x0a  | Navigate Url\x0a" + (Data_String_Common.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "  | Msg__" + (page + (" " + (page + ".Msg")));
          })(pages)) + ("\x0a\x0a\x0aupdate : Msg -> Model -> ( Model, Cmd Msg )\x0aupdate msg (Model model) =\x0a  case msg of\x0a    UrlRequest urlRequest ->\x0a      case urlRequest of\x0a        Internal url ->\x0a          ( Model model\x0a          , pushUrl model.key (Url.toString url)\x0a          )\x0a\x0a        External url ->\x0a          ( Model model\x0a          , load url\x0a          )\x0a\x0a    Navigate location ->\x0a      let\x0a          route =\x0a            parseLocation location\x0a      in\x0a      case route of\x0a\x0a" + (Data_String_Common.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "        Route__" + (page + (" routeValue ->\x0a          case " + (page + (".page.init model.flags location model.key routeValue (Just model.session) of\x0a            (initialModel, initialCmd) ->\x0a              ( Model { model | route = State__" + (page + (" initialModel }\x0a              , Cmd.map Msg__" + (page + " initialCmd\x0a              )\x0a        ")))))));
          })(pages)) + ("\x0a\x0a\x0a" + (Data_String_Common.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "\x0a    Msg__" + (page + (" pageMsg ->\x0a      case model.route of\x0a        State__" + (page + (" pageModel ->\x0a          case " + (page + (".page.update pageMsg { pageModel | session = model.session } of\x0a            (pageModel_, pageCmd ) ->\x0a              (Model { model | session = pageModel_.session, route = State__" + (page + (" pageModel_ }, Cmd.map Msg__" + (page + (" pageCmd)\x0a        " + (function () {
                  var $0 = 1 < Data_Array.length(pages);
                  if ($0) {
                      return "_ -> (Model model, Cmd.none)";
                  };
                  return "";
              })()))))))))));
          })(pages)) + ("\x0a\x0adocumentMap : (msg -> Msg) -> Document msg -> Document Msg\x0adocumentMap f { title, body } = { title = title, body = List.map (Html.map f) body }\x0a\x0aview : Model -> Document Msg\x0aview (Model model) = case model.route of\x0a\x0a" + (Data_String_Common.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "  State__" + (page + (" m -> documentMap Msg__" + (page + (" (" + (page + ".page.view { m | session = model.session })")))));
          })(pages)) + ("\x0a\x0amatchers : Parser (Route -> a) a\x0amatchers =\x0a    oneOf\x0a        [ " + (Data_String_Common.joinWith("\x0a        , ")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "UrlParser.map Route__" + (page + (" " + (page + ".page.route")));
          })(pages)) + ("\x0a        ]\x0a\x0aparseLocation : Url -> Route\x0aparseLocation location =\x0a    case parse matchers location of\x0a        Just route ->\x0a            route\x0a\x0a        Nothing ->\x0a            Route__NotFound ()\x0a\x0anavigate : Url -> Msg\x0anavigate = Navigate\x0a\x0ainit : Root.Flags -> Url -> Key -> ( Model, Cmd Msg )\x0ainit flags location key =\x0a\x0a        case parseLocation location of\x0a\x0a" + (Data_String_Common.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "          Route__" + (page + (" routeValue -> case " + (page + (".page.init flags location key routeValue Nothing of\x0a                (initialModel, initialCmd) ->\x0a                    ( Model\x0a                        { route = State__" + (page + (" initialModel\x0a                        , session = initialModel.session\x0a                        , key = key\x0a                        , flags = flags\x0a                        }\x0a                    , Cmd.map Msg__" + (page + " initialCmd\x0a                    )\x0a                ")))))));
          })(pages)) + ("\x0a\x0asubscriptions : Model -> Sub Msg\x0asubscriptions (Model model) =\x0a    case model.route of\x0a" + (Data_String_Common.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "        State__" + (page + (" routeValue -> Sub.map Msg__" + (page + (" (" + (page + ".page.subscriptions routeValue)")))));
          })(pages)) + "\x0a\x0aprogram : Program Root.Flags Model Msg\x0aprogram =\x0a    application\x0a        { init = init\x0a        , view = view\x0a        , update = update\x0a        , subscriptions = subscriptions\x0a        , onUrlRequest = UrlRequest\x0a        , onUrlChange = Navigate\x0a        }\x0a\x0a\x0a")))))))))))))))))))))));
      };
  };
  exports["renderRouter"] = renderRouter;
})(PS["Alchelmy.Template.Router"] = PS["Alchelmy.Template.Router"] || {});
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          });
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            step   = bhead(step);
            if (btail === null) {
              bhead = null;
            } else {
              bhead = btail._1;
              btail = btail._2;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item.
                if (interrupt && interrupt !== tmp) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._fork = function (immediate) {
    return function (aff) {
      return Aff.Fork(immediate, aff);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports._parAffAlt = function (aff1) {
    return function (aff2) {
      return Aff.ParAlt(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports.generalBracket = function (acquire) {
    return function (options) {
      return function (k) {
        return Aff.Bracket(acquire, options, k);
      };
    };
  };

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };

  exports._makeSupervisedFiber = function (util, aff) {
    return function () {
      var supervisor = Aff.Supervisor(util);
      return {
        fiber: Aff.Fiber(util, supervisor, aff),
        supervisor: supervisor
      };
    };
  };

  exports._killAll = function (error, supervisor, cb) {
    return supervisor.killAll(error, cb);
  };

  exports._delay = function () {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }

    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }

    return function (right, ms) {
      return Aff.Async(function (cb) {
        return function () {
          var timer = setDelay(ms, cb(right()));
          return function () {
            return Aff.Sync(function () {
              return right(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  var monadThrowMaybe = new MonadThrow(function () {
      return Data_Maybe.monadMaybe;
  }, Data_Function["const"](Data_Maybe.Nothing.value));
  var monadThrowEither = new MonadThrow(function () {
      return Data_Either.monadEither;
  }, Data_Either.Left.create);
  var monadErrorMaybe = new MonadError(function () {
      return monadThrowMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Nothing) {
              return v1(Data_Unit.unit);
          };
          if (v instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(v.value0);
          };
          throw new Error("Failed pattern match at Control.Monad.Error.Class line 76, column 1 - line 76, column 50: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var monadErrorEither = new MonadError(function () {
      return monadThrowEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Data_Either.Left) {
              return v1(v.value0);
          };
          if (v instanceof Data_Either.Right) {
              return new Data_Either.Right(v.value0);
          };
          throw new Error("Failed pattern match at Control.Monad.Error.Class line 69, column 1 - line 69, column 53: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var catchError = function (dict) {
      return dict.catchError;
  };
  var catchJust = function (dictMonadError) {
      return function (p) {
          return function (act) {
              return function (handler) {
                  var handle = function (e) {
                      var v = p(e);
                      if (v instanceof Data_Maybe.Nothing) {
                          return throwError(dictMonadError.MonadThrow0())(e);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return handler(v.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Error.Class line 54, column 5 - line 56, column 26: " + [ v.constructor.name ]);
                  };
                  return catchError(dictMonadError)(act)(handle);
              };
          };
      };
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))(function ($21) {
              return Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Either.Left.create($21));
          });
      };
  };
  var withResource = function (dictMonadError) {
      return function (acquire) {
          return function (release) {
              return function (kleisli) {
                  return Control_Bind.bind(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(acquire)(function (v) {
                      return Control_Bind.bind(((dictMonadError.MonadThrow0()).Monad0()).Bind1())($$try(dictMonadError)(kleisli(v)))(function (v1) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(release(v))(function () {
                              return Data_Either.either(throwError(dictMonadError.MonadThrow0()))(Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0()))(v1);
                          });
                      });
                  });
              };
          };
      };
  };
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["catchJust"] = catchJust;
  exports["try"] = $$try;
  exports["withResource"] = withResource;
  exports["monadThrowEither"] = monadThrowEither;
  exports["monadErrorEither"] = monadErrorEither;
  exports["monadThrowMaybe"] = monadThrowMaybe;
  exports["monadErrorMaybe"] = monadErrorMaybe;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Prelude = PS["Prelude"];                 
  var MonadCont = function (Monad0, callCC) {
      this.Monad0 = Monad0;
      this.callCC = callCC;
  };
  var callCC = function (dict) {
      return dict.callCC;
  };
  exports["MonadCont"] = MonadCont;
  exports["callCC"] = callCC;
})(PS["Control.Monad.Cont.Class"] = PS["Control.Monad.Cont.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];                 
  var MonadAsk = function (Monad0, ask) {
      this.Monad0 = Monad0;
      this.ask = ask;
  };
  var MonadReader = function (MonadAsk0, local) {
      this.MonadAsk0 = MonadAsk0;
      this.local = local;
  };
  var monadAskFun = new MonadAsk(function () {
      return Control_Monad.monadFn;
  }, Control_Category.identity(Control_Category.categoryFn));
  var monadReaderFun = new MonadReader(function () {
      return monadAskFun;
  }, Control_Semigroupoid.composeFlipped(Control_Semigroupoid.semigroupoidFn));
  var local = function (dict) {
      return dict.local;
  };
  var ask = function (dict) {
      return dict.ask;
  };
  var asks = function (dictMonadAsk) {
      return function (f) {
          return Data_Functor.map((((dictMonadAsk.Monad0()).Bind1()).Apply0()).Functor0())(f)(ask(dictMonadAsk));
      };
  };
  exports["ask"] = ask;
  exports["local"] = local;
  exports["MonadAsk"] = MonadAsk;
  exports["asks"] = asks;
  exports["MonadReader"] = MonadReader;
  exports["monadAskFun"] = monadAskFun;
  exports["monadReaderFun"] = monadReaderFun;
})(PS["Control.Monad.Reader.Class"] = PS["Control.Monad.Reader.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              var s$prime = f(s);
              return new Data_Tuple.Tuple(s$prime, s$prime);
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["put"] = put;
  exports["modify"] = modify;
  exports["modify_"] = modify_;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Prelude = PS["Prelude"];                 
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Effect = PS["Effect"];                 
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS["Effect.Class"] = PS["Effect.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var ContT = function (x) {
      return x;
  };
  var withContT = function (f) {
      return function (v) {
          return function (k) {
              return v(f(k));
          };
      };
  };
  var runContT = function (v) {
      return function (k) {
          return v(k);
      };
  };
  var newtypeContT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ContT);
  var monadTransContT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(k);
          };
      };
  });
  var mapContT = function (f) {
      return function (v) {
          return function (k) {
              return f(v(k));
          };
      };
  };
  var functorContT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (k) {
                  return v(function (a) {
                      return k(f(a));
                  });
              };
          };
      });
  };
  var applyContT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorContT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (k) {
                  return v(function (g) {
                      return v1(function (a) {
                          return k(g(a));
                      });
                  });
              };
          };
      });
  };
  var bindContT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyContT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (k$prime) {
                  return v(function (a) {
                      var v1 = k(a);
                      return v1(k$prime);
                  });
              };
          };
      });
  };
  var applicativeContT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyContT(dictApplicative.Apply0());
      }, function (a) {
          return function (k) {
              return k(a);
          };
      });
  };
  var monadContT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeContT(dictMonad.Applicative0());
      }, function () {
          return bindContT(dictMonad.Bind1());
      });
  };
  var monadAskContT = function (dictMonadAsk) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadContT(dictMonadAsk.Monad0());
      }, Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
  };
  var monadReaderContT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadAskContT(dictMonadReader.MonadAsk0());
      }, function (f) {
          return function (v) {
              return function (k) {
                  return Control_Bind.bind(((dictMonadReader.MonadAsk0()).Monad0()).Bind1())(Control_Monad_Reader_Class.ask(dictMonadReader.MonadAsk0()))(function (v1) {
                      return Control_Monad_Reader_Class.local(dictMonadReader)(f)(v(function ($45) {
                          return Control_Monad_Reader_Class.local(dictMonadReader)(Data_Function["const"](v1))(k($45));
                      }));
                  });
              };
          };
      });
  };
  var monadContContT = function (dictMonad) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadContT(dictMonad);
      }, function (f) {
          return function (k) {
              var v = f(function (a) {
                  return function (v1) {
                      return k(a);
                  };
              });
              return v(k);
          };
      });
  };
  var monadEffectContT = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadContT(dictMonadEffect.Monad0());
      }, function ($46) {
          return Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadEffect.Monad0())(Effect_Class.liftEffect(dictMonadEffect)($46));
      });
  };
  var monadStateContT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadContT(dictMonadState.Monad0());
      }, function ($47) {
          return Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)($47));
      });
  };
  exports["ContT"] = ContT;
  exports["runContT"] = runContT;
  exports["mapContT"] = mapContT;
  exports["withContT"] = withContT;
  exports["newtypeContT"] = newtypeContT;
  exports["monadContContT"] = monadContContT;
  exports["functorContT"] = functorContT;
  exports["applyContT"] = applyContT;
  exports["applicativeContT"] = applicativeContT;
  exports["bindContT"] = bindContT;
  exports["monadContT"] = monadContT;
  exports["monadTransContT"] = monadTransContT;
  exports["monadEffectContT"] = monadEffectContT;
  exports["monadAskContT"] = monadAskContT;
  exports["monadReaderContT"] = monadReaderContT;
  exports["monadStateContT"] = monadStateContT;
})(PS["Control.Monad.Cont.Trans"] = PS["Control.Monad.Cont.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var MonadTell = function (Monad0, tell) {
      this.Monad0 = Monad0;
      this.tell = tell;
  };
  var MonadWriter = function (MonadTell0, listen, pass) {
      this.MonadTell0 = MonadTell0;
      this.listen = listen;
      this.pass = pass;
  };
  var tell = function (dict) {
      return dict.tell;
  };
  var pass = function (dict) {
      return dict.pass;
  };
  var listen = function (dict) {
      return dict.listen;
  };
  var listens = function (dictMonadWriter) {
      return function (f) {
          return function (m) {
              return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(listen(dictMonadWriter)(m))(function (v) {
                  return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(v.value0, f(v.value1)));
              });
          };
      };
  };
  var censor = function (dictMonadWriter) {
      return function (f) {
          return function (m) {
              return pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m)(function (v) {
                  return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(v, f));
              }));
          };
      };
  };
  exports["listen"] = listen;
  exports["pass"] = pass;
  exports["tell"] = tell;
  exports["MonadTell"] = MonadTell;
  exports["MonadWriter"] = MonadWriter;
  exports["listens"] = listens;
  exports["censor"] = censor;
})(PS["Control.Monad.Writer.Class"] = PS["Control.Monad.Writer.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];                 
  var MonadPlus = function (MonadZero0) {
      this.MonadZero0 = MonadZero0;
  };
  var monadPlusArray = new MonadPlus(function () {
      return Control_MonadZero.monadZeroArray;
  });
  exports["MonadPlus"] = MonadPlus;
  exports["monadPlusArray"] = monadPlusArray;
})(PS["Control.MonadPlus"] = PS["Control.MonadPlus"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var ExceptT = function (x) {
      return x;
  };
  var withExceptT = function (dictFunctor) {
      return function (f) {
          return function (v) {
              var mapLeft = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return new Data_Either.Right(v2.value0);
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return new Data_Either.Left(v1(v2.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans line 42, column 3 - line 42, column 32: " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
          };
      };
  };
  var runExceptT = function (v) {
      return v;
  };
  var newtypeExceptT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ExceptT);
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var except = function (dictApplicative) {
      return function ($96) {
          return ExceptT(Control_Applicative.pure(dictApplicative)($96));
      };
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadAskExceptT = function (dictMonadAsk) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadExceptT(dictMonadAsk.Monad0());
      }, Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
  };
  var monadReaderExceptT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadAskExceptT(dictMonadReader.MonadAsk0());
      }, function (f) {
          return mapExceptT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
      });
  };
  var monadContExceptT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadExceptT(dictMonadCont.Monad0());
      }, function (f) {
          return ExceptT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
              var v = f(function (a) {
                  return ExceptT(c(new Data_Either.Right(a)));
              });
              return v;
          }));
      });
  };
  var monadEffectExceptT = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadExceptT(dictMonadEffect.Monad0());
      }, function ($99) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadEffect.Monad0())(Effect_Class.liftEffect(dictMonadEffect)($99));
      });
  };
  var monadRecExceptT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadExceptT(dictMonadRec.Monad0());
      }, function (f) {
          return function ($100) {
              return ExceptT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())((function () {
                      var v = f(a);
                      return v;
                  })())(function (m$prime) {
                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                          if (m$prime instanceof Data_Either.Left) {
                              return new Control_Monad_Rec_Class.Done(new Data_Either.Left(m$prime.value0));
                          };
                          if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
                              return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
                          };
                          if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
                              return new Control_Monad_Rec_Class.Done(new Data_Either.Right(m$prime.value0.value0));
                          };
                          throw new Error("Failed pattern match at Control.Monad.Except.Trans line 74, column 14 - line 77, column 43: " + [ m$prime.constructor.name ]);
                      })());
                  });
              })($100));
          };
      });
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadTellExceptT = function (dictMonadTell) {
      return new Control_Monad_Writer_Class.MonadTell(function () {
          return monadExceptT(dictMonadTell.Monad0());
      }, function ($101) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadTell.Monad0())(Control_Monad_Writer_Class.tell(dictMonadTell)($101));
      });
  };
  var monadWriterExceptT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadTellExceptT(dictMonadWriter.MonadTell0());
      }, mapExceptT(function (m) {
          return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
              return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(Data_Functor.map(Data_Either.functorEither)(function (r) {
                  return new Data_Tuple.Tuple(r, v.value1);
              })(v.value0));
          });
      }), mapExceptT(function (m) {
          return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m)(function (v) {
              return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())((function () {
                  if (v instanceof Data_Either.Left) {
                      return new Data_Tuple.Tuple(new Data_Either.Left(v.value0), Control_Category.identity(Control_Category.categoryFn));
                  };
                  if (v instanceof Data_Either.Right) {
                      return new Data_Tuple.Tuple(new Data_Either.Right(v.value0.value0), v.value0.value1);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Except.Trans line 136, column 10 - line 138, column 44: " + [ v.constructor.name ]);
              })());
          }));
      }));
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  var monadErrorExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadThrowExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function (a) {
                  var v1 = k(a);
                  return v1;
              })(function ($103) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($103));
              }));
          };
      });
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Alt.Alt(function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v2.value0));
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return Control_Bind.bind(dictMonad.Bind1())(v1)(function (v3) {
                              if (v3 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v3.value0));
                              };
                              if (v3 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(v2.value0)(v3.value0)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Except.Trans line 86, column 9 - line 88, column 49: " + [ v3.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans line 82, column 5 - line 88, column 49: " + [ v2.constructor.name ]);
                  });
              };
          });
      };
  };
  var plusExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Plus.Plus(function () {
              return altExceptT(dictMonoid.Semigroup0())(dictMonad);
          }, Control_Monad_Error_Class.throwError(monadThrowExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
      };
  };
  var alternativeExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Alternative.Alternative(function () {
              return applicativeExceptT(dictMonad);
          }, function () {
              return plusExceptT(dictMonoid)(dictMonad);
          });
      };
  };
  var monadZeroExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_MonadZero.MonadZero(function () {
              return alternativeExceptT(dictMonoid)(dictMonad);
          }, function () {
              return monadExceptT(dictMonad);
          });
      };
  };
  var monadPlusExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_MonadPlus.MonadPlus(function () {
              return monadZeroExceptT(dictMonoid)(dictMonad);
          });
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["withExceptT"] = withExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["except"] = except;
  exports["newtypeExceptT"] = newtypeExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadRecExceptT"] = monadRecExceptT;
  exports["altExceptT"] = altExceptT;
  exports["plusExceptT"] = plusExceptT;
  exports["alternativeExceptT"] = alternativeExceptT;
  exports["monadPlusExceptT"] = monadPlusExceptT;
  exports["monadZeroExceptT"] = monadZeroExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadEffectExceptT"] = monadEffectExceptT;
  exports["monadContExceptT"] = monadContExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadErrorExceptT"] = monadErrorExceptT;
  exports["monadAskExceptT"] = monadAskExceptT;
  exports["monadReaderExceptT"] = monadReaderExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
  exports["monadTellExceptT"] = monadTellExceptT;
  exports["monadWriterExceptT"] = monadWriterExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var MaybeT = function (x) {
      return x;
  };
  var runMaybeT = function (v) {
      return v;
  };
  var newtypeMaybeT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, MaybeT);
  var monadTransMaybeT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function ($75) {
          return MaybeT(Control_Monad.liftM1(dictMonad)(Data_Maybe.Just.create)($75));
      };
  });
  var mapMaybeT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorMaybeT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v);
          };
      });
  };
  var monadMaybeT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeMaybeT(dictMonad);
      }, function () {
          return bindMaybeT(dictMonad);
      });
  };
  var bindMaybeT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyMaybeT(dictMonad);
      }, function (v) {
          return function (f) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      var v2 = f(v1.value0);
                      return v2;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Maybe.Trans line 54, column 11 - line 56, column 42: " + [ v1.constructor.name ]);
              });
          };
      });
  };
  var applyMaybeT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorMaybeT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadMaybeT(dictMonad)));
  };
  var applicativeMaybeT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyMaybeT(dictMonad);
      }, function ($76) {
          return MaybeT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Just.create($76)));
      });
  };
  var monadAskMaybeT = function (dictMonadAsk) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadMaybeT(dictMonadAsk.Monad0());
      }, Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
  };
  var monadReaderMaybeT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadAskMaybeT(dictMonadReader.MonadAsk0());
      }, function (f) {
          return mapMaybeT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
      });
  };
  var monadContMaybeT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadMaybeT(dictMonadCont.Monad0());
      }, function (f) {
          return MaybeT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
              var v = f(function (a) {
                  return MaybeT(c(new Data_Maybe.Just(a)));
              });
              return v;
          }));
      });
  };
  var monadEffectMaybe = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadMaybeT(dictMonadEffect.Monad0());
      }, function ($77) {
          return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadEffect.Monad0())(Effect_Class.liftEffect(dictMonadEffect)($77));
      });
  };
  var monadRecMaybeT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadMaybeT(dictMonadRec.Monad0());
      }, function (f) {
          return function ($78) {
              return MaybeT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())((function () {
                      var v = f(a);
                      return v;
                  })())(function (m$prime) {
                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                          if (m$prime instanceof Data_Maybe.Nothing) {
                              return new Control_Monad_Rec_Class.Done(Data_Maybe.Nothing.value);
                          };
                          if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
                              return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
                          };
                          if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
                              return new Control_Monad_Rec_Class.Done(new Data_Maybe.Just(m$prime.value0.value0));
                          };
                          throw new Error("Failed pattern match at Control.Monad.Maybe.Trans line 84, column 16 - line 87, column 43: " + [ m$prime.constructor.name ]);
                      })());
                  });
              })($78));
          };
      });
  };
  var monadStateMaybeT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadMaybeT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadTellMaybeT = function (dictMonadTell) {
      return new Control_Monad_Writer_Class.MonadTell(function () {
          return monadMaybeT(dictMonadTell.Monad0());
      }, function ($79) {
          return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadTell.Monad0())(Control_Monad_Writer_Class.tell(dictMonadTell)($79));
      });
  };
  var monadWriterMaybeT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadTellMaybeT(dictMonadWriter.MonadTell0());
      }, mapMaybeT(function (m) {
          return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
              return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(Data_Functor.map(Data_Maybe.functorMaybe)(function (r) {
                  return new Data_Tuple.Tuple(r, v.value1);
              })(v.value0));
          });
      }), mapMaybeT(function (m) {
          return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m)(function (v) {
              return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())((function () {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Control_Category.identity(Control_Category.categoryFn));
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Tuple.Tuple(new Data_Maybe.Just(v.value0.value0), v.value0.value1);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Maybe.Trans line 121, column 10 - line 123, column 42: " + [ v.constructor.name ]);
              })());
          }));
      }));
  };
  var monadThrowMaybeT = function (dictMonadThrow) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadMaybeT(dictMonadThrow.Monad0());
      }, function (e) {
          return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
      });
  };
  var monadErrorMaybeT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadThrowMaybeT(dictMonadError.MonadThrow0());
      }, function (v) {
          return function (h) {
              return MaybeT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (a) {
                  var v1 = h(a);
                  return v1;
              }));
          };
      });
  };
  var altMaybeT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorMaybeT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, function (v) {
          return function (v1) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(function (v2) {
                  if (v2 instanceof Data_Maybe.Nothing) {
                      return v1;
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(v2);
              });
          };
      });
  };
  var plusMaybeT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altMaybeT(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value));
  };
  var alternativeMaybeT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeMaybeT(dictMonad);
      }, function () {
          return plusMaybeT(dictMonad);
      });
  };
  var monadZeroMaybeT = function (dictMonad) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeMaybeT(dictMonad);
      }, function () {
          return monadMaybeT(dictMonad);
      });
  };
  var monadPlusMaybeT = function (dictMonad) {
      return new Control_MonadPlus.MonadPlus(function () {
          return monadZeroMaybeT(dictMonad);
      });
  };
  exports["MaybeT"] = MaybeT;
  exports["runMaybeT"] = runMaybeT;
  exports["mapMaybeT"] = mapMaybeT;
  exports["newtypeMaybeT"] = newtypeMaybeT;
  exports["functorMaybeT"] = functorMaybeT;
  exports["applyMaybeT"] = applyMaybeT;
  exports["applicativeMaybeT"] = applicativeMaybeT;
  exports["bindMaybeT"] = bindMaybeT;
  exports["monadMaybeT"] = monadMaybeT;
  exports["monadTransMaybeT"] = monadTransMaybeT;
  exports["altMaybeT"] = altMaybeT;
  exports["plusMaybeT"] = plusMaybeT;
  exports["alternativeMaybeT"] = alternativeMaybeT;
  exports["monadPlusMaybeT"] = monadPlusMaybeT;
  exports["monadZeroMaybeT"] = monadZeroMaybeT;
  exports["monadRecMaybeT"] = monadRecMaybeT;
  exports["monadEffectMaybe"] = monadEffectMaybe;
  exports["monadContMaybeT"] = monadContMaybeT;
  exports["monadThrowMaybeT"] = monadThrowMaybeT;
  exports["monadErrorMaybeT"] = monadErrorMaybeT;
  exports["monadAskMaybeT"] = monadAskMaybeT;
  exports["monadReaderMaybeT"] = monadReaderMaybeT;
  exports["monadStateMaybeT"] = monadStateMaybeT;
  exports["monadTellMaybeT"] = monadTellMaybeT;
  exports["monadWriterMaybeT"] = monadWriterMaybeT;
})(PS["Control.Monad.Maybe.Trans"] = PS["Control.Monad.Maybe.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var ReaderT = function (x) {
      return x;
  };
  var withReaderT = function (f) {
      return function (v) {
          return function ($66) {
              return v(f($66));
          };
      };
  };
  var runReaderT = function (v) {
      return v;
  };
  var newtypeReaderT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ReaderT);
  var monadTransReaderT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function ($67) {
          return ReaderT(Data_Function["const"]($67));
      };
  });
  var mapReaderT = function (f) {
      return function (v) {
          return function ($68) {
              return f(v($68));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return new Data_Functor.Functor(function ($69) {
          return mapReaderT(Data_Functor.map(dictFunctor)($69));
      });
  };
  var distributiveReaderT = function (dictDistributive) {
      return new Data_Distributive.Distributive(function () {
          return functorReaderT(dictDistributive.Functor0());
      }, function (dictFunctor) {
          return function (f) {
              return function ($70) {
                  return Data_Distributive.distribute(distributiveReaderT(dictDistributive))(dictFunctor)(Data_Functor.map(dictFunctor)(f)($70));
              };
          };
      }, function (dictFunctor) {
          return function (a) {
              return function (e) {
                  return Data_Distributive.collect(dictDistributive)(dictFunctor)(function (r) {
                      return r(e);
                  })(a);
              };
          };
      });
  };
  var applyReaderT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorReaderT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Apply.apply(dictApply)(v(r))(v1(r));
              };
          };
      });
  };
  var bindReaderT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyReaderT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (r) {
                  return Control_Bind.bind(dictBind)(v(r))(function (a) {
                      var v1 = k(a);
                      return v1(r);
                  });
              };
          };
      });
  };
  var semigroupReaderT = function (dictApply) {
      return function (dictSemigroup) {
          return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyReaderT(dictApply))(Data_Semigroup.append(dictSemigroup)));
      };
  };
  var applicativeReaderT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyReaderT(dictApplicative.Apply0());
      }, function ($71) {
          return ReaderT(Data_Function["const"](Control_Applicative.pure(dictApplicative)($71)));
      });
  };
  var monadReaderT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeReaderT(dictMonad.Applicative0());
      }, function () {
          return bindReaderT(dictMonad.Bind1());
      });
  };
  var monadAskReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadReaderT(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0()));
  };
  var monadReaderReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadAskReaderT(dictMonad);
      }, withReaderT);
  };
  var monadContReaderT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadReaderT(dictMonadCont.Monad0());
      }, function (f) {
          return function (r) {
              return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  var v = f(function ($72) {
                      return ReaderT(Data_Function["const"](c($72)));
                  });
                  return v(r);
              });
          };
      });
  };
  var monadEffectReader = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadReaderT(dictMonadEffect.Monad0());
      }, function ($73) {
          return Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEffect.Monad0())(Effect_Class.liftEffect(dictMonadEffect)($73));
      });
  };
  var monadRecReaderT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadReaderT(dictMonadRec.Monad0());
      }, function (k) {
          return function (a) {
              var k$prime = function (r) {
                  return function (a$prime) {
                      var v = k(a$prime);
                      return Control_Bind.bindFlipped((dictMonadRec.Monad0()).Bind1())(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0()))(v(r));
                  };
              };
              return function (r) {
                  return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(a);
              };
          };
      });
  };
  var monadStateReaderT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadReaderT(dictMonadState.Monad0());
      }, function ($74) {
          return Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)($74));
      });
  };
  var monadTellReaderT = function (dictMonadTell) {
      return new Control_Monad_Writer_Class.MonadTell(function () {
          return monadReaderT(dictMonadTell.Monad0());
      }, function ($75) {
          return Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadTell.Monad0())(Control_Monad_Writer_Class.tell(dictMonadTell)($75));
      });
  };
  var monadWriterReaderT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadTellReaderT(dictMonadWriter.MonadTell0());
      }, mapReaderT(Control_Monad_Writer_Class.listen(dictMonadWriter)), mapReaderT(Control_Monad_Writer_Class.pass(dictMonadWriter)));
  };
  var monadThrowReaderT = function (dictMonadThrow) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadReaderT(dictMonadThrow.Monad0());
      }, function ($76) {
          return Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)($76));
      });
  };
  var monadErrorReaderT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadThrowReaderT(dictMonadError.MonadThrow0());
      }, function (v) {
          return function (h) {
              return function (r) {
                  return Control_Monad_Error_Class.catchError(dictMonadError)(v(r))(function (e) {
                      var v1 = h(e);
                      return v1(r);
                  });
              };
          };
      });
  };
  var monoidReaderT = function (dictApplicative) {
      return function (dictMonoid) {
          return new Data_Monoid.Monoid(function () {
              return semigroupReaderT(dictApplicative.Apply0())(dictMonoid.Semigroup0());
          }, Control_Applicative.pure(applicativeReaderT(dictApplicative))(Data_Monoid.mempty(dictMonoid)));
      };
  };
  var altReaderT = function (dictAlt) {
      return new Control_Alt.Alt(function () {
          return functorReaderT(dictAlt.Functor0());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Alt.alt(dictAlt)(v(r))(v1(r));
              };
          };
      });
  };
  var plusReaderT = function (dictPlus) {
      return new Control_Plus.Plus(function () {
          return altReaderT(dictPlus.Alt0());
      }, Data_Function["const"](Control_Plus.empty(dictPlus)));
  };
  var alternativeReaderT = function (dictAlternative) {
      return new Control_Alternative.Alternative(function () {
          return applicativeReaderT(dictAlternative.Applicative0());
      }, function () {
          return plusReaderT(dictAlternative.Plus1());
      });
  };
  var monadZeroReaderT = function (dictMonadZero) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeReaderT(dictMonadZero.Alternative1());
      }, function () {
          return monadReaderT(dictMonadZero.Monad0());
      });
  };
  var monadPlusReaderT = function (dictMonadPlus) {
      return new Control_MonadPlus.MonadPlus(function () {
          return monadZeroReaderT(dictMonadPlus.MonadZero0());
      });
  };
  exports["ReaderT"] = ReaderT;
  exports["runReaderT"] = runReaderT;
  exports["withReaderT"] = withReaderT;
  exports["mapReaderT"] = mapReaderT;
  exports["newtypeReaderT"] = newtypeReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applyReaderT"] = applyReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["altReaderT"] = altReaderT;
  exports["plusReaderT"] = plusReaderT;
  exports["alternativeReaderT"] = alternativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadReaderT"] = monadReaderT;
  exports["monadZeroReaderT"] = monadZeroReaderT;
  exports["semigroupReaderT"] = semigroupReaderT;
  exports["monoidReaderT"] = monoidReaderT;
  exports["monadPlusReaderT"] = monadPlusReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadEffectReader"] = monadEffectReader;
  exports["monadContReaderT"] = monadContReaderT;
  exports["monadThrowReaderT"] = monadThrowReaderT;
  exports["monadErrorReaderT"] = monadErrorReaderT;
  exports["monadAskReaderT"] = monadAskReaderT;
  exports["monadReaderReaderT"] = monadReaderReaderT;
  exports["monadStateReaderT"] = monadStateReaderT;
  exports["monadTellReaderT"] = monadTellReaderT;
  exports["monadWriterReaderT"] = monadWriterReaderT;
  exports["distributiveReaderT"] = distributiveReaderT;
  exports["monadRecReaderT"] = monadRecReaderT;
})(PS["Control.Monad.Reader.Trans"] = PS["Control.Monad.Reader.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var WriterT = function (x) {
      return x;
  };
  var runWriterT = function (v) {
      return v;
  };
  var newtypeWriterT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, WriterT);
  var monadTransWriterT = function (dictMonoid) {
      return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v, Data_Monoid.mempty(dictMonoid)));
              });
          };
      });
  };
  var mapWriterT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorWriterT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapWriterT(Data_Functor.map(dictFunctor)(function (v) {
              return new Data_Tuple.Tuple(f(v.value0), v.value1);
          }));
      });
  };
  var execWriterT = function (dictFunctor) {
      return function (v) {
          return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v);
      };
  };
  var applyWriterT = function (dictSemigroup) {
      return function (dictApply) {
          return new Control_Apply.Apply(function () {
              return functorWriterT(dictApply.Functor0());
          }, function (v) {
              return function (v1) {
                  var k = function (v3) {
                      return function (v4) {
                          return new Data_Tuple.Tuple(v3.value0(v4.value0), Data_Semigroup.append(dictSemigroup)(v3.value1)(v4.value1));
                      };
                  };
                  return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(k)(v))(v1);
              };
          });
      };
  };
  var bindWriterT = function (dictSemigroup) {
      return function (dictBind) {
          return new Control_Bind.Bind(function () {
              return applyWriterT(dictSemigroup)(dictBind.Apply0());
          }, function (v) {
              return function (k) {
                  return WriterT(Control_Bind.bind(dictBind)(v)(function (v1) {
                      var v2 = k(v1.value0);
                      return Data_Functor.map((dictBind.Apply0()).Functor0())(function (v3) {
                          return new Data_Tuple.Tuple(v3.value0, Data_Semigroup.append(dictSemigroup)(v1.value1)(v3.value1));
                      })(v2);
                  }));
              };
          });
      };
  };
  var applicativeWriterT = function (dictMonoid) {
      return function (dictApplicative) {
          return new Control_Applicative.Applicative(function () {
              return applyWriterT(dictMonoid.Semigroup0())(dictApplicative.Apply0());
          }, function (a) {
              return WriterT(Control_Applicative.pure(dictApplicative)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
          });
      };
  };
  var monadWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeWriterT(dictMonoid)(dictMonad.Applicative0());
          }, function () {
              return bindWriterT(dictMonoid.Semigroup0())(dictMonad.Bind1());
          });
      };
  };
  var monadAskWriterT = function (dictMonoid) {
      return function (dictMonadAsk) {
          return new Control_Monad_Reader_Class.MonadAsk(function () {
              return monadWriterT(dictMonoid)(dictMonadAsk.Monad0());
          }, Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
      };
  };
  var monadReaderWriterT = function (dictMonoid) {
      return function (dictMonadReader) {
          return new Control_Monad_Reader_Class.MonadReader(function () {
              return monadAskWriterT(dictMonoid)(dictMonadReader.MonadAsk0());
          }, function (f) {
              return mapWriterT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
          });
      };
  };
  var monadContWriterT = function (dictMonoid) {
      return function (dictMonadCont) {
          return new Control_Monad_Cont_Class.MonadCont(function () {
              return monadWriterT(dictMonoid)(dictMonadCont.Monad0());
          }, function (f) {
              return WriterT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  var v = f(function (a) {
                      return WriterT(c(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
                  });
                  return v;
              }));
          });
      };
  };
  var monadEffectWriter = function (dictMonoid) {
      return function (dictMonadEffect) {
          return new Effect_Class.MonadEffect(function () {
              return monadWriterT(dictMonoid)(dictMonadEffect.Monad0());
          }, function ($123) {
              return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadEffect.Monad0())(Effect_Class.liftEffect(dictMonadEffect)($123));
          });
      };
  };
  var monadRecWriterT = function (dictMonoid) {
      return function (dictMonadRec) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadWriterT(dictMonoid)(dictMonadRec.Monad0());
          }, function (f) {
              return function (a) {
                  var f$prime = function (v) {
                      return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())((function () {
                          var v1 = f(v.value0);
                          return v1;
                      })())(function (v1) {
                          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                              if (v1.value0 instanceof Control_Monad_Rec_Class.Loop) {
                                  return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v1.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v1.value1)));
                              };
                              if (v1.value0 instanceof Control_Monad_Rec_Class.Done) {
                                  return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v1.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v1.value1)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Writer.Trans line 83, column 16 - line 85, column 47: " + [ v1.value0.constructor.name ]);
                          })());
                      });
                  };
                  return WriterT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
              };
          });
      };
  };
  var monadStateWriterT = function (dictMonoid) {
      return function (dictMonadState) {
          return new Control_Monad_State_Class.MonadState(function () {
              return monadWriterT(dictMonoid)(dictMonadState.Monad0());
          }, function (f) {
              return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
          });
      };
  };
  var monadTellWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad_Writer_Class.MonadTell(function () {
              return monadWriterT(dictMonoid)(dictMonad);
          }, function ($124) {
              return WriterT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Tuple.Tuple.create(Data_Unit.unit)($124)));
          });
      };
  };
  var monadWriterWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadTellWriterT(dictMonoid)(dictMonad);
          }, function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v1.value0, v1.value1), v1.value1));
              });
          }, function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0.value0, v1.value0.value1(v1.value1)));
              });
          });
      };
  };
  var monadThrowWriterT = function (dictMonoid) {
      return function (dictMonadThrow) {
          return new Control_Monad_Error_Class.MonadThrow(function () {
              return monadWriterT(dictMonoid)(dictMonadThrow.Monad0());
          }, function (e) {
              return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
          });
      };
  };
  var monadErrorWriterT = function (dictMonoid) {
      return function (dictMonadError) {
          return new Control_Monad_Error_Class.MonadError(function () {
              return monadThrowWriterT(dictMonoid)(dictMonadError.MonadThrow0());
          }, function (v) {
              return function (h) {
                  return WriterT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (e) {
                      var v1 = h(e);
                      return v1;
                  }));
              };
          });
      };
  };
  var altWriterT = function (dictAlt) {
      return new Control_Alt.Alt(function () {
          return functorWriterT(dictAlt.Functor0());
      }, function (v) {
          return function (v1) {
              return Control_Alt.alt(dictAlt)(v)(v1);
          };
      });
  };
  var plusWriterT = function (dictPlus) {
      return new Control_Plus.Plus(function () {
          return altWriterT(dictPlus.Alt0());
      }, Control_Plus.empty(dictPlus));
  };
  var alternativeWriterT = function (dictMonoid) {
      return function (dictAlternative) {
          return new Control_Alternative.Alternative(function () {
              return applicativeWriterT(dictMonoid)(dictAlternative.Applicative0());
          }, function () {
              return plusWriterT(dictAlternative.Plus1());
          });
      };
  };
  var monadZeroWriterT = function (dictMonoid) {
      return function (dictMonadZero) {
          return new Control_MonadZero.MonadZero(function () {
              return alternativeWriterT(dictMonoid)(dictMonadZero.Alternative1());
          }, function () {
              return monadWriterT(dictMonoid)(dictMonadZero.Monad0());
          });
      };
  };
  var monadPlusWriterT = function (dictMonoid) {
      return function (dictMonadPlus) {
          return new Control_MonadPlus.MonadPlus(function () {
              return monadZeroWriterT(dictMonoid)(dictMonadPlus.MonadZero0());
          });
      };
  };
  exports["WriterT"] = WriterT;
  exports["runWriterT"] = runWriterT;
  exports["execWriterT"] = execWriterT;
  exports["mapWriterT"] = mapWriterT;
  exports["newtypeWriterT"] = newtypeWriterT;
  exports["functorWriterT"] = functorWriterT;
  exports["applyWriterT"] = applyWriterT;
  exports["applicativeWriterT"] = applicativeWriterT;
  exports["altWriterT"] = altWriterT;
  exports["plusWriterT"] = plusWriterT;
  exports["alternativeWriterT"] = alternativeWriterT;
  exports["bindWriterT"] = bindWriterT;
  exports["monadWriterT"] = monadWriterT;
  exports["monadRecWriterT"] = monadRecWriterT;
  exports["monadZeroWriterT"] = monadZeroWriterT;
  exports["monadPlusWriterT"] = monadPlusWriterT;
  exports["monadTransWriterT"] = monadTransWriterT;
  exports["monadEffectWriter"] = monadEffectWriter;
  exports["monadContWriterT"] = monadContWriterT;
  exports["monadThrowWriterT"] = monadThrowWriterT;
  exports["monadErrorWriterT"] = monadErrorWriterT;
  exports["monadAskWriterT"] = monadAskWriterT;
  exports["monadReaderWriterT"] = monadReaderWriterT;
  exports["monadStateWriterT"] = monadStateWriterT;
  exports["monadTellWriterT"] = monadTellWriterT;
  exports["monadWriterWriterT"] = monadWriterWriterT;
})(PS["Control.Monad.Writer.Trans"] = PS["Control.Monad.Writer.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var App = function (x) {
      return x;
  };
  var traversableWithIndexApp = function (dictTraversableWithIndex) {
      return dictTraversableWithIndex;
  };
  var traversableApp = function (dictTraversable) {
      return dictTraversable;
  };
  var showApp = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(App " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupApp = function (dictApply) {
      return function (dictSemigroup) {
          return new Data_Semigroup.Semigroup(function (v) {
              return function (v1) {
                  return Control_Apply.lift2(dictApply)(Data_Semigroup.append(dictSemigroup))(v)(v1);
              };
          });
      };
  };
  var plusApp = function (dictPlus) {
      return dictPlus;
  };
  var newtypeApp = new Data_Newtype.Newtype(function (n) {
      return n;
  }, App);
  var monoidApp = function (dictApplicative) {
      return function (dictMonoid) {
          return new Data_Monoid.Monoid(function () {
              return semigroupApp(dictApplicative.Apply0())(dictMonoid.Semigroup0());
          }, Control_Applicative.pure(dictApplicative)(Data_Monoid.mempty(dictMonoid)));
      };
  };
  var monadZeroApp = function (dictMonadZero) {
      return dictMonadZero;
  };
  var monadPlusApp = function (dictMonadPlus) {
      return dictMonadPlus;
  };
  var monadApp = function (dictMonad) {
      return dictMonad;
  };
  var lazyApp = function (dictLazy) {
      return dictLazy;
  };
  var hoistLowerApp = Unsafe_Coerce.unsafeCoerce;
  var hoistLiftApp = Unsafe_Coerce.unsafeCoerce;
  var hoistApp = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorWithIndexApp = function (dictFunctorWithIndex) {
      return dictFunctorWithIndex;
  };
  var functorApp = function (dictFunctor) {
      return dictFunctor;
  };
  var foldableWithIndexApp = function (dictFoldableWithIndex) {
      return dictFoldableWithIndex;
  };
  var foldableApp = function (dictFoldable) {
      return dictFoldable;
  };
  var extendApp = function (dictExtend) {
      return dictExtend;
  };
  var eqApp = function (dictEq1) {
      return function (dictEq) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq1(dictEq1)(dictEq)(x)(y);
              };
          });
      };
  };
  var ordApp = function (dictOrd1) {
      return function (dictOrd) {
          return new Data_Ord.Ord(function () {
              return eqApp(dictOrd1.Eq10())(dictOrd.Eq0());
          }, function (x) {
              return function (y) {
                  return Data_Ord.compare1(dictOrd1)(dictOrd)(x)(y);
              };
          });
      };
  };
  var eq1App = function (dictEq1) {
      return new Data_Eq.Eq1(function (dictEq) {
          return Data_Eq.eq(eqApp(dictEq1)(dictEq));
      });
  };
  var ord1App = function (dictOrd1) {
      return new Data_Ord.Ord1(function () {
          return eq1App(dictOrd1.Eq10());
      }, function (dictOrd) {
          return Data_Ord.compare(ordApp(dictOrd1)(dictOrd));
      });
  };
  var comonadApp = function (dictComonad) {
      return dictComonad;
  };
  var bindApp = function (dictBind) {
      return dictBind;
  };
  var applyApp = function (dictApply) {
      return dictApply;
  };
  var applicativeApp = function (dictApplicative) {
      return dictApplicative;
  };
  var alternativeApp = function (dictAlternative) {
      return dictAlternative;
  };
  var altApp = function (dictAlt) {
      return dictAlt;
  };
  exports["App"] = App;
  exports["hoistApp"] = hoistApp;
  exports["hoistLiftApp"] = hoistLiftApp;
  exports["hoistLowerApp"] = hoistLowerApp;
  exports["newtypeApp"] = newtypeApp;
  exports["eqApp"] = eqApp;
  exports["eq1App"] = eq1App;
  exports["ordApp"] = ordApp;
  exports["ord1App"] = ord1App;
  exports["showApp"] = showApp;
  exports["semigroupApp"] = semigroupApp;
  exports["monoidApp"] = monoidApp;
  exports["functorApp"] = functorApp;
  exports["functorWithIndexApp"] = functorWithIndexApp;
  exports["applyApp"] = applyApp;
  exports["applicativeApp"] = applicativeApp;
  exports["bindApp"] = bindApp;
  exports["monadApp"] = monadApp;
  exports["altApp"] = altApp;
  exports["plusApp"] = plusApp;
  exports["alternativeApp"] = alternativeApp;
  exports["monadZeroApp"] = monadZeroApp;
  exports["monadPlusApp"] = monadPlusApp;
  exports["lazyApp"] = lazyApp;
  exports["foldableApp"] = foldableApp;
  exports["traversableApp"] = traversableApp;
  exports["foldableWithIndexApp"] = foldableWithIndexApp;
  exports["traversableWithIndexApp"] = traversableWithIndexApp;
  exports["extendApp"] = extendApp;
  exports["comonadApp"] = comonadApp;
})(PS["Data.Functor.App"] = PS["Data.Functor.App"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_App = PS["Data.Functor.App"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var Compose = function (x) {
      return x;
  };
  var showCompose = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Compose " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var newtypeCompose = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Compose);
  var functorCompose = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function (v) {
                  return Compose(Data_Functor.map(dictFunctor)(Data_Functor.map(dictFunctor1)(f))(v));
              };
          });
      };
  };
  var functorWithIndexCompose = function (dictFunctorWithIndex) {
      return function (dictFunctorWithIndex1) {
          return new Data_FunctorWithIndex.FunctorWithIndex(function () {
              return functorCompose(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
          }, function (f) {
              return function (v) {
                  return Compose(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function ($100) {
                      return Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex1)(Data_Tuple.curry(f)($100));
                  })(v));
              };
          });
      };
  };
  var foldableCompose = function (dictFoldable) {
      return function (dictFoldable1) {
          return new Data_Foldable.Foldable(function (dictMonoid) {
              return function (f) {
                  return function (v) {
                      return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(Data_Foldable.foldMap(dictFoldable1)(dictMonoid)(f))(v);
                  };
              };
          }, function (f) {
              return function (i) {
                  return function (v) {
                      return Data_Foldable.foldl(dictFoldable)(Data_Foldable.foldl(dictFoldable1)(f))(i)(v);
                  };
              };
          }, function (f) {
              return function (i) {
                  return function (v) {
                      return Data_Foldable.foldr(dictFoldable)(Data_Function.flip(Data_Foldable.foldr(dictFoldable1)(f)))(i)(v);
                  };
              };
          });
      };
  };
  var foldableWithIndexCompose = function (dictFoldableWithIndex) {
      return function (dictFoldableWithIndex1) {
          return new Data_FoldableWithIndex.FoldableWithIndex(function () {
              return foldableCompose(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
          }, function (dictMonoid) {
              return function (f) {
                  return function (v) {
                      return Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function ($101) {
                          return Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid)(Data_Tuple.curry(f)($101));
                      })(v);
                  };
              };
          }, function (f) {
              return function (i) {
                  return function (v) {
                      return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function ($102) {
                          return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex1)(Data_Tuple.curry(f)($102));
                      })(i)(v);
                  };
              };
          }, function (f) {
              return function (i) {
                  return function (v) {
                      return Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function (a) {
                          return Data_Function.flip(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex1)(Data_Tuple.curry(f)(a)));
                      })(i)(v);
                  };
              };
          });
      };
  };
  var traversableCompose = function (dictTraversable) {
      return function (dictTraversable1) {
          return new Data_Traversable.Traversable(function () {
              return foldableCompose(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
          }, function () {
              return functorCompose(dictTraversable.Functor0())(dictTraversable1.Functor0());
          }, function (dictApplicative) {
              return Data_Traversable.traverse(traversableCompose(dictTraversable)(dictTraversable1))(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
          }, function (dictApplicative) {
              return function (f) {
                  return function (v) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Compose)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(Data_Traversable.traverse(dictTraversable1)(dictApplicative)(f))(v));
                  };
              };
          });
      };
  };
  var traversableWithIndexCompose = function (dictTraversableWithIndex) {
      return function (dictTraversableWithIndex1) {
          return new Data_TraversableWithIndex.TraversableWithIndex(function () {
              return foldableWithIndexCompose(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
          }, function () {
              return functorWithIndexCompose(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
          }, function () {
              return traversableCompose(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
          }, function (dictApplicative) {
              return function (f) {
                  return function (v) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Compose)(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function ($103) {
                          return Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex1)(dictApplicative)(Data_Tuple.curry(f)($103));
                      })(v));
                  };
              };
          });
      };
  };
  var eqCompose = function (dictEq1) {
      return function (dictEq11) {
          return function (dictEq) {
              return new Data_Eq.Eq(function (v) {
                  return function (v1) {
                      return Data_Eq.eq1(dictEq1)(Data_Functor_App.eqApp(dictEq11)(dictEq))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
                  };
              });
          };
      };
  };
  var ordCompose = function (dictOrd1) {
      return function (dictOrd11) {
          return function (dictOrd) {
              return new Data_Ord.Ord(function () {
                  return eqCompose(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
              }, function (v) {
                  return function (v1) {
                      return Data_Ord.compare1(dictOrd1)(Data_Functor_App.ordApp(dictOrd11)(dictOrd))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
                  };
              });
          };
      };
  };
  var eq1Compose = function (dictEq1) {
      return function (dictEq11) {
          return new Data_Eq.Eq1(function (dictEq) {
              return Data_Eq.eq(eqCompose(dictEq1)(dictEq11)(dictEq));
          });
      };
  };
  var ord1Compose = function (dictOrd1) {
      return function (dictOrd11) {
          return new Data_Ord.Ord1(function () {
              return eq1Compose(dictOrd1.Eq10())(dictOrd11.Eq10());
          }, function (dictOrd) {
              return Data_Ord.compare(ordCompose(dictOrd1)(dictOrd11)(dictOrd));
          });
      };
  };
  var bihoistCompose = function (dictFunctor) {
      return function (natF) {
          return function (natG) {
              return function (v) {
                  return natF(Data_Functor.map(dictFunctor)(natG)(v));
              };
          };
      };
  };
  var applyCompose = function (dictApply) {
      return function (dictApply1) {
          return new Control_Apply.Apply(function () {
              return functorCompose(dictApply.Functor0())(dictApply1.Functor0());
          }, function (v) {
              return function (v1) {
                  return Compose(Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Control_Apply.apply(dictApply1))(v))(v1));
              };
          });
      };
  };
  var applicativeCompose = function (dictApplicative) {
      return function (dictApplicative1) {
          return new Control_Applicative.Applicative(function () {
              return applyCompose(dictApplicative.Apply0())(dictApplicative1.Apply0());
          }, function ($104) {
              return Compose(Control_Applicative.pure(dictApplicative)(Control_Applicative.pure(dictApplicative1)($104)));
          });
      };
  };
  var altCompose = function (dictAlt) {
      return function (dictFunctor) {
          return new Control_Alt.Alt(function () {
              return functorCompose(dictAlt.Functor0())(dictFunctor);
          }, function (v) {
              return function (v1) {
                  return Compose(Control_Alt.alt(dictAlt)(v)(v1));
              };
          });
      };
  };
  var plusCompose = function (dictPlus) {
      return function (dictFunctor) {
          return new Control_Plus.Plus(function () {
              return altCompose(dictPlus.Alt0())(dictFunctor);
          }, Control_Plus.empty(dictPlus));
      };
  };
  var alternativeCompose = function (dictAlternative) {
      return function (dictApplicative) {
          return new Control_Alternative.Alternative(function () {
              return applicativeCompose(dictAlternative.Applicative0())(dictApplicative);
          }, function () {
              return plusCompose(dictAlternative.Plus1())((dictApplicative.Apply0()).Functor0());
          });
      };
  };
  exports["Compose"] = Compose;
  exports["bihoistCompose"] = bihoistCompose;
  exports["newtypeCompose"] = newtypeCompose;
  exports["eqCompose"] = eqCompose;
  exports["eq1Compose"] = eq1Compose;
  exports["ordCompose"] = ordCompose;
  exports["ord1Compose"] = ord1Compose;
  exports["showCompose"] = showCompose;
  exports["functorCompose"] = functorCompose;
  exports["functorWithIndexCompose"] = functorWithIndexCompose;
  exports["applyCompose"] = applyCompose;
  exports["applicativeCompose"] = applicativeCompose;
  exports["foldableCompose"] = foldableCompose;
  exports["foldableWithIndexCompose"] = foldableWithIndexCompose;
  exports["traversableCompose"] = traversableCompose;
  exports["traversableWithIndexCompose"] = traversableWithIndexCompose;
  exports["altCompose"] = altCompose;
  exports["plusCompose"] = plusCompose;
  exports["alternativeCompose"] = alternativeCompose;
})(PS["Data.Functor.Compose"] = PS["Data.Functor.Compose"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Compose = PS["Data.Functor.Compose"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Ref = PS["Effect.Ref"];
  var Prelude = PS["Prelude"];                 
  var ParCont = function (x) {
      return x;
  };
  var Parallel = function (Applicative1, Monad0, parallel, sequential) {
      this.Applicative1 = Applicative1;
      this.Monad0 = Monad0;
      this.parallel = parallel;
      this.sequential = sequential;
  };
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  var newtypeParCont = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ParCont);
  var monadParWriterT = function (dictMonoid) {
      return function (dictParallel) {
          return new Parallel(function () {
              return Control_Monad_Writer_Trans.applicativeWriterT(dictMonoid)(dictParallel.Applicative1());
          }, function () {
              return Control_Monad_Writer_Trans.monadWriterT(dictMonoid)(dictParallel.Monad0());
          }, Control_Monad_Writer_Trans.mapWriterT(parallel(dictParallel)), Control_Monad_Writer_Trans.mapWriterT(sequential(dictParallel)));
      };
  };
  var monadParReaderT = function (dictParallel) {
      return new Parallel(function () {
          return Control_Monad_Reader_Trans.applicativeReaderT(dictParallel.Applicative1());
      }, function () {
          return Control_Monad_Reader_Trans.monadReaderT(dictParallel.Monad0());
      }, Control_Monad_Reader_Trans.mapReaderT(parallel(dictParallel)), Control_Monad_Reader_Trans.mapReaderT(sequential(dictParallel)));
  };
  var monadParMaybeT = function (dictParallel) {
      return new Parallel(function () {
          return Data_Functor_Compose.applicativeCompose(dictParallel.Applicative1())(Data_Maybe.applicativeMaybe);
      }, function () {
          return Control_Monad_Maybe_Trans.monadMaybeT(dictParallel.Monad0());
      }, function (v) {
          return parallel(dictParallel)(v);
      }, function (v) {
          return sequential(dictParallel)(v);
      });
  };
  var monadParExceptT = function (dictParallel) {
      return new Parallel(function () {
          return Data_Functor_Compose.applicativeCompose(dictParallel.Applicative1())(Data_Either.applicativeEither);
      }, function () {
          return Control_Monad_Except_Trans.monadExceptT(dictParallel.Monad0());
      }, function (v) {
          return parallel(dictParallel)(v);
      }, function (v) {
          return sequential(dictParallel)(v);
      });
  };
  var monadParParCont = function (dictMonadEffect) {
      return new Parallel(function () {
          return applicativeParCont(dictMonadEffect);
      }, function () {
          return Control_Monad_Cont_Trans.monadContT(dictMonadEffect.Monad0());
      }, ParCont, function (v) {
          return v;
      });
  };
  var functorParCont = function (dictMonadEffect) {
      return new Data_Functor.Functor(function (f) {
          return function ($54) {
              return parallel(monadParParCont(dictMonadEffect))(Data_Functor.map(Control_Monad_Cont_Trans.functorContT((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0()))(f)(sequential(monadParParCont(dictMonadEffect))($54)));
          };
      });
  };
  var applyParCont = function (dictMonadEffect) {
      return new Control_Apply.Apply(function () {
          return functorParCont(dictMonadEffect);
      }, function (v) {
          return function (v1) {
              return ParCont(function (k) {
                  return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (v2) {
                      return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (v3) {
                          return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Control_Monad_Cont_Trans.runContT(v)(function (a) {
                              return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(v3)))(function (v4) {
                                  if (v4 instanceof Data_Maybe.Nothing) {
                                      return Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(new Data_Maybe.Just(a))(v2));
                                  };
                                  if (v4 instanceof Data_Maybe.Just) {
                                      return k(a(v4.value0));
                                  };
                                  throw new Error("Failed pattern match at Control.Parallel.Class line 71, column 7 - line 73, column 26: " + [ v4.constructor.name ]);
                              });
                          }))(function () {
                              return Control_Monad_Cont_Trans.runContT(v1)(function (b) {
                                  return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(v2)))(function (v4) {
                                      if (v4 instanceof Data_Maybe.Nothing) {
                                          return Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(new Data_Maybe.Just(b))(v3));
                                      };
                                      if (v4 instanceof Data_Maybe.Just) {
                                          return k(v4.value0(b));
                                      };
                                      throw new Error("Failed pattern match at Control.Parallel.Class line 77, column 7 - line 79, column 26: " + [ v4.constructor.name ]);
                                  });
                              });
                          });
                      });
                  });
              });
          };
      });
  };
  var applicativeParCont = function (dictMonadEffect) {
      return new Control_Applicative.Applicative(function () {
          return applyParCont(dictMonadEffect);
      }, function ($55) {
          return parallel(monadParParCont(dictMonadEffect))(Control_Applicative.pure(Control_Monad_Cont_Trans.applicativeContT((dictMonadEffect.Monad0()).Applicative0()))($55));
      });
  };
  var altParCont = function (dictMonadEffect) {
      return new Control_Alt.Alt(function () {
          return functorParCont(dictMonadEffect);
      }, function (v) {
          return function (v1) {
              return ParCont(function (k) {
                  return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](false)))(function (v2) {
                      return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Control_Monad_Cont_Trans.runContT(v)(function (a) {
                          return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(v2)))(function (v3) {
                              if (v3) {
                                  return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
                              };
                              return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(true)(v2)))(function () {
                                  return k(a);
                              });
                          });
                      }))(function () {
                          return Control_Monad_Cont_Trans.runContT(v1)(function (a) {
                              return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(v2)))(function (v3) {
                                  if (v3) {
                                      return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
                                  };
                                  return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(true)(v2)))(function () {
                                      return k(a);
                                  });
                              });
                          });
                      });
                  });
              });
          };
      });
  };
  var plusParCont = function (dictMonadEffect) {
      return new Control_Plus.Plus(function () {
          return altParCont(dictMonadEffect);
      }, ParCont(function (v) {
          return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
      }));
  };
  var alternativeParCont = function (dictMonadEffect) {
      return new Control_Alternative.Alternative(function () {
          return applicativeParCont(dictMonadEffect);
      }, function () {
          return plusParCont(dictMonadEffect);
      });
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
  exports["Parallel"] = Parallel;
  exports["ParCont"] = ParCont;
  exports["monadParExceptT"] = monadParExceptT;
  exports["monadParReaderT"] = monadParReaderT;
  exports["monadParWriterT"] = monadParWriterT;
  exports["monadParMaybeT"] = monadParMaybeT;
  exports["newtypeParCont"] = newtypeParCont;
  exports["functorParCont"] = functorParCont;
  exports["applyParCont"] = applyParCont;
  exports["applicativeParCont"] = applicativeParCont;
  exports["altParCont"] = altParCont;
  exports["plusParCont"] = plusParCont;
  exports["alternativeParCont"] = alternativeParCont;
  exports["monadParParCont"] = monadParParCont;
})(PS["Control.Parallel.Class"] = PS["Control.Parallel.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];                 
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              return function ($17) {
                  return Control_Parallel_Class.sequential(dictParallel)(Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)(function ($18) {
                      return Control_Parallel_Class.parallel(dictParallel)(f($18));
                  })($17));
              };
          };
      };
  };
  var parTraverse = function (dictParallel) {
      return function (dictTraversable) {
          return function (f) {
              return function ($19) {
                  return Control_Parallel_Class.sequential(dictParallel)(Data_Traversable.traverse(dictTraversable)(dictParallel.Applicative1())(function ($20) {
                      return Control_Parallel_Class.parallel(dictParallel)(f($20));
                  })($19));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var parSequence = function (dictParallel) {
      return function (dictTraversable) {
          return parTraverse(dictParallel)(dictTraversable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var parOneOfMap = function (dictParallel) {
      return function (dictAlternative) {
          return function (dictFoldable) {
              return function (dictFunctor) {
                  return function (f) {
                      return function ($21) {
                          return Control_Parallel_Class.sequential(dictParallel)(Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())(function ($22) {
                              return Control_Parallel_Class.parallel(dictParallel)(f($22));
                          })($21));
                      };
                  };
              };
          };
      };
  };
  var parOneOf = function (dictParallel) {
      return function (dictAlternative) {
          return function (dictFoldable) {
              return function (dictFunctor) {
                  return function ($23) {
                      return Control_Parallel_Class.sequential(dictParallel)(Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())(Control_Parallel_Class.parallel(dictParallel))($23));
                  };
              };
          };
      };
  };
  var parApply = function (dictParallel) {
      return function (mf) {
          return function (ma) {
              return Control_Parallel_Class.sequential(dictParallel)(Control_Apply.apply((dictParallel.Applicative1()).Apply0())(Control_Parallel_Class.parallel(dictParallel)(mf))(Control_Parallel_Class.parallel(dictParallel)(ma)));
          };
      };
  };
  exports["parApply"] = parApply;
  exports["parTraverse"] = parTraverse;
  exports["parTraverse_"] = parTraverse_;
  exports["parSequence"] = parSequence;
  exports["parSequence_"] = parSequence_;
  exports["parOneOf"] = parOneOf;
  exports["parOneOfMap"] = parOneOfMap;
})(PS["Control.Parallel"] = PS["Control.Parallel"] || {});
(function(exports) {
    "use strict";

  // module Data.Function.Uncurried

  exports.mkFn0 = function (fn) {
    return function () {
      return fn({});
    };
  };

  exports.mkFn2 = function (fn) {
    /* jshint maxparams: 2 */
    return function (a, b) {
      return fn(a)(b);
    };
  };

  exports.mkFn3 = function (fn) {
    /* jshint maxparams: 3 */
    return function (a, b, c) {
      return fn(a)(b)(c);
    };
  };

  exports.mkFn4 = function (fn) {
    /* jshint maxparams: 4 */
    return function (a, b, c, d) {
      return fn(a)(b)(c)(d);
    };
  };

  exports.mkFn5 = function (fn) {
    /* jshint maxparams: 5 */
    return function (a, b, c, d, e) {
      return fn(a)(b)(c)(d)(e);
    };
  };

  exports.mkFn6 = function (fn) {
    /* jshint maxparams: 6 */
    return function (a, b, c, d, e, f) {
      return fn(a)(b)(c)(d)(e)(f);
    };
  };

  exports.mkFn7 = function (fn) {
    /* jshint maxparams: 7 */
    return function (a, b, c, d, e, f, g) {
      return fn(a)(b)(c)(d)(e)(f)(g);
    };
  };

  exports.mkFn8 = function (fn) {
    /* jshint maxparams: 8 */
    return function (a, b, c, d, e, f, g, h) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h);
    };
  };

  exports.mkFn9 = function (fn) {
    /* jshint maxparams: 9 */
    return function (a, b, c, d, e, f, g, h, i) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
    };
  };

  exports.mkFn10 = function (fn) {
    /* jshint maxparams: 10 */
    return function (a, b, c, d, e, f, g, h, i, j) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
    };
  };

  exports.runFn0 = function (fn) {
    return fn();
  };

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };

  exports.runFn5 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return fn(a, b, c, d, e);
            };
          };
        };
      };
    };
  };

  exports.runFn6 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return fn(a, b, c, d, e, f);
              };
            };
          };
        };
      };
    };
  };

  exports.runFn7 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return fn(a, b, c, d, e, f, g);
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn8 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return fn(a, b, c, d, e, f, g, h);
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn9 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return function (i) {
                      return fn(a, b, c, d, e, f, g, h, i);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn10 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return function (i) {
                      return function (j) {
                        return fn(a, b, c, d, e, f, g, h, i, j);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];                 
  var runFn1 = function (f) {
      return f;
  };
  var mkFn1 = function (f) {
      return f;
  };
  exports["mkFn1"] = mkFn1;
  exports["runFn1"] = runFn1;
  exports["mkFn0"] = $foreign.mkFn0;
  exports["mkFn2"] = $foreign.mkFn2;
  exports["mkFn3"] = $foreign.mkFn3;
  exports["mkFn4"] = $foreign.mkFn4;
  exports["mkFn5"] = $foreign.mkFn5;
  exports["mkFn6"] = $foreign.mkFn6;
  exports["mkFn7"] = $foreign.mkFn7;
  exports["mkFn8"] = $foreign.mkFn8;
  exports["mkFn9"] = $foreign.mkFn9;
  exports["mkFn10"] = $foreign.mkFn10;
  exports["runFn0"] = $foreign.runFn0;
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn3"] = $foreign.runFn3;
  exports["runFn4"] = $foreign.runFn4;
  exports["runFn5"] = $foreign.runFn5;
  exports["runFn6"] = $foreign.runFn6;
  exports["runFn7"] = $foreign.runFn7;
  exports["runFn8"] = $foreign.runFn8;
  exports["runFn9"] = $foreign.runFn9;
  exports["runFn10"] = $foreign.runFn10;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Seconds = function (x) {
      return x;
  };
  var Minutes = function (x) {
      return x;
  };
  var Milliseconds = function (x) {
      return x;
  };
  var Hours = function (x) {
      return x;
  };
  var Days = function (x) {
      return x;
  };
  var Duration = function (fromDuration, toDuration) {
      this.fromDuration = fromDuration;
      this.toDuration = toDuration;
  };
  var toDuration = function (dict) {
      return dict.toDuration;
  };
  var showSeconds = new Data_Show.Show(function (v) {
      return "(Seconds " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
  });
  var showMinutes = new Data_Show.Show(function (v) {
      return "(Minutes " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
  });
  var showMilliseconds = new Data_Show.Show(function (v) {
      return "(Milliseconds " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
  });
  var showHours = new Data_Show.Show(function (v) {
      return "(Hours " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
  });
  var showDays = new Data_Show.Show(function (v) {
      return "(Days " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
  });
  var semigroupSeconds = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return v + v1;
      };
  });
  var semigroupMinutes = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return v + v1;
      };
  });
  var semigroupMilliseconds = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return v + v1;
      };
  });
  var semigroupHours = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return v + v1;
      };
  });
  var semigroupDays = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return v + v1;
      };
  });
  var ordSeconds = Data_Ord.ordNumber;
  var ordMinutes = Data_Ord.ordNumber;
  var ordMilliseconds = Data_Ord.ordNumber;
  var ordHours = Data_Ord.ordNumber;
  var ordDays = Data_Ord.ordNumber;
  var newtypeSeconds = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Seconds);
  var newtypeMinutes = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Minutes);
  var newtypeMilliseconds = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Milliseconds);
  var newtypeHours = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Hours);
  var newtypeDays = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Days);
  var monoidSeconds = new Data_Monoid.Monoid(function () {
      return semigroupSeconds;
  }, 0.0);
  var monoidMinutes = new Data_Monoid.Monoid(function () {
      return semigroupMinutes;
  }, 0.0);
  var monoidMilliseconds = new Data_Monoid.Monoid(function () {
      return semigroupMilliseconds;
  }, 0.0);
  var monoidHours = new Data_Monoid.Monoid(function () {
      return semigroupHours;
  }, 0.0);
  var monoidDays = new Data_Monoid.Monoid(function () {
      return semigroupDays;
  }, 0.0);
  var fromDuration = function (dict) {
      return dict.fromDuration;
  };
  var negateDuration = function (dictDuration) {
      return function ($56) {
          return toDuration(dictDuration)(Data_Newtype.over(newtypeMilliseconds)(newtypeMilliseconds)(Milliseconds)(Data_Ring.negate(Data_Ring.ringNumber))(fromDuration(dictDuration)($56)));
      };
  };
  var eqSeconds = Data_Eq.eqNumber;
  var eqMinutes = Data_Eq.eqNumber;
  var eqMilliseconds = Data_Eq.eqNumber;
  var eqHours = Data_Eq.eqNumber;
  var eqDays = Data_Eq.eqNumber;
  var durationSeconds = new Duration(Data_Newtype.over(newtypeSeconds)(newtypeMilliseconds)(Seconds)(function (v) {
      return v * 1000.0;
  }), Data_Newtype.over(newtypeMilliseconds)(newtypeSeconds)(Milliseconds)(function (v) {
      return v / 1000.0;
  }));
  var durationMinutes = new Duration(Data_Newtype.over(newtypeMinutes)(newtypeMilliseconds)(Minutes)(function (v) {
      return v * 60000.0;
  }), Data_Newtype.over(newtypeMilliseconds)(newtypeMinutes)(Milliseconds)(function (v) {
      return v / 60000.0;
  }));
  var durationMilliseconds = new Duration(Control_Category.identity(Control_Category.categoryFn), Control_Category.identity(Control_Category.categoryFn));
  var durationHours = new Duration(Data_Newtype.over(newtypeHours)(newtypeMilliseconds)(Hours)(function (v) {
      return v * 3600000.0;
  }), Data_Newtype.over(newtypeMilliseconds)(newtypeHours)(Milliseconds)(function (v) {
      return v / 3600000.0;
  }));
  var durationDays = new Duration(Data_Newtype.over(newtypeDays)(newtypeMilliseconds)(Days)(function (v) {
      return v * 8.64e7;
  }), Data_Newtype.over(newtypeMilliseconds)(newtypeDays)(Milliseconds)(function (v) {
      return v / 8.64e7;
  }));
  var convertDuration = function (dictDuration) {
      return function (dictDuration1) {
          return function ($57) {
              return toDuration(dictDuration1)(fromDuration(dictDuration)($57));
          };
      };
  };
  exports["fromDuration"] = fromDuration;
  exports["toDuration"] = toDuration;
  exports["Milliseconds"] = Milliseconds;
  exports["Seconds"] = Seconds;
  exports["Minutes"] = Minutes;
  exports["Hours"] = Hours;
  exports["Days"] = Days;
  exports["Duration"] = Duration;
  exports["convertDuration"] = convertDuration;
  exports["negateDuration"] = negateDuration;
  exports["newtypeMilliseconds"] = newtypeMilliseconds;
  exports["eqMilliseconds"] = eqMilliseconds;
  exports["ordMilliseconds"] = ordMilliseconds;
  exports["semigroupMilliseconds"] = semigroupMilliseconds;
  exports["monoidMilliseconds"] = monoidMilliseconds;
  exports["showMilliseconds"] = showMilliseconds;
  exports["newtypeSeconds"] = newtypeSeconds;
  exports["eqSeconds"] = eqSeconds;
  exports["ordSeconds"] = ordSeconds;
  exports["semigroupSeconds"] = semigroupSeconds;
  exports["monoidSeconds"] = monoidSeconds;
  exports["showSeconds"] = showSeconds;
  exports["newtypeMinutes"] = newtypeMinutes;
  exports["eqMinutes"] = eqMinutes;
  exports["ordMinutes"] = ordMinutes;
  exports["semigroupMinutes"] = semigroupMinutes;
  exports["monoidMinutes"] = monoidMinutes;
  exports["showMinutes"] = showMinutes;
  exports["newtypeHours"] = newtypeHours;
  exports["eqHours"] = eqHours;
  exports["ordHours"] = ordHours;
  exports["semigroupHours"] = semigroupHours;
  exports["monoidHours"] = monoidHours;
  exports["showHours"] = showHours;
  exports["newtypeDays"] = newtypeDays;
  exports["eqDays"] = eqDays;
  exports["ordDays"] = ordDays;
  exports["semigroupDays"] = semigroupDays;
  exports["monoidDays"] = monoidDays;
  exports["showDays"] = showDays;
  exports["durationMilliseconds"] = durationMilliseconds;
  exports["durationSeconds"] = durationSeconds;
  exports["durationMinutes"] = durationMinutes;
  exports["durationHours"] = durationHours;
  exports["durationDays"] = durationDays;
})(PS["Data.Time.Duration"] = PS["Data.Time.Duration"] || {});
(function(exports) {
    "use strict";

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.name = function (e) {
    return e.name || "Error";
  };

  exports.stackImpl = function (just) {
    return function (nothing) {
      return function (e) {
        return e.stack ? just(e.stack) : nothing;
      };
    };
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];                 
  var $$try = function (action) {
      return $foreign.catchException(function ($0) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Either.Left.create($0));
      })(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
  };
  var $$throw = function ($1) {
      return $foreign.throwException($foreign.error($1));
  };
  var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["stack"] = stack;
  exports["throw"] = $$throw;
  exports["try"] = $$try;
  exports["showError"] = showError;
  exports["error"] = $foreign.error;
  exports["message"] = $foreign.message;
  exports["name"] = $foreign.name;
  exports["throwException"] = $foreign.throwException;
  exports["catchException"] = $foreign.catchException;
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function(exports) {
    "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Unsafe"];
  var Effect = PS["Effect"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Aff"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Unsafe = PS["Effect.Unsafe"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var Fiber = function (x) {
      return x;
  };
  var FFIUtil = function (x) {
      return x;
  };
  var Canceler = function (x) {
      return x;
  };
  var suspendAff = $foreign._fork(false);
  var newtypeCanceler = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Canceler);
  var functorParAff = new Data_Functor.Functor($foreign._parAffMap);
  var functorAff = new Data_Functor.Functor($foreign._map);
  var forkAff = $foreign._fork(true);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff line 395, column 21 - line 397, column 31: " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff line 390, column 20 - line 394, column 3: " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff line 385, column 12 - line 387, column 20: " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign._makeFiber(ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var v = makeFiber(aff)();
          v.run();
          return v;
      };
  };
  var launchAff_ = function ($49) {
      return Data_Functor["void"](Effect.functorEffect)(launchAff($49));
  };
  var launchSuspendedAff = makeFiber;
  var delay = function (v) {
      return $foreign._delay(Data_Either.Right.create, v);
  };
  var bracket = function (acquire) {
      return function (completed) {
          return $foreign.generalBracket(acquire)({
              killed: Data_Function["const"](completed),
              failed: Data_Function["const"](completed),
              completed: Data_Function["const"](completed)
          });
      };
  };
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, $foreign._parAffApply);
  var semigroupParAff = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyParAff)(Data_Semigroup.append(dictSemigroup)));
  };
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign._bind);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign._pure);
  var cancelWith = function (aff) {
      return function (v) {
          return $foreign.generalBracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))({
              killed: function (e) {
                  return function (v1) {
                      return v(e);
                  };
              },
              failed: Data_Function["const"](Control_Applicative.pure(applicativeAff)),
              completed: Data_Function["const"](Control_Applicative.pure(applicativeAff))
          })(Data_Function["const"](aff));
      };
  };
  var $$finally = function (fin) {
      return function (a) {
          return bracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(Data_Function["const"](fin))(Data_Function["const"](a));
      };
  };
  var invincible = function (a) {
      return bracket(a)(Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit)))(Control_Applicative.pure(applicativeAff));
  };
  var lazyAff = new Control_Lazy.Lazy(function (f) {
      return Control_Bind.bind(bindAff)(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(f);
  });
  var semigroupAff = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyAff)(Data_Semigroup.append(dictSemigroup)));
  };
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign._liftEffect);
  var effectCanceler = function ($50) {
      return Canceler(Data_Function["const"](Effect_Class.liftEffect(monadEffectAff)($50)));
  };
  var joinFiber = function (v) {
      return $foreign.makeAff(function (k) {
          return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
      });
  };
  var functorFiber = new Data_Functor.Functor(function (f) {
      return function (t) {
          return Effect_Unsafe.unsafePerformEffect(makeFiber(Data_Functor.map(functorAff)(f)(joinFiber(t))));
      };
  });
  var applyFiber = new Control_Apply.Apply(function () {
      return functorFiber;
  }, function (t1) {
      return function (t2) {
          return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Apply.apply(applyAff)(joinFiber(t1))(joinFiber(t2))));
      };
  });
  var applicativeFiber = new Control_Applicative.Applicative(function () {
      return applyFiber;
  }, function (a) {
      return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Applicative.pure(applicativeAff)(a)));
  });
  var killFiber = function (e) {
      return function (v) {
          return Control_Bind.bind(bindAff)(Effect_Class.liftEffect(monadEffectAff)(v.isSuspended))(function (v1) {
              if (v1) {
                  return Effect_Class.liftEffect(monadEffectAff)(Data_Functor["void"](Effect.functorEffect)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))));
              };
              return $foreign.makeAff(function (k) {
                  return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.kill(e, k));
              });
          });
      };
  };
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign._throwError);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign._catchError);
  var attempt = Control_Monad_Error_Class["try"](monadErrorAff);
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)(function ($51) {
              return Effect_Class.liftEffect(monadEffectAff)(k($51));
          })(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var runAff_ = function (k) {
      return function (aff) {
          return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
      };
  };
  var runSuspendedAff = function (k) {
      return function (aff) {
          return launchSuspendedAff(Control_Bind.bindFlipped(bindAff)(function ($52) {
              return Effect_Class.liftEffect(monadEffectAff)(k($52));
          })(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var parallelAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, Unsafe_Coerce.unsafeCoerce, $foreign._sequential);
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, function ($53) {
      return Control_Parallel_Class.parallel(parallelAff)(Control_Applicative.pure(applicativeAff)($53));
  });
  var monoidParAff = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupParAff(dictMonoid.Semigroup0());
      }, Control_Applicative.pure(applicativeParAff)(Data_Monoid.mempty(dictMonoid)));
  };
  var semigroupCanceler = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (err) {
              return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ v(err), v1(err) ]);
          };
      };
  });
  var supervise = function (aff) {
      var killError = Effect_Exception.error("[Aff] Child fiber outlived parent");
      var killAll = function (err) {
          return function (sup) {
              return $foreign.makeAff(function (k) {
                  return $foreign._killAll(err, sup.supervisor, k(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit)));
              });
          };
      };
      var acquire = function __do() {
          var v = $foreign._makeSupervisedFiber(ffiUtil, aff)();
          v.fiber.run();
          return v;
      };
      return $foreign.generalBracket(Effect_Class.liftEffect(monadEffectAff)(acquire))({
          killed: function (err) {
              return function (sup) {
                  return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ killFiber(err)(sup.fiber), killAll(err)(sup) ]);
              };
          },
          failed: Data_Function["const"](killAll(killError)),
          completed: Data_Function["const"](killAll(killError))
      })(function ($54) {
          return joinFiber((function (v) {
              return v.fiber;
          })($54));
      });
  };
  var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadAff;
  }, function (k) {
      var go = function (a) {
          return Control_Bind.bind(bindAff)(k(a))(function (v) {
              if (v instanceof Control_Monad_Rec_Class.Done) {
                  return Control_Applicative.pure(applicativeAff)(v.value0);
              };
              if (v instanceof Control_Monad_Rec_Class.Loop) {
                  return go(v.value0);
              };
              throw new Error("Failed pattern match at Effect.Aff line 99, column 7 - line 101, column 22: " + [ v.constructor.name ]);
          });
      };
      return go;
  });
  var monoidAff = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupAff(dictMonoid.Semigroup0());
      }, Control_Applicative.pure(applicativeAff)(Data_Monoid.mempty(dictMonoid)));
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  var monoidCanceler = new Data_Monoid.Monoid(function () {
      return semigroupCanceler;
  }, nonCanceler);
  var never = $foreign.makeAff(function (v) {
      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Monoid.mempty(monoidCanceler));
  });
  var apathize = function ($55) {
      return Data_Functor.map(functorAff)(Data_Function["const"](Data_Unit.unit))(attempt($55));
  };
  var altParAff = new Control_Alt.Alt(function () {
      return functorParAff;
  }, $foreign._parAffAlt);
  var altAff = new Control_Alt.Alt(function () {
      return functorAff;
  }, function (a1) {
      return function (a2) {
          return Control_Monad_Error_Class.catchError(monadErrorAff)(a1)(Data_Function["const"](a2));
      };
  });
  var plusAff = new Control_Plus.Plus(function () {
      return altAff;
  }, Control_Monad_Error_Class.throwError(monadThrowAff)(Effect_Exception.error("Always fails")));
  var plusParAff = new Control_Plus.Plus(function () {
      return altParAff;
  }, Control_Parallel_Class.parallel(parallelAff)(Control_Plus.empty(plusAff)));
  var alternativeParAff = new Control_Alternative.Alternative(function () {
      return applicativeParAff;
  }, function () {
      return plusParAff;
  });
  exports["Canceler"] = Canceler;
  exports["launchAff"] = launchAff;
  exports["launchAff_"] = launchAff_;
  exports["launchSuspendedAff"] = launchSuspendedAff;
  exports["runAff"] = runAff;
  exports["runAff_"] = runAff_;
  exports["runSuspendedAff"] = runSuspendedAff;
  exports["forkAff"] = forkAff;
  exports["suspendAff"] = suspendAff;
  exports["supervise"] = supervise;
  exports["attempt"] = attempt;
  exports["apathize"] = apathize;
  exports["delay"] = delay;
  exports["never"] = never;
  exports["finally"] = $$finally;
  exports["invincible"] = invincible;
  exports["killFiber"] = killFiber;
  exports["joinFiber"] = joinFiber;
  exports["cancelWith"] = cancelWith;
  exports["bracket"] = bracket;
  exports["nonCanceler"] = nonCanceler;
  exports["effectCanceler"] = effectCanceler;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["semigroupAff"] = semigroupAff;
  exports["monoidAff"] = monoidAff;
  exports["altAff"] = altAff;
  exports["plusAff"] = plusAff;
  exports["monadRecAff"] = monadRecAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["lazyAff"] = lazyAff;
  exports["functorParAff"] = functorParAff;
  exports["applyParAff"] = applyParAff;
  exports["applicativeParAff"] = applicativeParAff;
  exports["semigroupParAff"] = semigroupParAff;
  exports["monoidParAff"] = monoidParAff;
  exports["altParAff"] = altParAff;
  exports["plusParAff"] = plusParAff;
  exports["alternativeParAff"] = alternativeParAff;
  exports["parallelAff"] = parallelAff;
  exports["functorFiber"] = functorFiber;
  exports["applyFiber"] = applyFiber;
  exports["applicativeFiber"] = applicativeFiber;
  exports["newtypeCanceler"] = newtypeCanceler;
  exports["semigroupCanceler"] = semigroupCanceler;
  exports["monoidCanceler"] = monoidCanceler;
  exports["makeAff"] = $foreign.makeAff;
  exports["generalBracket"] = $foreign.generalBracket;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
    "use strict";

  var createUTC = function (y, mo, d, h, m, s, ms) {
    var date = new Date(Date.UTC(y, mo, d, h, m, s, ms));
    if (y >= 0 && y < 100) {
      date.setUTCFullYear(y);
    }
    return date.getTime();
  };

  exports.calcDiff = function (rec1, rec2) {
    var msUTC1 = createUTC(rec1.year, rec1.month - 1, rec1.day, rec1.hour, rec1.minute, rec1.second, rec1.millisecond);
    var msUTC2 = createUTC(rec2.year, rec2.month - 1, rec2.day, rec2.hour, rec2.minute, rec2.second, rec2.millisecond);
    return msUTC1 - msUTC2;
  };

  exports.adjustImpl = function (just) {
    return function (nothing) {
      return function (offset) {
        return function (rec) {
          var msUTC = createUTC(rec.year, rec.month - 1, rec.day, rec.hour, rec.minute, rec.second, rec.millisecond);
          var dt = new Date(msUTC + offset);
          return isNaN(dt.getTime()) ? nothing : just({
            year: dt.getUTCFullYear(),
            month: dt.getUTCMonth() + 1,
            day: dt.getUTCDate(),
            hour: dt.getUTCHours(),
            minute: dt.getUTCMinutes(),
            second: dt.getUTCSeconds(),
            millisecond: dt.getUTCMilliseconds()
          });
        };
      };
    };
  };
})(PS["Data.DateTime"] = PS["Data.DateTime"] || {});
(function(exports) {
    "use strict";

  var createDate = function (y, m, d) {
    var date = new Date(Date.UTC(y, m, d));
    if (y >= 0 && y < 100) {
      date.setUTCFullYear(y);
    }
    return date;
  };

  exports.canonicalDateImpl = function (ctor, y, m, d) {
    var date = createDate(y, m - 1, d);
    return ctor(date.getUTCFullYear())(date.getUTCMonth() + 1)(date.getUTCDate());
  };

  exports.calcWeekday = function (y, m, d) {
    return createDate(y, m - 1, d).getUTCDay();
  };

  exports.calcDiff = function (y1, m1, d1, y2, m2, d2) {
    var dt1 = createDate(y1, m1 - 1, d1);
    var dt2 = createDate(y2, m2 - 1, d2);
    return dt1.getTime() - dt2.getTime();
  };
})(PS["Data.Date"] = PS["Data.Date"] || {});
(function(exports) {
    "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Enum"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Cardinality = function (x) {
      return x;
  };
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  };
  var upFromIncluding = function (dictEnum) {
      return function (dictUnfoldable1) {
          return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(succ(dictEnum)));
      };
  };
  var showCardinality = new Data_Show.Show(function (v) {
      return "(Cardinality " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var pred = function (dict) {
      return dict.pred;
  };
  var ordCardinality = Data_Ord.ordInt;
  var newtypeCardinality = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Cardinality);
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $51 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($51) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum line 158, column 33 - line 160, column 62: " + [ v.constructor.name ]);
              };
          };
      };
  };
  var eqCardinality = Data_Eq.eqInt;
  var enumUnit = new Enum(function () {
      return Data_Ord.ordUnit;
  }, Data_Function["const"](Data_Maybe.Nothing.value), Data_Function["const"](Data_Maybe.Nothing.value));
  var enumTuple = function (dictEnum) {
      return function (dictBoundedEnum) {
          return new Enum(function () {
              return Data_Tuple.ordTuple(dictEnum.Ord0())((dictBoundedEnum.Enum1()).Ord0());
          }, function (v) {
              return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.top(dictBoundedEnum.Bounded0())))(pred(dictEnum)(v.value0)))(function ($86) {
                  return Data_Maybe.Just.create(Data_Tuple.Tuple.create(v.value0)($86));
              })(pred(dictBoundedEnum.Enum1())(v.value1));
          }, function (v) {
              return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.bottom(dictBoundedEnum.Bounded0())))(succ(dictEnum)(v.value0)))(function ($87) {
                  return Data_Maybe.Just.create(Data_Tuple.Tuple.create(v.value0)($87));
              })(succ(dictBoundedEnum.Enum1())(v.value1));
          });
      };
  };
  var enumOrdering = new Enum(function () {
      return Data_Ord.ordOrdering;
  }, function (v) {
      if (v instanceof Data_Ordering.LT) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just(Data_Ordering.LT.value);
      };
      if (v instanceof Data_Ordering.GT) {
          return new Data_Maybe.Just(Data_Ordering.EQ.value);
      };
      throw new Error("Failed pattern match at Data.Enum line 72, column 1 - line 72, column 39: " + [ v.constructor.name ]);
  }, function (v) {
      if (v instanceof Data_Ordering.LT) {
          return new Data_Maybe.Just(Data_Ordering.EQ.value);
      };
      if (v instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just(Data_Ordering.GT.value);
      };
      if (v instanceof Data_Ordering.GT) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Enum line 72, column 1 - line 72, column 39: " + [ v.constructor.name ]);
  });
  var enumMaybe = function (dictBoundedEnum) {
      return new Enum(function () {
          return Data_Maybe.ordMaybe((dictBoundedEnum.Enum1()).Ord0());
      }, function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          if (v instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(pred(dictBoundedEnum.Enum1())(v.value0));
          };
          throw new Error("Failed pattern match at Data.Enum line 80, column 1 - line 80, column 54: " + [ v.constructor.name ]);
      }, function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return new Data_Maybe.Just(new Data_Maybe.Just(Data_Bounded.bottom(dictBoundedEnum.Bounded0())));
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(succ(dictBoundedEnum.Enum1())(v.value0));
          };
          throw new Error("Failed pattern match at Data.Enum line 80, column 1 - line 80, column 54: " + [ v.constructor.name ]);
      });
  };
  var enumInt = new Enum(function () {
      return Data_Ord.ordInt;
  }, function (n) {
      var $64 = n > Data_Bounded.bottom(Data_Bounded.boundedInt);
      if ($64) {
          return new Data_Maybe.Just(n - 1 | 0);
      };
      return Data_Maybe.Nothing.value;
  }, function (n) {
      var $65 = n < Data_Bounded.top(Data_Bounded.boundedInt);
      if ($65) {
          return new Data_Maybe.Just(n + 1 | 0);
      };
      return Data_Maybe.Nothing.value;
  });
  var enumFromTo = function (dictEnum) {
      return function (dictUnfoldable1) {
          var go = function (step) {
              return function (op) {
                  return function (to) {
                      return function (a) {
                          return new Data_Tuple.Tuple(a, Control_Bind.bind(Data_Maybe.bindMaybe)(step(a))(function (a$prime) {
                              return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(op(a$prime)(to)))(a$prime);
                          }));
                      };
                  };
              };
          };
          return function (v) {
              return function (v1) {
                  if (Data_Eq.eq((dictEnum.Ord0()).Eq0())(v)(v1)) {
                      return Data_Unfoldable1.singleton(dictUnfoldable1)(v);
                  };
                  if (Data_Ord.lessThan(dictEnum.Ord0())(v)(v1)) {
                      return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(succ(dictEnum))(Data_Ord.lessThanOrEq(dictEnum.Ord0()))(v1))(v);
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(pred(dictEnum))(Data_Ord.greaterThanOrEq(dictEnum.Ord0()))(v1))(v);
                  };
                  throw new Error("Failed pattern match at Data.Enum line 183, column 14 - line 187, column 51: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var enumFromThenTo = function (dictUnfoldable) {
      return function (dictFunctor) {
          return function (dictBoundedEnum) {
              var go = function (step) {
                  return function (to) {
                      return function (e) {
                          if (e <= to) {
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(e, e + step | 0));
                          };
                          if (Data_Boolean.otherwise) {
                              return Data_Maybe.Nothing.value;
                          };
                          throw new Error("Failed pattern match at Data.Enum line 214, column 5 - line 216, column 28: " + [ step.constructor.name, to.constructor.name, e.constructor.name ]);
                      };
                  };
              };
              return function (a) {
                  return function (b) {
                      return function (c) {
                          var c$prime = fromEnum(dictBoundedEnum)(c);
                          var b$prime = fromEnum(dictBoundedEnum)(b);
                          var a$prime = fromEnum(dictBoundedEnum)(a);
                          return Data_Functor.map(dictFunctor)(function ($88) {
                              return Data_Maybe.fromJust()(toEnum(dictBoundedEnum)($88));
                          })(Data_Unfoldable.unfoldr(dictUnfoldable)(go(b$prime - a$prime | 0)(c$prime))(a$prime));
                      };
                  };
              };
          };
      };
  };
  var enumEither = function (dictBoundedEnum) {
      return function (dictBoundedEnum1) {
          return new Enum(function () {
              return Data_Either.ordEither((dictBoundedEnum.Enum1()).Ord0())((dictBoundedEnum1.Enum1()).Ord0());
          }, function (v) {
              if (v instanceof Data_Either.Left) {
                  return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($89) {
                      return Data_Maybe.Just.create(Data_Either.Left.create($89));
                  })(pred(dictBoundedEnum.Enum1())(v.value0));
              };
              if (v instanceof Data_Either.Right) {
                  return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Left(Data_Bounded.top(dictBoundedEnum.Bounded0()))))(function ($90) {
                      return Data_Maybe.Just.create(Data_Either.Right.create($90));
                  })(pred(dictBoundedEnum1.Enum1())(v.value0));
              };
              throw new Error("Failed pattern match at Data.Enum line 86, column 1 - line 86, column 75: " + [ v.constructor.name ]);
          }, function (v) {
              if (v instanceof Data_Either.Left) {
                  return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Right(Data_Bounded.bottom(dictBoundedEnum1.Bounded0()))))(function ($91) {
                      return Data_Maybe.Just.create(Data_Either.Left.create($91));
                  })(succ(dictBoundedEnum.Enum1())(v.value0));
              };
              if (v instanceof Data_Either.Right) {
                  return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($92) {
                      return Data_Maybe.Just.create(Data_Either.Right.create($92));
                  })(succ(dictBoundedEnum1.Enum1())(v.value0));
              };
              throw new Error("Failed pattern match at Data.Enum line 86, column 1 - line 86, column 75: " + [ v.constructor.name ]);
          });
      };
  };
  var enumBoolean = new Enum(function () {
      return Data_Ord.ordBoolean;
  }, function (v) {
      if (v) {
          return new Data_Maybe.Just(false);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      if (!v) {
          return new Data_Maybe.Just(true);
      };
      return Data_Maybe.Nothing.value;
  });
  var downFromIncluding = function (dictEnum) {
      return function (dictUnfoldable1) {
          return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(pred(dictEnum)));
      };
  };
  var diag = function (a) {
      return new Data_Tuple.Tuple(a, a);
  };
  var downFrom = function (dictEnum) {
      return function (dictUnfoldable) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)(function ($93) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(diag)(pred(dictEnum)($93));
          });
      };
  };
  var upFrom = function (dictEnum) {
      return function (dictUnfoldable) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)(function ($94) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(diag)(succ(dictEnum)($94));
          });
      };
  };
  var defaultToEnum = function (dictBounded) {
      return function (dictEnum) {
          return function (n) {
              if (n < 0) {
                  return Data_Maybe.Nothing.value;
              };
              if (n === 0) {
                  return new Data_Maybe.Just(Data_Bounded.bottom(dictBounded));
              };
              if (Data_Boolean.otherwise) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(defaultToEnum(dictBounded)(dictEnum)(n - 1 | 0))(succ(dictEnum));
              };
              throw new Error("Failed pattern match at Data.Enum line 281, column 1 - line 281, column 65: " + [ n.constructor.name ]);
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var defaultFromEnum = function (dictEnum) {
      return function ($95) {
          return Data_Maybe.maybe(0)(function (prd) {
              return defaultFromEnum(dictEnum)(prd) + 1 | 0;
          })(pred(dictEnum)($95));
      };
  };
  var defaultCardinality = function (dictBounded) {
      return function (dictEnum) {
          var defaultCardinality$prime = function (i) {
              return function ($96) {
                  return Data_Maybe.maybe(i)(defaultCardinality$prime(i + 1 | 0))(succ(dictEnum)($96));
              };
          };
          return Cardinality(defaultCardinality$prime(1)(Data_Bounded.bottom(dictBounded)));
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var cardinality = function (dict) {
      return dict.cardinality;
  };
  var boundedEnumUnit = new BoundedEnum(function () {
      return Data_Bounded.boundedUnit;
  }, function () {
      return enumUnit;
  }, 1, Data_Function["const"](0), function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Data_Unit.unit);
      };
      return Data_Maybe.Nothing.value;
  });
  var boundedEnumOrdering = new BoundedEnum(function () {
      return Data_Bounded.boundedOrdering;
  }, function () {
      return enumOrdering;
  }, 3, function (v) {
      if (v instanceof Data_Ordering.LT) {
          return 0;
      };
      if (v instanceof Data_Ordering.EQ) {
          return 1;
      };
      if (v instanceof Data_Ordering.GT) {
          return 2;
      };
      throw new Error("Failed pattern match at Data.Enum line 137, column 1 - line 137, column 53: " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Data_Ordering.LT.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(Data_Ordering.EQ.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(Data_Ordering.GT.value);
      };
      return Data_Maybe.Nothing.value;
  });
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  var boundedEnumBoolean = new BoundedEnum(function () {
      return Data_Bounded.boundedBoolean;
  }, function () {
      return enumBoolean;
  }, 2, function (v) {
      if (!v) {
          return 0;
      };
      if (v) {
          return 1;
      };
      throw new Error("Failed pattern match at Data.Enum line 118, column 1 - line 118, column 51: " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(false);
      };
      if (v === 1) {
          return new Data_Maybe.Just(true);
      };
      return Data_Maybe.Nothing.value;
  });
  exports["Enum"] = Enum;
  exports["succ"] = succ;
  exports["pred"] = pred;
  exports["BoundedEnum"] = BoundedEnum;
  exports["cardinality"] = cardinality;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["Cardinality"] = Cardinality;
  exports["enumFromTo"] = enumFromTo;
  exports["enumFromThenTo"] = enumFromThenTo;
  exports["upFrom"] = upFrom;
  exports["upFromIncluding"] = upFromIncluding;
  exports["downFrom"] = downFrom;
  exports["downFromIncluding"] = downFromIncluding;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
  exports["defaultCardinality"] = defaultCardinality;
  exports["defaultToEnum"] = defaultToEnum;
  exports["defaultFromEnum"] = defaultFromEnum;
  exports["enumBoolean"] = enumBoolean;
  exports["enumInt"] = enumInt;
  exports["enumChar"] = enumChar;
  exports["enumUnit"] = enumUnit;
  exports["enumOrdering"] = enumOrdering;
  exports["enumMaybe"] = enumMaybe;
  exports["enumEither"] = enumEither;
  exports["enumTuple"] = enumTuple;
  exports["boundedEnumBoolean"] = boundedEnumBoolean;
  exports["boundedEnumChar"] = boundedEnumChar;
  exports["boundedEnumUnit"] = boundedEnumUnit;
  exports["boundedEnumOrdering"] = boundedEnumOrdering;
  exports["newtypeCardinality"] = newtypeCardinality;
  exports["eqCardinality"] = eqCardinality;
  exports["ordCardinality"] = ordCardinality;
  exports["showCardinality"] = showCardinality;
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Year = function (x) {
      return x;
  };
  var Monday = (function () {
      function Monday() {

      };
      Monday.value = new Monday();
      return Monday;
  })();
  var Tuesday = (function () {
      function Tuesday() {

      };
      Tuesday.value = new Tuesday();
      return Tuesday;
  })();
  var Wednesday = (function () {
      function Wednesday() {

      };
      Wednesday.value = new Wednesday();
      return Wednesday;
  })();
  var Thursday = (function () {
      function Thursday() {

      };
      Thursday.value = new Thursday();
      return Thursday;
  })();
  var Friday = (function () {
      function Friday() {

      };
      Friday.value = new Friday();
      return Friday;
  })();
  var Saturday = (function () {
      function Saturday() {

      };
      Saturday.value = new Saturday();
      return Saturday;
  })();
  var Sunday = (function () {
      function Sunday() {

      };
      Sunday.value = new Sunday();
      return Sunday;
  })();
  var January = (function () {
      function January() {

      };
      January.value = new January();
      return January;
  })();
  var February = (function () {
      function February() {

      };
      February.value = new February();
      return February;
  })();
  var March = (function () {
      function March() {

      };
      March.value = new March();
      return March;
  })();
  var April = (function () {
      function April() {

      };
      April.value = new April();
      return April;
  })();
  var May = (function () {
      function May() {

      };
      May.value = new May();
      return May;
  })();
  var June = (function () {
      function June() {

      };
      June.value = new June();
      return June;
  })();
  var July = (function () {
      function July() {

      };
      July.value = new July();
      return July;
  })();
  var August = (function () {
      function August() {

      };
      August.value = new August();
      return August;
  })();
  var September = (function () {
      function September() {

      };
      September.value = new September();
      return September;
  })();
  var October = (function () {
      function October() {

      };
      October.value = new October();
      return October;
  })();
  var November = (function () {
      function November() {

      };
      November.value = new November();
      return November;
  })();
  var December = (function () {
      function December() {

      };
      December.value = new December();
      return December;
  })();
  var Day = function (x) {
      return x;
  };
  var showYear = new Data_Show.Show(function (v) {
      return "(Year " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var showWeekday = new Data_Show.Show(function (v) {
      if (v instanceof Monday) {
          return "Monday";
      };
      if (v instanceof Tuesday) {
          return "Tuesday";
      };
      if (v instanceof Wednesday) {
          return "Wednesday";
      };
      if (v instanceof Thursday) {
          return "Thursday";
      };
      if (v instanceof Friday) {
          return "Friday";
      };
      if (v instanceof Saturday) {
          return "Saturday";
      };
      if (v instanceof Sunday) {
          return "Sunday";
      };
      throw new Error("Failed pattern match at Data.Date.Component line 184, column 1 - line 184, column 37: " + [ v.constructor.name ]);
  });
  var showMonth = new Data_Show.Show(function (v) {
      if (v instanceof January) {
          return "January";
      };
      if (v instanceof February) {
          return "February";
      };
      if (v instanceof March) {
          return "March";
      };
      if (v instanceof April) {
          return "April";
      };
      if (v instanceof May) {
          return "May";
      };
      if (v instanceof June) {
          return "June";
      };
      if (v instanceof July) {
          return "July";
      };
      if (v instanceof August) {
          return "August";
      };
      if (v instanceof September) {
          return "September";
      };
      if (v instanceof October) {
          return "October";
      };
      if (v instanceof November) {
          return "November";
      };
      if (v instanceof December) {
          return "December";
      };
      throw new Error("Failed pattern match at Data.Date.Component line 101, column 1 - line 101, column 33: " + [ v.constructor.name ]);
  });
  var showDay = new Data_Show.Show(function (v) {
      return "(Day " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var ordYear = Data_Ord.ordInt;
  var ordDay = Data_Ord.ordInt;
  var eqYear = Data_Eq.eqInt;
  var eqWeekday = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Monday && y instanceof Monday) {
              return true;
          };
          if (x instanceof Tuesday && y instanceof Tuesday) {
              return true;
          };
          if (x instanceof Wednesday && y instanceof Wednesday) {
              return true;
          };
          if (x instanceof Thursday && y instanceof Thursday) {
              return true;
          };
          if (x instanceof Friday && y instanceof Friday) {
              return true;
          };
          if (x instanceof Saturday && y instanceof Saturday) {
              return true;
          };
          if (x instanceof Sunday && y instanceof Sunday) {
              return true;
          };
          return false;
      };
  });
  var ordWeekday = new Data_Ord.Ord(function () {
      return eqWeekday;
  }, function (x) {
      return function (y) {
          if (x instanceof Monday && y instanceof Monday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Monday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Monday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Tuesday && y instanceof Tuesday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Tuesday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Tuesday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Wednesday && y instanceof Wednesday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Wednesday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Wednesday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Thursday && y instanceof Thursday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Thursday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Thursday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Friday && y instanceof Friday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Friday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Friday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Saturday && y instanceof Saturday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Saturday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Saturday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Sunday && y instanceof Sunday) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Date.Component line 154, column 8 - line 154, column 42: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var eqMonth = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof January && y instanceof January) {
              return true;
          };
          if (x instanceof February && y instanceof February) {
              return true;
          };
          if (x instanceof March && y instanceof March) {
              return true;
          };
          if (x instanceof April && y instanceof April) {
              return true;
          };
          if (x instanceof May && y instanceof May) {
              return true;
          };
          if (x instanceof June && y instanceof June) {
              return true;
          };
          if (x instanceof July && y instanceof July) {
              return true;
          };
          if (x instanceof August && y instanceof August) {
              return true;
          };
          if (x instanceof September && y instanceof September) {
              return true;
          };
          if (x instanceof October && y instanceof October) {
              return true;
          };
          if (x instanceof November && y instanceof November) {
              return true;
          };
          if (x instanceof December && y instanceof December) {
              return true;
          };
          return false;
      };
  });
  var ordMonth = new Data_Ord.Ord(function () {
      return eqMonth;
  }, function (x) {
      return function (y) {
          if (x instanceof January && y instanceof January) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof January) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof January) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof February && y instanceof February) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof February) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof February) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof March && y instanceof March) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof March) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof March) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof April && y instanceof April) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof April) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof April) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof May && y instanceof May) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof May) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof May) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof June && y instanceof June) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof June) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof June) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof July && y instanceof July) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof July) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof July) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof August && y instanceof August) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof August) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof August) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof September && y instanceof September) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof September) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof September) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof October && y instanceof October) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof October) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof October) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof November && y instanceof November) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof November) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof November) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof December && y instanceof December) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Date.Component line 61, column 8 - line 61, column 38: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var eqDay = Data_Eq.eqInt;
  var boundedYear = new Data_Bounded.Bounded(function () {
      return ordYear;
  }, -271820 | 0, 275759);
  var boundedWeekday = new Data_Bounded.Bounded(function () {
      return ordWeekday;
  }, Monday.value, Sunday.value);
  var boundedMonth = new Data_Bounded.Bounded(function () {
      return ordMonth;
  }, January.value, December.value);
  var boundedEnumYear = new Data_Enum.BoundedEnum(function () {
      return boundedYear;
  }, function () {
      return enumYear;
  }, 547580, function (v) {
      return v;
  }, function (n) {
      if (n >= (-271821 | 0) && n <= 275759) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Date.Component line 35, column 1 - line 35, column 45: " + [ n.constructor.name ]);
  });
  var enumYear = new Data_Enum.Enum(function () {
      return ordYear;
  }, function ($46) {
      return Data_Enum.toEnum(boundedEnumYear)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumYear)($46)));
  }, function ($47) {
      return Data_Enum.toEnum(boundedEnumYear)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumYear)($47)));
  });
  var boundedEnumWeekday = new Data_Enum.BoundedEnum(function () {
      return boundedWeekday;
  }, function () {
      return enumWeekday;
  }, 7, function (v) {
      if (v instanceof Monday) {
          return 1;
      };
      if (v instanceof Tuesday) {
          return 2;
      };
      if (v instanceof Wednesday) {
          return 3;
      };
      if (v instanceof Thursday) {
          return 4;
      };
      if (v instanceof Friday) {
          return 5;
      };
      if (v instanceof Saturday) {
          return 6;
      };
      if (v instanceof Sunday) {
          return 7;
      };
      throw new Error("Failed pattern match at Data.Date.Component line 175, column 14 - line 184, column 1: " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 1) {
          return new Data_Maybe.Just(Monday.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(Tuesday.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(Wednesday.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(Thursday.value);
      };
      if (v === 5) {
          return new Data_Maybe.Just(Friday.value);
      };
      if (v === 6) {
          return new Data_Maybe.Just(Saturday.value);
      };
      if (v === 7) {
          return new Data_Maybe.Just(Sunday.value);
      };
      return Data_Maybe.Nothing.value;
  });
  var enumWeekday = new Data_Enum.Enum(function () {
      return ordWeekday;
  }, function ($48) {
      return Data_Enum.toEnum(boundedEnumWeekday)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumWeekday)($48)));
  }, function ($49) {
      return Data_Enum.toEnum(boundedEnumWeekday)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumWeekday)($49)));
  });
  var boundedEnumMonth = new Data_Enum.BoundedEnum(function () {
      return boundedMonth;
  }, function () {
      return enumMonth;
  }, 12, function (v) {
      if (v instanceof January) {
          return 1;
      };
      if (v instanceof February) {
          return 2;
      };
      if (v instanceof March) {
          return 3;
      };
      if (v instanceof April) {
          return 4;
      };
      if (v instanceof May) {
          return 5;
      };
      if (v instanceof June) {
          return 6;
      };
      if (v instanceof July) {
          return 7;
      };
      if (v instanceof August) {
          return 8;
      };
      if (v instanceof September) {
          return 9;
      };
      if (v instanceof October) {
          return 10;
      };
      if (v instanceof November) {
          return 11;
      };
      if (v instanceof December) {
          return 12;
      };
      throw new Error("Failed pattern match at Data.Date.Component line 87, column 14 - line 101, column 1: " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 1) {
          return new Data_Maybe.Just(January.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(February.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(March.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(April.value);
      };
      if (v === 5) {
          return new Data_Maybe.Just(May.value);
      };
      if (v === 6) {
          return new Data_Maybe.Just(June.value);
      };
      if (v === 7) {
          return new Data_Maybe.Just(July.value);
      };
      if (v === 8) {
          return new Data_Maybe.Just(August.value);
      };
      if (v === 9) {
          return new Data_Maybe.Just(September.value);
      };
      if (v === 10) {
          return new Data_Maybe.Just(October.value);
      };
      if (v === 11) {
          return new Data_Maybe.Just(November.value);
      };
      if (v === 12) {
          return new Data_Maybe.Just(December.value);
      };
      return Data_Maybe.Nothing.value;
  });
  var enumMonth = new Data_Enum.Enum(function () {
      return ordMonth;
  }, function ($50) {
      return Data_Enum.toEnum(boundedEnumMonth)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMonth)($50)));
  }, function ($51) {
      return Data_Enum.toEnum(boundedEnumMonth)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMonth)($51)));
  });
  var boundedDay = new Data_Bounded.Bounded(function () {
      return ordDay;
  }, 1, 31);
  var boundedEnumDay = new Data_Enum.BoundedEnum(function () {
      return boundedDay;
  }, function () {
      return enumDay;
  }, 31, function (v) {
      return v;
  }, function (n) {
      if (n >= 1 && n <= 31) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Date.Component line 133, column 1 - line 133, column 43: " + [ n.constructor.name ]);
  });
  var enumDay = new Data_Enum.Enum(function () {
      return ordDay;
  }, function ($52) {
      return Data_Enum.toEnum(boundedEnumDay)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumDay)($52)));
  }, function ($53) {
      return Data_Enum.toEnum(boundedEnumDay)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumDay)($53)));
  });
  exports["January"] = January;
  exports["February"] = February;
  exports["March"] = March;
  exports["April"] = April;
  exports["May"] = May;
  exports["June"] = June;
  exports["July"] = July;
  exports["August"] = August;
  exports["September"] = September;
  exports["October"] = October;
  exports["November"] = November;
  exports["December"] = December;
  exports["Monday"] = Monday;
  exports["Tuesday"] = Tuesday;
  exports["Wednesday"] = Wednesday;
  exports["Thursday"] = Thursday;
  exports["Friday"] = Friday;
  exports["Saturday"] = Saturday;
  exports["Sunday"] = Sunday;
  exports["eqYear"] = eqYear;
  exports["ordYear"] = ordYear;
  exports["boundedYear"] = boundedYear;
  exports["enumYear"] = enumYear;
  exports["boundedEnumYear"] = boundedEnumYear;
  exports["showYear"] = showYear;
  exports["eqMonth"] = eqMonth;
  exports["ordMonth"] = ordMonth;
  exports["boundedMonth"] = boundedMonth;
  exports["enumMonth"] = enumMonth;
  exports["boundedEnumMonth"] = boundedEnumMonth;
  exports["showMonth"] = showMonth;
  exports["eqDay"] = eqDay;
  exports["ordDay"] = ordDay;
  exports["boundedDay"] = boundedDay;
  exports["enumDay"] = enumDay;
  exports["boundedEnumDay"] = boundedEnumDay;
  exports["showDay"] = showDay;
  exports["eqWeekday"] = eqWeekday;
  exports["ordWeekday"] = ordWeekday;
  exports["boundedWeekday"] = boundedWeekday;
  exports["enumWeekday"] = enumWeekday;
  exports["boundedEnumWeekday"] = boundedEnumWeekday;
  exports["showWeekday"] = showWeekday;
})(PS["Data.Date.Component"] = PS["Data.Date.Component"] || {});
(function(exports) {
    "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };

  exports.toStringAs = function (radix) {
    return function (i) {
      return i.toString(radix);
    };
  };


  exports.quot = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x / y | 0;
    };
  };

  exports.rem = function (x) {
    return function (y) {
      return x % y;
    };
  };

  exports.pow = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return Math.pow(x,y) | 0;
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];                 
  var DivisionRing = function (Ring0, recip) {
      this.Ring0 = Ring0;
      this.recip = recip;
  };
  var recip = function (dict) {
      return dict.recip;
  };
  var rightDiv = function (dictDivisionRing) {
      return function (a) {
          return function (b) {
              return Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(a)(recip(dictDivisionRing)(b));
          };
      };
  };
  var leftDiv = function (dictDivisionRing) {
      return function (a) {
          return function (b) {
              return Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(recip(dictDivisionRing)(b))(a);
          };
      };
  };
  var divisionringNumber = new DivisionRing(function () {
      return Data_Ring.ringNumber;
  }, function (x) {
      return 1.0 / x;
  });
  exports["DivisionRing"] = DivisionRing;
  exports["recip"] = recip;
  exports["leftDiv"] = leftDiv;
  exports["rightDiv"] = rightDiv;
  exports["divisionringNumber"] = divisionringNumber;
})(PS["Data.DivisionRing"] = PS["Data.DivisionRing"] || {});
(function(exports) {
    "use strict";

  // module Data.Int.Bits

  exports.and = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 & n2;
    };
  };

  exports.or = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 | n2;
    };
  };

  exports.xor = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 ^ n2;
    };
  };

  exports.shl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 << n2;
    };
  };

  exports.shr = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 >> n2;
    };
  };

  exports.zshr = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 >>> n2;
    };
  };

  exports.complement = function (n) {
    /* jshint bitwise: false */
    return ~n;
  };
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Int.Bits"];
  exports["and"] = $foreign.and;
  exports["or"] = $foreign.or;
  exports["xor"] = $foreign.xor;
  exports["shl"] = $foreign.shl;
  exports["shr"] = $foreign.shr;
  exports["zshr"] = $foreign.zshr;
  exports["complement"] = $foreign.complement;
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function(exports) {
  /* globals exports */
  "use strict";

  exports.nan = NaN;

  exports.isNaN = isNaN;

  exports.infinity = Infinity;

  exports.isFinite = isFinite;

  exports.readInt = function (radix) {
    return function (n) {
      return parseInt(n, radix);
    };
  };

  exports.readFloat = parseFloat;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Global"];
  exports["nan"] = $foreign.nan;
  exports["isNaN"] = $foreign["isNaN"];
  exports["infinity"] = $foreign.infinity;
  exports["isFinite"] = $foreign["isFinite"];
  exports["readInt"] = $foreign.readInt;
  exports["readFloat"] = $foreign.readFloat;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.acos = Math.acos;

  exports.asin = Math.asin;

  exports.atan = Math.atan;

  exports.atan2 = function (y) {
    return function (x) {
      return Math.atan2(y, x);
    };
  };

  exports.ceil = Math.ceil;

  exports.cos = Math.cos;

  exports.exp = Math.exp;

  exports.floor = Math.floor;

  exports.trunc = Math.trunc || function (n) {
    return n < 0 ? Math.ceil(n) : Math.floor(n);
  };

  exports.log = Math.log;

  exports.max = function (n1) {
    return function (n2) {
      return Math.max(n1, n2);
    };
  };

  exports.min = function (n1) {
    return function (n2) {
      return Math.min(n1, n2);
    };
  };

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };

  exports.round = Math.round;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;

  exports.tan = Math.tan;

  exports.e = Math.E;

  exports.ln2 = Math.LN2;

  exports.ln10 = Math.LN10;

  exports.log2e = Math.LOG2E;

  exports.log10e = Math.LOG10E;

  exports.pi = Math.PI;

  exports.tau = 2 * Math.PI;

  exports.sqrt1_2 = Math.SQRT1_2;

  exports.sqrt2 = Math.SQRT2;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["acos"] = $foreign.acos;
  exports["asin"] = $foreign.asin;
  exports["atan"] = $foreign.atan;
  exports["atan2"] = $foreign.atan2;
  exports["ceil"] = $foreign.ceil;
  exports["cos"] = $foreign.cos;
  exports["exp"] = $foreign.exp;
  exports["floor"] = $foreign.floor;
  exports["log"] = $foreign.log;
  exports["max"] = $foreign.max;
  exports["min"] = $foreign.min;
  exports["pow"] = $foreign.pow;
  exports["round"] = $foreign.round;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
  exports["tan"] = $foreign.tan;
  exports["trunc"] = $foreign.trunc;
  exports["remainder"] = $foreign.remainder;
  exports["e"] = $foreign.e;
  exports["ln2"] = $foreign.ln2;
  exports["ln10"] = $foreign.ln10;
  exports["log2e"] = $foreign.log2e;
  exports["log10e"] = $foreign.log10e;
  exports["pi"] = $foreign.pi;
  exports["tau"] = $foreign.tau;
  exports["sqrt1_2"] = $foreign.sqrt1_2;
  exports["sqrt2"] = $foreign.sqrt2;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];                 
  var Radix = function (x) {
      return x;
  };
  var Even = (function () {
      function Even() {

      };
      Even.value = new Even();
      return Even;
  })();
  var Odd = (function () {
      function Odd() {

      };
      Odd.value = new Odd();
      return Odd;
  })();
  var showParity = new Data_Show.Show(function (v) {
      if (v instanceof Even) {
          return "Even";
      };
      if (v instanceof Odd) {
          return "Odd";
      };
      throw new Error("Failed pattern match at Data.Int line 112, column 1 - line 112, column 35: " + [ v.constructor.name ]);
  });
  var radix = function (n) {
      if (n >= 2 && n <= 36) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Int line 193, column 1 - line 193, column 28: " + [ n.constructor.name ]);
  };
  var odd = function (x) {
      return (x & 1) !== 0;
  };
  var octal = 8;
  var hexadecimal = 16;
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 66, column 1 - line 66, column 29: " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  var even = function (x) {
      return (x & 1) === 0;
  };
  var parity = function (n) {
      var $14 = even(n);
      if ($14) {
          return Even.value;
      };
      return Odd.value;
  };
  var eqParity = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Even && y instanceof Even) {
              return true;
          };
          if (x instanceof Odd && y instanceof Odd) {
              return true;
          };
          return false;
      };
  });
  var ordParity = new Data_Ord.Ord(function () {
      return eqParity;
  }, function (x) {
      return function (y) {
          if (x instanceof Even && y instanceof Even) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Even) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Even) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Odd && y instanceof Odd) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Int line 110, column 8 - line 110, column 40: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var semiringParity = new Data_Semiring.Semiring(function (x) {
      return function (y) {
          var $19 = Data_Eq.eq(eqParity)(x)(y);
          if ($19) {
              return Even.value;
          };
          return Odd.value;
      };
  }, function (v) {
      return function (v1) {
          if (v instanceof Odd && v1 instanceof Odd) {
              return Odd.value;
          };
          return Even.value;
      };
  }, Odd.value, Even.value);
  var ringParity = new Data_Ring.Ring(function () {
      return semiringParity;
  }, Data_Semiring.add(semiringParity));
  var divisionRingParity = new Data_DivisionRing.DivisionRing(function () {
      return ringParity;
  }, Control_Category.identity(Control_Category.categoryFn));
  var decimal = 10;
  var commutativeRingParity = new Data_CommutativeRing.CommutativeRing(function () {
      return ringParity;
  });
  var euclideanRingParity = new Data_EuclideanRing.EuclideanRing(function () {
      return commutativeRingParity;
  }, function (v) {
      if (v instanceof Even) {
          return 0;
      };
      if (v instanceof Odd) {
          return 1;
      };
      throw new Error("Failed pattern match at Data.Int line 132, column 1 - line 132, column 53: " + [ v.constructor.name ]);
  }, function (x) {
      return function (v) {
          return x;
      };
  }, function (v) {
      return function (v1) {
          return Even.value;
      };
  });
  var ceil = function ($25) {
      return unsafeClamp($$Math.ceil($25));
  };
  var boundedParity = new Data_Bounded.Bounded(function () {
      return ordParity;
  }, Even.value, Odd.value);
  var binary = 2;
  var base36 = 36;
  exports["fromNumber"] = fromNumber;
  exports["ceil"] = ceil;
  exports["floor"] = floor;
  exports["round"] = round;
  exports["fromString"] = fromString;
  exports["radix"] = radix;
  exports["binary"] = binary;
  exports["octal"] = octal;
  exports["decimal"] = decimal;
  exports["hexadecimal"] = hexadecimal;
  exports["base36"] = base36;
  exports["fromStringAs"] = fromStringAs;
  exports["Even"] = Even;
  exports["Odd"] = Odd;
  exports["parity"] = parity;
  exports["even"] = even;
  exports["odd"] = odd;
  exports["eqParity"] = eqParity;
  exports["ordParity"] = ordParity;
  exports["showParity"] = showParity;
  exports["boundedParity"] = boundedParity;
  exports["semiringParity"] = semiringParity;
  exports["ringParity"] = ringParity;
  exports["commutativeRingParity"] = commutativeRingParity;
  exports["euclideanRingParity"] = euclideanRingParity;
  exports["divisionRingParity"] = divisionRingParity;
  exports["toNumber"] = $foreign.toNumber;
  exports["toStringAs"] = $foreign.toStringAs;
  exports["quot"] = $foreign.quot;
  exports["rem"] = $foreign.rem;
  exports["pow"] = $foreign.pow;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Date"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var $$Date = (function () {
      function $$Date(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      $$Date.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new $$Date(value0, value1, value2);
              };
          };
      };
      return $$Date;
  })();
  var year = function (v) {
      return v.value0;
  };
  var weekday = function (v) {
      var n = $foreign.calcWeekday(v.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v.value1), v.value2);
      var $41 = n === 0;
      if ($41) {
          return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumWeekday)(7));
      };
      return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumWeekday)(n));
  };
  var showDate = new Data_Show.Show(function (v) {
      return "(Date " + (Data_Show.show(Data_Date_Component.showYear)(v.value0) + (" " + (Data_Show.show(Data_Date_Component.showMonth)(v.value1) + (" " + (Data_Show.show(Data_Date_Component.showDay)(v.value2) + ")")))));
  });
  var month = function (v) {
      return v.value1;
  };
  var isLeapYear = function (y) {
      var y$prime = Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(y);
      return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(4) === 0 && (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(400) === 0 || !(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(100) === 0));
  };
  var lastDayOfMonth = function (y) {
      return function (m) {
          var unsafeDay = function ($108) {
              return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)($108));
          };
          if (m instanceof Data_Date_Component.January) {
              return unsafeDay(31);
          };
          if (m instanceof Data_Date_Component.February) {
              if (isLeapYear(y)) {
                  return unsafeDay(29);
              };
              if (Data_Boolean.otherwise) {
                  return unsafeDay(28);
              };
          };
          if (m instanceof Data_Date_Component.March) {
              return unsafeDay(31);
          };
          if (m instanceof Data_Date_Component.April) {
              return unsafeDay(30);
          };
          if (m instanceof Data_Date_Component.May) {
              return unsafeDay(31);
          };
          if (m instanceof Data_Date_Component.June) {
              return unsafeDay(30);
          };
          if (m instanceof Data_Date_Component.July) {
              return unsafeDay(31);
          };
          if (m instanceof Data_Date_Component.August) {
              return unsafeDay(31);
          };
          if (m instanceof Data_Date_Component.September) {
              return unsafeDay(30);
          };
          if (m instanceof Data_Date_Component.October) {
              return unsafeDay(31);
          };
          if (m instanceof Data_Date_Component.November) {
              return unsafeDay(30);
          };
          if (m instanceof Data_Date_Component.December) {
              return unsafeDay(31);
          };
          throw new Error("Failed pattern match at Data.Date line 127, column 22 - line 142, column 3: " + [ m.constructor.name ]);
      };
  };
  var eqDate = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Date_Component.eqYear)(x.value0)(y.value0) && Data_Eq.eq(Data_Date_Component.eqMonth)(x.value1)(y.value1) && Data_Eq.eq(Data_Date_Component.eqDay)(x.value2)(y.value2);
      };
  });
  var ordDate = new Data_Ord.Ord(function () {
      return eqDate;
  }, function (x) {
      return function (y) {
          var v = Data_Ord.compare(Data_Date_Component.ordYear)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          var v1 = Data_Ord.compare(Data_Date_Component.ordMonth)(x.value1)(y.value1);
          if (v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Date_Component.ordDay)(x.value2)(y.value2);
      };
  });
  var enumDate = new Data_Enum.Enum(function () {
      return ordDate;
  }, function (v) {
      var pm = Data_Enum.pred(Data_Date_Component.enumMonth)(v.value1);
      var pd = Data_Enum.pred(Data_Date_Component.enumDay)(v.value2);
      var y$prime = (function () {
          var $73 = Data_Maybe.isNothing(pd) && Data_Maybe.isNothing(pm);
          if ($73) {
              return Data_Enum.pred(Data_Date_Component.enumYear)(v.value0);
          };
          return new Data_Maybe.Just(v.value0);
      })();
      var m$prime = (function () {
          var $74 = Data_Maybe.isNothing(pd);
          if ($74) {
              return Data_Maybe.fromMaybe(Data_Date_Component.December.value)(pm);
          };
          return v.value1;
      })();
      var l = lastDayOfMonth(v.value0)(m$prime);
      var d$prime = (function () {
          var $75 = Data_Maybe.isNothing(pd);
          if ($75) {
              return new Data_Maybe.Just(l);
          };
          return pd;
      })();
      return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create)(y$prime))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(m$prime)))(d$prime);
  }, function (v) {
      var sm = Data_Enum.succ(Data_Date_Component.enumMonth)(v.value1);
      var l = lastDayOfMonth(v.value0)(v.value1);
      var sd = (function () {
          var v1 = Data_Enum.succ(Data_Date_Component.enumDay)(v.value2);
          var $80 = Data_Ord.greaterThan(Data_Maybe.ordMaybe(Data_Date_Component.ordDay))(v1)(new Data_Maybe.Just(l));
          if ($80) {
              return Data_Maybe.Nothing.value;
          };
          return v1;
      })();
      var m$prime = (function () {
          var $81 = Data_Maybe.isNothing(sd);
          if ($81) {
              return Data_Maybe.fromMaybe(Data_Date_Component.January.value)(sm);
          };
          return v.value1;
      })();
      var y$prime = (function () {
          var $82 = Data_Maybe.isNothing(sd) && Data_Maybe.isNothing(sm);
          if ($82) {
              return Data_Enum.succ(Data_Date_Component.enumYear)(v.value0);
          };
          return new Data_Maybe.Just(v.value0);
      })();
      var d$prime = (function () {
          var $83 = Data_Maybe.isNothing(sd);
          if ($83) {
              return Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(1);
          };
          return sd;
      })();
      return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create)(y$prime))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(m$prime)))(d$prime);
  });
  var diff = function (dictDuration) {
      return function (v) {
          return function (v1) {
              return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(v.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v.value1), v.value2, v1.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v1.value1), v1.value2));
          };
      };
  };
  var day = function (v) {
      return v.value2;
  };
  var canonicalDate = function (y) {
      return function (m) {
          return function (d) {
              var mkDate = function (y$prime) {
                  return function (m$prime) {
                      return function (d$prime) {
                          return new $$Date(y$prime, Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(m$prime)), d$prime);
                      };
                  };
              };
              return $foreign.canonicalDateImpl(mkDate, y, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(m), d);
          };
      };
  };
  var exactDate = function (y) {
      return function (m) {
          return function (d) {
              var dt = new $$Date(y, m, d);
              var $99 = Data_Eq.eq(eqDate)(canonicalDate(y)(m)(d))(dt);
              if ($99) {
                  return new Data_Maybe.Just(dt);
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var boundedDate = new Data_Bounded.Bounded(function () {
      return ordDate;
  }, new $$Date(Data_Bounded.bottom(Data_Date_Component.boundedYear), Data_Bounded.bottom(Data_Date_Component.boundedMonth), Data_Bounded.bottom(Data_Date_Component.boundedDay)), new $$Date(Data_Bounded.top(Data_Date_Component.boundedYear), Data_Bounded.top(Data_Date_Component.boundedMonth), Data_Bounded.top(Data_Date_Component.boundedDay)));
  var adjust = function (v) {
      return function (date) {
          var adj = function (v1) {
              return function (v2) {
                  if (v1 === 0) {
                      return new Data_Maybe.Just(v2);
                  };
                  var j = v1 + Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(v2.value2) | 0;
                  var low = j < 1;
                  var l = lastDayOfMonth(v2.value0)((function () {
                      if (low) {
                          return Data_Maybe.fromMaybe(Data_Date_Component.December.value)(Data_Enum.pred(Data_Date_Component.enumMonth)(v2.value1));
                      };
                      return v2.value1;
                  })());
                  var hi = j > Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(l);
                  var i$prime = (function () {
                      if (low) {
                          return j;
                      };
                      if (hi) {
                          return (j - Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(l) | 0) - 1 | 0;
                      };
                      if (Data_Boolean.otherwise) {
                          return 0;
                      };
                      throw new Error("Failed pattern match at Data.Date line 101, column 9 - line 104, column 9: " + [  ]);
                  })();
                  var dt$prime = (function () {
                      if (low) {
                          return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Enum.pred(enumDate))(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create(v2.value0)(v2.value1))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(1)));
                      };
                      if (hi) {
                          return Data_Enum.succ(enumDate)(new $$Date(v2.value0, v2.value1, l));
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create(v2.value0)(v2.value1))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(j));
                      };
                      throw new Error("Failed pattern match at Data.Date line 104, column 9 - line 106, column 48: " + [  ]);
                  })();
                  return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(adj(i$prime))(dt$prime);
              };
          };
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Int.fromNumber(v))(Data_Function.flip(adj)(date));
      };
  };
  exports["canonicalDate"] = canonicalDate;
  exports["exactDate"] = exactDate;
  exports["year"] = year;
  exports["month"] = month;
  exports["day"] = day;
  exports["weekday"] = weekday;
  exports["diff"] = diff;
  exports["isLeapYear"] = isLeapYear;
  exports["lastDayOfMonth"] = lastDayOfMonth;
  exports["adjust"] = adjust;
  exports["eqDate"] = eqDate;
  exports["ordDate"] = ordDate;
  exports["boundedDate"] = boundedDate;
  exports["showDate"] = showDate;
  exports["enumDate"] = enumDate;
})(PS["Data.Date"] = PS["Data.Date"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Second = function (x) {
      return x;
  };
  var Minute = function (x) {
      return x;
  };
  var Millisecond = function (x) {
      return x;
  };
  var Hour = function (x) {
      return x;
  };
  var showSecond = new Data_Show.Show(function (v) {
      return "(Second " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var showMinute = new Data_Show.Show(function (v) {
      return "(Minute " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var showMillisecond = new Data_Show.Show(function (v) {
      return "(Millisecond " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var showHour = new Data_Show.Show(function (v) {
      return "(Hour " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var ordSecond = Data_Ord.ordInt;
  var ordMinute = Data_Ord.ordInt;
  var ordMillisecond = Data_Ord.ordInt;
  var ordHour = Data_Ord.ordInt;
  var eqSecond = Data_Eq.eqInt;
  var eqMinute = Data_Eq.eqInt;
  var eqMillisecond = Data_Eq.eqInt;
  var eqHour = Data_Eq.eqInt;
  var boundedSecond = new Data_Bounded.Bounded(function () {
      return ordSecond;
  }, 0, 59);
  var boundedMinute = new Data_Bounded.Bounded(function () {
      return ordMinute;
  }, 0, 59);
  var boundedMillisecond = new Data_Bounded.Bounded(function () {
      return ordMillisecond;
  }, 0, 999);
  var boundedHour = new Data_Bounded.Bounded(function () {
      return ordHour;
  }, 0, 23);
  var boundedEnumSecond = new Data_Enum.BoundedEnum(function () {
      return boundedSecond;
  }, function () {
      return enumSecond;
  }, 60, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 59) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component line 90, column 1 - line 90, column 49: " + [ n.constructor.name ]);
  });
  var enumSecond = new Data_Enum.Enum(function () {
      return ordSecond;
  }, function ($28) {
      return Data_Enum.toEnum(boundedEnumSecond)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumSecond)($28)));
  }, function ($29) {
      return Data_Enum.toEnum(boundedEnumSecond)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumSecond)($29)));
  });
  var boundedEnumMinute = new Data_Enum.BoundedEnum(function () {
      return boundedMinute;
  }, function () {
      return enumMinute;
  }, 60, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 59) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component line 61, column 1 - line 61, column 49: " + [ n.constructor.name ]);
  });
  var enumMinute = new Data_Enum.Enum(function () {
      return ordMinute;
  }, function ($30) {
      return Data_Enum.toEnum(boundedEnumMinute)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMinute)($30)));
  }, function ($31) {
      return Data_Enum.toEnum(boundedEnumMinute)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMinute)($31)));
  });
  var boundedEnumMillisecond = new Data_Enum.BoundedEnum(function () {
      return boundedMillisecond;
  }, function () {
      return enumMillisecond;
  }, 1000, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 999) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component line 120, column 1 - line 120, column 59: " + [ n.constructor.name ]);
  });
  var enumMillisecond = new Data_Enum.Enum(function () {
      return ordMillisecond;
  }, function ($32) {
      return Data_Enum.toEnum(boundedEnumMillisecond)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMillisecond)($32)));
  }, function ($33) {
      return Data_Enum.toEnum(boundedEnumMillisecond)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMillisecond)($33)));
  });
  var boundedEnumHour = new Data_Enum.BoundedEnum(function () {
      return boundedHour;
  }, function () {
      return enumHour;
  }, 24, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 23) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component line 32, column 1 - line 32, column 45: " + [ n.constructor.name ]);
  });
  var enumHour = new Data_Enum.Enum(function () {
      return ordHour;
  }, function ($34) {
      return Data_Enum.toEnum(boundedEnumHour)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumHour)($34)));
  }, function ($35) {
      return Data_Enum.toEnum(boundedEnumHour)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumHour)($35)));
  });
  exports["eqHour"] = eqHour;
  exports["ordHour"] = ordHour;
  exports["boundedHour"] = boundedHour;
  exports["enumHour"] = enumHour;
  exports["boundedEnumHour"] = boundedEnumHour;
  exports["showHour"] = showHour;
  exports["eqMinute"] = eqMinute;
  exports["ordMinute"] = ordMinute;
  exports["boundedMinute"] = boundedMinute;
  exports["enumMinute"] = enumMinute;
  exports["boundedEnumMinute"] = boundedEnumMinute;
  exports["showMinute"] = showMinute;
  exports["eqSecond"] = eqSecond;
  exports["ordSecond"] = ordSecond;
  exports["boundedSecond"] = boundedSecond;
  exports["enumSecond"] = enumSecond;
  exports["boundedEnumSecond"] = boundedEnumSecond;
  exports["showSecond"] = showSecond;
  exports["eqMillisecond"] = eqMillisecond;
  exports["ordMillisecond"] = ordMillisecond;
  exports["boundedMillisecond"] = boundedMillisecond;
  exports["enumMillisecond"] = enumMillisecond;
  exports["boundedEnumMillisecond"] = boundedEnumMillisecond;
  exports["showMillisecond"] = showMillisecond;
})(PS["Data.Time.Component"] = PS["Data.Time.Component"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Time = (function () {
      function Time(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Time.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Time(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Time;
  })();
  var showTime = new Data_Show.Show(function (v) {
      return "(Time " + (Data_Show.show(Data_Time_Component.showHour)(v.value0) + (" " + (Data_Show.show(Data_Time_Component.showMinute)(v.value1) + (" " + (Data_Show.show(Data_Time_Component.showSecond)(v.value2) + (" " + (Data_Show.show(Data_Time_Component.showMillisecond)(v.value3) + ")")))))));
  });
  var setSecond = function (s) {
      return function (v) {
          return new Time(v.value0, v.value1, s, v.value3);
      };
  };
  var setMinute = function (m) {
      return function (v) {
          return new Time(v.value0, m, v.value2, v.value3);
      };
  };
  var setMillisecond = function (ms) {
      return function (v) {
          return new Time(v.value0, v.value1, v.value2, ms);
      };
  };
  var setHour = function (h) {
      return function (v) {
          return new Time(h, v.value1, v.value2, v.value3);
      };
  };
  var second = function (v) {
      return v.value2;
  };
  var minute = function (v) {
      return v.value1;
  };
  var millisecond = function (v) {
      return v.value3;
  };
  var millisToTime = function (v) {
      var hours = $$Math.floor(v / 3600000.0);
      var minutes = $$Math.floor((v - hours * 3600000.0) / 60000.0);
      var seconds = $$Math.floor((v - (hours * 3600000.0 + minutes * 60000.0)) / 1000.0);
      var milliseconds = v - (hours * 3600000.0 + minutes * 60000.0 + seconds * 1000.0);
      return Data_Maybe.fromJust()(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(Data_Int.floor(hours))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(Data_Int.floor(minutes))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(Data_Int.floor(seconds))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Int.floor(milliseconds))));
  };
  var hour = function (v) {
      return v.value0;
  };
  var timeToMillis = function (t) {
      return Data_Time_Duration.Milliseconds(3600000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(hour(t))) + 60000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(minute(t))) + 1000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(second(t))) + Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(millisecond(t))));
  };
  var eqTime = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Time_Component.eqHour)(x.value0)(y.value0) && Data_Eq.eq(Data_Time_Component.eqMinute)(x.value1)(y.value1) && Data_Eq.eq(Data_Time_Component.eqSecond)(x.value2)(y.value2) && Data_Eq.eq(Data_Time_Component.eqMillisecond)(x.value3)(y.value3);
      };
  });
  var ordTime = new Data_Ord.Ord(function () {
      return eqTime;
  }, function (x) {
      return function (y) {
          var v = Data_Ord.compare(Data_Time_Component.ordHour)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          var v1 = Data_Ord.compare(Data_Time_Component.ordMinute)(x.value1)(y.value1);
          if (v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          var v2 = Data_Ord.compare(Data_Time_Component.ordSecond)(x.value2)(y.value2);
          if (v2 instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v2 instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Time_Component.ordMillisecond)(x.value3)(y.value3);
      };
  });
  var diff = function (dictDuration) {
      return function (t1) {
          return function (t2) {
              return Data_Time_Duration.toDuration(dictDuration)(Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(timeToMillis(t1))(Data_Time_Duration.negateDuration(Data_Time_Duration.durationMilliseconds)(timeToMillis(t2))));
          };
      };
  };
  var boundedTime = new Data_Bounded.Bounded(function () {
      return ordTime;
  }, new Time(Data_Bounded.bottom(Data_Time_Component.boundedHour), Data_Bounded.bottom(Data_Time_Component.boundedMinute), Data_Bounded.bottom(Data_Time_Component.boundedSecond), Data_Bounded.bottom(Data_Time_Component.boundedMillisecond)), new Time(Data_Bounded.top(Data_Time_Component.boundedHour), Data_Bounded.top(Data_Time_Component.boundedMinute), Data_Bounded.top(Data_Time_Component.boundedSecond), Data_Bounded.top(Data_Time_Component.boundedMillisecond)));
  var maxTime = timeToMillis(Data_Bounded.top(boundedTime));
  var minTime = timeToMillis(Data_Bounded.bottom(boundedTime));
  var adjust = function (dictDuration) {
      return function (d) {
          return function (t) {
              var tLength = timeToMillis(t);
              var d$prime = Data_Time_Duration.fromDuration(dictDuration)(d);
              var wholeDays = Data_Time_Duration.Days($$Math.floor(Data_Newtype.unwrap(Data_Time_Duration.newtypeMilliseconds)(d$prime) / 8.64e7));
              var msAdjust = Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(d$prime)(Data_Time_Duration.negateDuration(Data_Time_Duration.durationMilliseconds)(Data_Time_Duration.fromDuration(Data_Time_Duration.durationDays)(wholeDays)));
              var msAdjusted = Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(tLength)(msAdjust);
              var wrap = (function () {
                  var $112 = Data_Ord.greaterThan(Data_Time_Duration.ordMilliseconds)(msAdjusted)(maxTime);
                  if ($112) {
                      return 1.0;
                  };
                  var $113 = Data_Ord.lessThan(Data_Time_Duration.ordMilliseconds)(msAdjusted)(minTime);
                  if ($113) {
                      return -1.0;
                  };
                  return 0.0;
              })();
              return new Data_Tuple.Tuple(Data_Semigroup.append(Data_Time_Duration.semigroupDays)(wholeDays)(wrap), millisToTime(Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(msAdjusted)(8.64e7 * -wrap)));
          };
      };
  };
  exports["Time"] = Time;
  exports["hour"] = hour;
  exports["setHour"] = setHour;
  exports["minute"] = minute;
  exports["setMinute"] = setMinute;
  exports["second"] = second;
  exports["setSecond"] = setSecond;
  exports["millisecond"] = millisecond;
  exports["setMillisecond"] = setMillisecond;
  exports["adjust"] = adjust;
  exports["diff"] = diff;
  exports["eqTime"] = eqTime;
  exports["ordTime"] = ordTime;
  exports["boundedTime"] = boundedTime;
  exports["showTime"] = showTime;
})(PS["Data.Time"] = PS["Data.Time"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.DateTime"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Time = PS["Data.Time"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Prelude = PS["Prelude"];                 
  var DateTime = (function () {
      function DateTime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DateTime.create = function (value0) {
          return function (value1) {
              return new DateTime(value0, value1);
          };
      };
      return DateTime;
  })();
  var toRecord = function (v) {
      return {
          year: Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0)),
          month: Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)),
          day: Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0)),
          hour: Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1)),
          minute: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1)),
          second: Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1)),
          millisecond: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1))
      };
  };
  var time = function (v) {
      return v.value1;
  };
  var showDateTime = new Data_Show.Show(function (v) {
      return "(DateTime " + (Data_Show.show(Data_Date.showDate)(v.value0) + (" " + (Data_Show.show(Data_Time.showTime)(v.value1) + ")")));
  });
  var modifyTimeF = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(DateTime.create(v.value0))(f(v.value1));
          };
      };
  };
  var modifyTime = function (f) {
      return function (v) {
          return new DateTime(v.value0, f(v.value1));
      };
  };
  var modifyDateF = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(Data_Function.flip(DateTime.create)(v.value1))(f(v.value0));
          };
      };
  };
  var modifyDate = function (f) {
      return function (v) {
          return new DateTime(f(v.value0), v.value1);
      };
  };
  var eqDateTime = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Date.eqDate)(x.value0)(y.value0) && Data_Eq.eq(Data_Time.eqTime)(x.value1)(y.value1);
      };
  });
  var ordDateTime = new Data_Ord.Ord(function () {
      return eqDateTime;
  }, function (x) {
      return function (y) {
          var v = Data_Ord.compare(Data_Date.ordDate)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Time.ordTime)(x.value1)(y.value1);
      };
  });
  var diff = function (dictDuration) {
      return function (dt1) {
          return function (dt2) {
              return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(toRecord(dt1), toRecord(dt2)));
          };
      };
  };
  var date = function (v) {
      return v.value0;
  };
  var boundedDateTime = new Data_Bounded.Bounded(function () {
      return ordDateTime;
  }, new DateTime(Data_Bounded.bottom(Data_Date.boundedDate), Data_Bounded.bottom(Data_Time.boundedTime)), new DateTime(Data_Bounded.top(Data_Date.boundedDate), Data_Bounded.top(Data_Time.boundedTime)));
  var adjust = function (dictDuration) {
      return function (d) {
          return function (dt) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)($foreign.adjustImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(Data_Time_Duration.fromDuration(dictDuration)(d))(toRecord(dt)))(function (rec) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(DateTime.create)(Control_Bind.join(Data_Maybe.bindMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Date.exactDate)(Data_Enum.toEnum(Data_Date_Component.boundedEnumYear)(rec.year)))(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(rec.month)))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(rec.day)))))(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Time.Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(rec.hour)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(rec.minute)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(rec.second)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(rec.millisecond)));
              });
          };
      };
  };
  exports["DateTime"] = DateTime;
  exports["date"] = date;
  exports["modifyDate"] = modifyDate;
  exports["modifyDateF"] = modifyDateF;
  exports["time"] = time;
  exports["modifyTime"] = modifyTime;
  exports["modifyTimeF"] = modifyTimeF;
  exports["adjust"] = adjust;
  exports["diff"] = diff;
  exports["eqDateTime"] = eqDateTime;
  exports["ordDateTime"] = ordDateTime;
  exports["boundedDateTime"] = boundedDateTime;
  exports["showDateTime"] = showDateTime;
})(PS["Data.DateTime"] = PS["Data.DateTime"] || {});
(function(exports) {
  /* global exports */
  /* global Buffer */
  /* global require */
  "use strict";

  exports.showImpl = require('util').inspect;

  exports.create = function (size) {
    return function() {
      return Buffer.alloc(size);
    };
  };

  exports.fromArray = function (octets) {
    return function() {
      return Buffer.from(octets);
    };
  };

  exports.fromStringImpl = function (str) {
    return function (encoding) {
      return function() {
        return Buffer.from(str, encoding);
      };
    };
  };

  exports.fromArrayBuffer = function(ab) {
    return function() {
      return Buffer.from(ab);
    };
  };

  exports.toArrayBuffer = function(buff) {
    return function() {
      return buff.buffer.slice(buff.byteOffset, buff.byteOffset + buff.byteLength);
    };
  };

  exports.readImpl = function (ty) {
    return function (offset) {
      return function (buf) {
        return function() {
          return buf['read' + ty](offset);
        };
      };
    };
  };

  exports.readStringImpl = function (enc) {
    return function (start) {
      return function (end) {
        return function (buff) {
          return function() {
            return buff.toString(enc, start, end);
          };
        };
      };
    };
  };

  exports.toStringImpl = function (enc) {
    return function (buff) {
      return function() {
        return buff.toString(enc);
      };
    };
  };

  exports.writeImpl = function (ty) {
    return function (value) {
      return function (offset) {
        return function (buf) {
          return function() {
            buf['write' + ty](value, offset);
            return {};
          }
        };
      };
    };
  };

  exports.writeStringImpl = function (encoding) {
    return function (offset) {
      return function (length) {
        return function (value) {
          return function (buff) {
            return function() {
              return buff.write(value, offset, length, encoding);
            }
          };
        };
      };
    };
  };

  exports.toArray = function (buff) {
    return function() {
      var json = buff.toJSON()
      return json.data || json;
    };
  };

  exports.getAtOffsetImpl = function (just) {
    return function (nothing) {
      return function (offset) {
        return function (buff) {
          return function() {
            var octet = buff[offset];
            return octet == null ? nothing
                                 : just(octet);
          };
        };
      };
    };
  };

  exports.setAtOffset = function (value) {
    return function (offset) {
      return function (buff) {
        return function() {
          buff[offset] = value;
          return {};
        };
      };
    };
  };

  exports.size = function (buff) {
    return function() {
      return buff.length;
    };
  };



  exports.concat = function (buffs) {
    return function() {
      return Buffer.concat(buffs);
    };
  };

  exports["concat'"] = function (buffs) {
    return function (totalLength) {
      return function() {
        return Buffer.concat(buffs, totalLength);
      };
    };
  };

  exports.copy = function (srcStart) {
    return function (srcEnd) {
      return function (src) {
        return function (targStart) {
          return function (targ) {
            return function() {
              return src.copy(targ, targStart, srcStart, srcEnd);
            };
          };
        };
      };
    };
  };

  exports.fill = function (octet) {
    return function (start) {
      return function (end) {
        return function (buf) {
          return function() {
            buf.fill(octet, start, end);
            return {};
          };
        };
      };
    };
  };
})(PS["Node.Buffer"] = PS["Node.Buffer"] || {});
(function(exports) {
  /* global exports */
  /* global Buffer */
  "use strict";

  exports.byteLengthImpl = function (str) {
    return function (enc) {
      return Buffer.byteLength(str, enc);
    };
  };
})(PS["Node.Encoding"] = PS["Node.Encoding"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Node.Encoding"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = new Data_Show.Show(function (v) {
      if (v instanceof ASCII) {
          return "ASCII";
      };
      if (v instanceof UTF8) {
          return "UTF8";
      };
      if (v instanceof UTF16LE) {
          return "UTF16LE";
      };
      if (v instanceof UCS2) {
          return "UCS2";
      };
      if (v instanceof Base64) {
          return "Base64";
      };
      if (v instanceof Latin1) {
          return "Latin1";
      };
      if (v instanceof Binary) {
          return "Binary";
      };
      if (v instanceof Hex) {
          return "Hex";
      };
      throw new Error("Failed pattern match at Node.Encoding line 19, column 1 - line 19, column 39: " + [ v.constructor.name ]);
  });
  var encodingToNode = function (v) {
      if (v instanceof ASCII) {
          return "ascii";
      };
      if (v instanceof UTF8) {
          return "utf8";
      };
      if (v instanceof UTF16LE) {
          return "utf16le";
      };
      if (v instanceof UCS2) {
          return "ucs2";
      };
      if (v instanceof Base64) {
          return "base64";
      };
      if (v instanceof Latin1) {
          return "latin1";
      };
      if (v instanceof Binary) {
          return "binary";
      };
      if (v instanceof Hex) {
          return "hex";
      };
      throw new Error("Failed pattern match at Node.Encoding line 31, column 1 - line 31, column 37: " + [ v.constructor.name ]);
  };
  var byteLength = function (str) {
      return function (enc) {
          return $foreign.byteLengthImpl(str)(encodingToNode(enc));
      };
  };
  exports["ASCII"] = ASCII;
  exports["UTF8"] = UTF8;
  exports["UTF16LE"] = UTF16LE;
  exports["UCS2"] = UCS2;
  exports["Base64"] = Base64;
  exports["Latin1"] = Latin1;
  exports["Binary"] = Binary;
  exports["Hex"] = Hex;
  exports["encodingToNode"] = encodingToNode;
  exports["byteLength"] = byteLength;
  exports["showEncoding"] = showEncoding;
})(PS["Node.Encoding"] = PS["Node.Encoding"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Node.Buffer"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Node_Encoding = PS["Node.Encoding"];
  var Prelude = PS["Prelude"];                 
  var UInt8 = (function () {
      function UInt8() {

      };
      UInt8.value = new UInt8();
      return UInt8;
  })();
  var UInt16LE = (function () {
      function UInt16LE() {

      };
      UInt16LE.value = new UInt16LE();
      return UInt16LE;
  })();
  var UInt16BE = (function () {
      function UInt16BE() {

      };
      UInt16BE.value = new UInt16BE();
      return UInt16BE;
  })();
  var UInt32LE = (function () {
      function UInt32LE() {

      };
      UInt32LE.value = new UInt32LE();
      return UInt32LE;
  })();
  var UInt32BE = (function () {
      function UInt32BE() {

      };
      UInt32BE.value = new UInt32BE();
      return UInt32BE;
  })();
  var Int8 = (function () {
      function Int8() {

      };
      Int8.value = new Int8();
      return Int8;
  })();
  var Int16LE = (function () {
      function Int16LE() {

      };
      Int16LE.value = new Int16LE();
      return Int16LE;
  })();
  var Int16BE = (function () {
      function Int16BE() {

      };
      Int16BE.value = new Int16BE();
      return Int16BE;
  })();
  var Int32LE = (function () {
      function Int32LE() {

      };
      Int32LE.value = new Int32LE();
      return Int32LE;
  })();
  var Int32BE = (function () {
      function Int32BE() {

      };
      Int32BE.value = new Int32BE();
      return Int32BE;
  })();
  var FloatLE = (function () {
      function FloatLE() {

      };
      FloatLE.value = new FloatLE();
      return FloatLE;
  })();
  var FloatBE = (function () {
      function FloatBE() {

      };
      FloatBE.value = new FloatBE();
      return FloatBE;
  })();
  var DoubleLE = (function () {
      function DoubleLE() {

      };
      DoubleLE.value = new DoubleLE();
      return DoubleLE;
  })();
  var DoubleBE = (function () {
      function DoubleBE() {

      };
      DoubleBE.value = new DoubleBE();
      return DoubleBE;
  })();
  var writeString = function ($2) {
      return $foreign.writeStringImpl(Node_Encoding.encodingToNode($2));
  };
  var toString = function ($3) {
      return $foreign.toStringImpl(Node_Encoding.encodingToNode($3));
  };
  var showBufferValueType = new Data_Show.Show(function (v) {
      if (v instanceof UInt8) {
          return "UInt8";
      };
      if (v instanceof UInt16LE) {
          return "UInt16LE";
      };
      if (v instanceof UInt16BE) {
          return "UInt16BE";
      };
      if (v instanceof UInt32LE) {
          return "UInt32LE";
      };
      if (v instanceof UInt32BE) {
          return "UInt32BE";
      };
      if (v instanceof Int8) {
          return "Int8";
      };
      if (v instanceof Int16LE) {
          return "Int16LE";
      };
      if (v instanceof Int16BE) {
          return "Int16BE";
      };
      if (v instanceof Int32LE) {
          return "Int32LE";
      };
      if (v instanceof Int32BE) {
          return "Int32BE";
      };
      if (v instanceof FloatLE) {
          return "FloatLE";
      };
      if (v instanceof FloatBE) {
          return "FloatBE";
      };
      if (v instanceof DoubleLE) {
          return "DoubleLE";
      };
      if (v instanceof DoubleBE) {
          return "DoubleBE";
      };
      throw new Error("Failed pattern match at Node.Buffer line 65, column 1 - line 65, column 53: " + [ v.constructor.name ]);
  });
  var write = function ($4) {
      return $foreign.writeImpl(Data_Show.show(showBufferValueType)($4));
  };
  var showBuffer = new Data_Show.Show($foreign.showImpl);
  var readString = function ($5) {
      return $foreign.readStringImpl(Node_Encoding.encodingToNode($5));
  };
  var read = function ($6) {
      return $foreign.readImpl(Data_Show.show(showBufferValueType)($6));
  };
  var getAtOffset = $foreign.getAtOffsetImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = function (str) {
      return function ($7) {
          return $foreign.fromStringImpl(str)(Node_Encoding.encodingToNode($7));
      };
  };
  exports["UInt8"] = UInt8;
  exports["UInt16LE"] = UInt16LE;
  exports["UInt16BE"] = UInt16BE;
  exports["UInt32LE"] = UInt32LE;
  exports["UInt32BE"] = UInt32BE;
  exports["Int8"] = Int8;
  exports["Int16LE"] = Int16LE;
  exports["Int16BE"] = Int16BE;
  exports["Int32LE"] = Int32LE;
  exports["Int32BE"] = Int32BE;
  exports["FloatLE"] = FloatLE;
  exports["FloatBE"] = FloatBE;
  exports["DoubleLE"] = DoubleLE;
  exports["DoubleBE"] = DoubleBE;
  exports["fromString"] = fromString;
  exports["read"] = read;
  exports["readString"] = readString;
  exports["toString"] = toString;
  exports["write"] = write;
  exports["writeString"] = writeString;
  exports["getAtOffset"] = getAtOffset;
  exports["showBuffer"] = showBuffer;
  exports["showBufferValueType"] = showBufferValueType;
  exports["create"] = $foreign.create;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromArrayBuffer"] = $foreign.fromArrayBuffer;
  exports["toArrayBuffer"] = $foreign.toArrayBuffer;
  exports["toArray"] = $foreign.toArray;
  exports["setAtOffset"] = $foreign.setAtOffset;
  exports["size"] = $foreign.size;
  exports["concat"] = $foreign.concat;
  exports["concat'"] = $foreign["concat'"];
  exports["copy"] = $foreign.copy;
  exports["fill"] = $foreign.fill;
})(PS["Node.Buffer"] = PS["Node.Buffer"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var FileLink = (function () {
      function FileLink() {

      };
      FileLink.value = new FileLink();
      return FileLink;
  })();
  var DirLink = (function () {
      function DirLink() {

      };
      DirLink.value = new DirLink();
      return DirLink;
  })();
  var JunctionLink = (function () {
      function JunctionLink() {

      };
      JunctionLink.value = new JunctionLink();
      return JunctionLink;
  })();
  var R = (function () {
      function R() {

      };
      R.value = new R();
      return R;
  })();
  var R_PLUS = (function () {
      function R_PLUS() {

      };
      R_PLUS.value = new R_PLUS();
      return R_PLUS;
  })();
  var RS = (function () {
      function RS() {

      };
      RS.value = new RS();
      return RS;
  })();
  var RS_PLUS = (function () {
      function RS_PLUS() {

      };
      RS_PLUS.value = new RS_PLUS();
      return RS_PLUS;
  })();
  var W = (function () {
      function W() {

      };
      W.value = new W();
      return W;
  })();
  var WX = (function () {
      function WX() {

      };
      WX.value = new WX();
      return WX;
  })();
  var W_PLUS = (function () {
      function W_PLUS() {

      };
      W_PLUS.value = new W_PLUS();
      return W_PLUS;
  })();
  var WX_PLUS = (function () {
      function WX_PLUS() {

      };
      WX_PLUS.value = new WX_PLUS();
      return WX_PLUS;
  })();
  var A = (function () {
      function A() {

      };
      A.value = new A();
      return A;
  })();
  var AX = (function () {
      function AX() {

      };
      AX.value = new AX();
      return AX;
  })();
  var A_PLUS = (function () {
      function A_PLUS() {

      };
      A_PLUS.value = new A_PLUS();
      return A_PLUS;
  })();
  var AX_PLUS = (function () {
      function AX_PLUS() {

      };
      AX_PLUS.value = new AX_PLUS();
      return AX_PLUS;
  })();
  var symlinkTypeToNode = function (ty) {
      if (ty instanceof FileLink) {
          return "file";
      };
      if (ty instanceof DirLink) {
          return "dir";
      };
      if (ty instanceof JunctionLink) {
          return "junction";
      };
      throw new Error("Failed pattern match at Node.FS line 68, column 24 - line 73, column 1: " + [ ty.constructor.name ]);
  };
  var showSymlinkType = new Data_Show.Show(function (v) {
      if (v instanceof FileLink) {
          return "FileLink";
      };
      if (v instanceof DirLink) {
          return "DirLink";
      };
      if (v instanceof JunctionLink) {
          return "JunctionLink";
      };
      throw new Error("Failed pattern match at Node.FS line 73, column 1 - line 73, column 45: " + [ v.constructor.name ]);
  });
  var showFileFlags = new Data_Show.Show(function (v) {
      if (v instanceof R) {
          return "R";
      };
      if (v instanceof R_PLUS) {
          return "R_PLUS";
      };
      if (v instanceof RS) {
          return "RS";
      };
      if (v instanceof RS_PLUS) {
          return "RS_PLUS";
      };
      if (v instanceof W) {
          return "W";
      };
      if (v instanceof WX) {
          return "WX";
      };
      if (v instanceof W_PLUS) {
          return "W_PLUS";
      };
      if (v instanceof WX_PLUS) {
          return "WX_PLUS";
      };
      if (v instanceof A) {
          return "A";
      };
      if (v instanceof AX) {
          return "AX";
      };
      if (v instanceof A_PLUS) {
          return "A_PLUS";
      };
      if (v instanceof AX_PLUS) {
          return "AX_PLUS";
      };
      throw new Error("Failed pattern match at Node.FS line 22, column 1 - line 22, column 41: " + [ v.constructor.name ]);
  });
  var fileFlagsToNode = function (ff) {
      if (ff instanceof R) {
          return "r";
      };
      if (ff instanceof R_PLUS) {
          return "r+";
      };
      if (ff instanceof RS) {
          return "rs";
      };
      if (ff instanceof RS_PLUS) {
          return "rs+";
      };
      if (ff instanceof W) {
          return "w";
      };
      if (ff instanceof WX) {
          return "wx";
      };
      if (ff instanceof W_PLUS) {
          return "w+";
      };
      if (ff instanceof WX_PLUS) {
          return "wx+";
      };
      if (ff instanceof A) {
          return "a";
      };
      if (ff instanceof AX) {
          return "ax";
      };
      if (ff instanceof A_PLUS) {
          return "a+";
      };
      if (ff instanceof AX_PLUS) {
          return "ax+";
      };
      throw new Error("Failed pattern match at Node.FS line 42, column 22 - line 56, column 1: " + [ ff.constructor.name ]);
  };
  var eqSymlinkType = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof FileLink && v1 instanceof FileLink) {
              return true;
          };
          if (v instanceof DirLink && v1 instanceof DirLink) {
              return true;
          };
          if (v instanceof JunctionLink && v1 instanceof JunctionLink) {
              return true;
          };
          return false;
      };
  });
  var eqFileFlags = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Show.show(showFileFlags)(x) === Data_Show.show(showFileFlags)(y);
      };
  });
  exports["R"] = R;
  exports["R_PLUS"] = R_PLUS;
  exports["RS"] = RS;
  exports["RS_PLUS"] = RS_PLUS;
  exports["W"] = W;
  exports["WX"] = WX;
  exports["W_PLUS"] = W_PLUS;
  exports["WX_PLUS"] = WX_PLUS;
  exports["A"] = A;
  exports["AX"] = AX;
  exports["A_PLUS"] = A_PLUS;
  exports["AX_PLUS"] = AX_PLUS;
  exports["FileLink"] = FileLink;
  exports["DirLink"] = DirLink;
  exports["JunctionLink"] = JunctionLink;
  exports["symlinkTypeToNode"] = symlinkTypeToNode;
  exports["fileFlagsToNode"] = fileFlagsToNode;
  exports["showFileFlags"] = showFileFlags;
  exports["eqFileFlags"] = eqFileFlags;
  exports["showSymlinkType"] = showSymlinkType;
  exports["eqSymlinkType"] = eqSymlinkType;
})(PS["Node.FS"] = PS["Node.FS"] || {});
(function(exports) {
    "use strict";

  exports.handleCallbackImpl = function (left, right, f) {
    return function (err, value) {
      if (err) {
        f(left(err))();
      } else {
        f(right(value))();
      }
    };
  };
})(PS["Node.FS.Async"] = PS["Node.FS.Async"] || {});
(function(exports) {
    "use strict";

  var createDateTime = function (y, m, d, h, mi, s, ms) {
    var dateTime = new Date(Date.UTC(y, m, d, h, mi, s, ms));
    if (y >= 0 && y < 100) {
      dateTime.setUTCFullYear(y);
    }
    return dateTime;
  };

  exports.fromDateTimeImpl = function (y, mo, d, h, mi, s, ms) {
    return createDateTime(y, mo - 1, d, h, mi, s, ms).getTime();
  };

  exports.toDateTimeImpl = function (ctor) {
    return function (instant) {
      var dt = new Date(instant);
      return ctor (dt.getUTCFullYear())(dt.getUTCMonth() + 1)(dt.getUTCDate())(dt.getUTCHours())(dt.getUTCMinutes())(dt.getUTCSeconds())(dt.getUTCMilliseconds());
    };
  };
})(PS["Data.DateTime.Instant"] = PS["Data.DateTime.Instant"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.DateTime.Instant"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Time = PS["Data.Time"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Instant = function (x) {
      return x;
  };
  var unInstant = function (v) {
      return v;
  };
  var toDateTime = (function () {
      var mkDateTime = function (y) {
          return function (mo) {
              return function (d) {
                  return function (h) {
                      return function (mi) {
                          return function (s) {
                              return function (ms) {
                                  return new Data_DateTime.DateTime(Data_Date.canonicalDate(y)(Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(mo)))(d), new Data_Time.Time(h, mi, s, ms));
                              };
                          };
                      };
                  };
              };
          };
      };
      return $foreign.toDateTimeImpl(mkDateTime);
  })();
  var showInstant = new Data_Show.Show(function (v) {
      return "(Instant " + (Data_Show.show(Data_Time_Duration.showMilliseconds)(v) + ")");
  });
  var ordDateTime = Data_Time_Duration.ordMilliseconds;
  var instant = function (v) {
      if (v >= -8.6399778816e15 && v <= 8.639977881599999e15) {
          return new Data_Maybe.Just(v);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.DateTime.Instant line 44, column 1 - line 44, column 41: " + [ v.constructor.name ]);
  };
  var fromDateTime = function (v) {
      return $foreign.fromDateTimeImpl(Data_Date.year(v.value0), Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)), Data_Date.day(v.value0), Data_Time.hour(v.value1), Data_Time.minute(v.value1), Data_Time.second(v.value1), Data_Time.millisecond(v.value1));
  };
  var fromDate = function (d) {
      return $foreign.fromDateTimeImpl(Data_Date.year(d), Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(d)), Data_Date.day(d), Data_Bounded.bottom(Data_Time_Component.boundedHour), Data_Bounded.bottom(Data_Time_Component.boundedMinute), Data_Bounded.bottom(Data_Time_Component.boundedSecond), Data_Bounded.bottom(Data_Time_Component.boundedMillisecond));
  };
  var eqDateTime = Data_Time_Duration.eqMilliseconds;
  var boundedInstant = new Data_Bounded.Bounded(function () {
      return ordDateTime;
  }, -8.6399778816e15, 8.639977881599999e15);
  exports["instant"] = instant;
  exports["unInstant"] = unInstant;
  exports["fromDateTime"] = fromDateTime;
  exports["fromDate"] = fromDate;
  exports["toDateTime"] = toDateTime;
  exports["eqDateTime"] = eqDateTime;
  exports["ordDateTime"] = ordDateTime;
  exports["boundedInstant"] = boundedInstant;
  exports["showInstant"] = showInstant;
})(PS["Data.DateTime.Instant"] = PS["Data.DateTime.Instant"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  var showNullable = function (dictShow) {
      return new Data_Show.Show(function ($5) {
          return Data_Maybe.maybe("null")(Data_Show.show(dictShow))(toMaybe($5));
      });
  };
  var eqNullable = function (dictEq) {
      return new Data_Eq.Eq(Data_Function.on(Data_Eq.eq(Data_Maybe.eqMaybe(dictEq)))(toMaybe));
  };
  var ordNullable = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqNullable(dictOrd.Eq0());
      }, Data_Function.on(Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd)))(toMaybe));
  };
  var eq1Nullable = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqNullable(dictEq));
  });
  var ord1Nullable = new Data_Ord.Ord1(function () {
      return eq1Nullable;
  }, function (dictOrd) {
      return Data_Ord.compare(ordNullable(dictOrd));
  });
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
  exports["showNullable"] = showNullable;
  exports["eqNullable"] = eqNullable;
  exports["eq1Nullable"] = eq1Nullable;
  exports["ordNullable"] = ordNullable;
  exports["ord1Nullable"] = ord1Nullable;
  exports["null"] = $foreign["null"];
  exports["notNull"] = $foreign.notNull;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
    "use strict";

  exports.unsafeRequireFS = require("fs");
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Node.FS.Internal"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  exports["mkEffect"] = mkEffect;
  exports["unsafeRequireFS"] = $foreign.unsafeRequireFS;
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function(exports) {
    "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._codePointAt = function (fallback) {
    return function (Just) {
      return function (Nothing) {
        return function (unsafeCodePointAt0) {
          return function (index) {
            return function (str) {
              var length = str.length;
              if (index < 0 || index >= length) return Nothing;
              if (hasStringIterator) {
                var iter = str[Symbol.iterator]();
                for (var i = index;; --i) {
                  var o = iter.next();
                  if (o.done) return Nothing;
                  if (i === 0) return Just(unsafeCodePointAt0(o.value));
                }
              }
              return fallback(index)(str);
            };
          };
        };
      };
    };
  };

  exports._countPrefix = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasStringIterator) {
        return function (pred) {
          return function (str) {
            var iter = str[Symbol.iterator]();
            for (var cpCount = 0; ; ++cpCount) {
              var o = iter.next();
              if (o.done) return cpCount;
              var cp = unsafeCodePointAt0(o.value);
              if (!pred(cp)) return cpCount;
            }
          };
        };
      }
      return fallback;
    };
  };

  exports._fromCodePointArray = function (singleton) {
    return hasFromCodePoint
      ? function (cps) {
        // Function.prototype.apply will fail for very large second parameters,
        // so we don't use it for arrays with 10,000 or more entries.
        if (cps.length < 10e3) {
          return String.fromCodePoint.apply(String, cps);
        }
        return cps.map(singleton).join("");
      }
      : function (cps) {
        return cps.map(singleton).join("");
      };
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
    "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports._toChar = function (just) {
    return function (nothing) {
      return function (s) {
        return s.length === 1 ? just(s) : nothing;
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.countPrefix = function (p) {
    return function (s) {
      var i = 0;
      while (i < s.length && p(s.charAt(i))) i++;
      return i;
    };
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports["_indexOf'"] = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.indexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports._lastIndexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.lastIndexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports["_lastIndexOf'"] = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.lastIndexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports._slice = function (b) {
    return function (e) {
      return function (s) {
        return s.slice(b,e);
      };
    };
  };

  exports.splitAt = function (i) {
    return function (s) {
      return { before: s.substring(0, i), after: s.substring(i) };
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
    "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };

  exports.char = function (s) {
    if (s.length === 1) return s.charAt(0);
    throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.Unsafe"];
  exports["char"] = $foreign["char"];
  exports["charAt"] = $foreign.charAt;
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.CodeUnits"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v),
          tail: $foreign.drop(1)(v)
      });
  };
  var toChar = $foreign._toChar(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var takeWhile = function (p) {
      return function (s) {
          return $foreign.take($foreign.countPrefix(p)(s))(s);
      };
  };
  var takeRight = function (i) {
      return function (s) {
          return $foreign.drop($foreign.length(s) - i | 0)(s);
      };
  };
  var slice = function (b) {
      return function (e) {
          return function (s) {
              var l = $foreign.length(s);
              var norm = function (x) {
                  if (x < 0) {
                      return l + x | 0;
                  };
                  if (Data_Boolean.otherwise) {
                      return x;
                  };
                  throw new Error("Failed pattern match at Data.String.CodeUnits line 314, column 5 - line 315, column 27: " + [ x.constructor.name ]);
              };
              var e$prime = norm(e);
              var b$prime = norm(b);
              var $7 = b$prime < 0 || (b$prime >= l || (e$prime < 0 || (e$prime >= l || b$prime > e$prime)));
              if ($7) {
                  return Data_Maybe.Nothing.value;
              };
              return new Data_Maybe.Just($foreign._slice(b)(e)(s));
          };
      };
  };
  var lastIndexOf$prime = $foreign["_lastIndexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var lastIndexOf = $foreign._lastIndexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripSuffix = function (v) {
      return function (str) {
          var v1 = lastIndexOf(v)(str);
          if (v1 instanceof Data_Maybe.Just && v1.value0 === ($foreign.length(str) - $foreign.length(v) | 0)) {
              return Data_Maybe.Just.create($foreign.take(v1.value0)(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var indexOf$prime = $foreign["_indexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = indexOf(v)(str);
          if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
              return Data_Maybe.Just.create($foreign.drop($foreign.length(v))(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var dropWhile = function (p) {
      return function (s) {
          return $foreign.drop($foreign.countPrefix(p)(s))(s);
      };
  };
  var dropRight = function (i) {
      return function (s) {
          return $foreign.take($foreign.length(s) - i | 0)(s);
      };
  };
  var contains = function (pat) {
      return function ($16) {
          return Data_Maybe.isJust(indexOf(pat)($16));
      };
  };
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["stripPrefix"] = stripPrefix;
  exports["stripSuffix"] = stripSuffix;
  exports["contains"] = contains;
  exports["charAt"] = charAt;
  exports["toChar"] = toChar;
  exports["uncons"] = uncons;
  exports["indexOf"] = indexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["lastIndexOf"] = lastIndexOf;
  exports["lastIndexOf'"] = lastIndexOf$prime;
  exports["takeRight"] = takeRight;
  exports["takeWhile"] = takeWhile;
  exports["dropRight"] = dropRight;
  exports["dropWhile"] = dropWhile;
  exports["slice"] = slice;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["length"] = $foreign.length;
  exports["countPrefix"] = $foreign.countPrefix;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
  exports["splitAt"] = $foreign.splitAt;
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.CodePoints"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];                 
  var CodePoint = function (x) {
      return x;
  };
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  };
  var showCodePoint = new Data_Show.Show(function (v) {
      return "(CodePoint 0x" + (Data_String_Common.toUpper(Data_Int.toStringAs(Data_Int.hexadecimal)(v)) + ")");
  });
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && isTrail(cu1);
      if ($25) {
          return unsurrogate(cu0)(cu1);
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign._unsafeCodePointAt0(unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign._toCodePointArray(toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($51) {
      return Data_Array.length(toCodePointArray($51));
  };
  var lastIndexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.lastIndexOf(p)(s));
      };
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = function ($52) {
      return Data_String_CodeUnits.singleton(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar))($52));
  };
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };
  var fromCodePointArray = $foreign._fromCodePointArray(singletonFallback);
  var singleton = $foreign._singleton(singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign._take(takeFallback);
  var lastIndexOf$prime = function (p) {
      return function (i) {
          return function (s) {
              var i$prime = Data_String_CodeUnits.length(take(i)(s));
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (k) {
                  return length(Data_String_CodeUnits.take(k)(s));
              })(Data_String_CodeUnits["lastIndexOf'"](p)(i$prime)(s));
          };
      };
  };
  var splitAt = function (i) {
      return function (s) {
          var before = take(i)(s);
          return {
              before: before,
              after: Data_String_CodeUnits.drop(Data_String_CodeUnits.length(before))(s)
          };
      };
  };
  var eqCodePoint = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordCodePoint = new Data_Ord.Ord(function () {
      return eqCodePoint;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  var indexOf$prime = function (p) {
      return function (i) {
          return function (s) {
              var s$prime = drop(i)(s);
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (k) {
                  return i + length(Data_String_CodeUnits.take(k)(s$prime)) | 0;
              })(Data_String_CodeUnits.indexOf(p)(s$prime));
          };
      };
  };
  var countTail = function ($copy_p) {
      return function ($copy_s) {
          return function ($copy_accum) {
              var $tco_var_p = $copy_p;
              var $tco_var_s = $copy_s;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(p, s, accum) {
                  var v = uncons(s);
                  if (v instanceof Data_Maybe.Just) {
                      var $38 = p(v.value0.head);
                      if ($38) {
                          $tco_var_p = p;
                          $tco_var_s = v.value0.tail;
                          $copy_accum = accum + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return accum;
                  };
                  $tco_done = true;
                  return accum;
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);
              };
              return $tco_result;
          };
      };
  };
  var countFallback = function (p) {
      return function (s) {
          return countTail(p)(s)(0);
      };
  };
  var countPrefix = $foreign._countPrefix(countFallback)(unsafeCodePointAt0);
  var dropWhile = function (p) {
      return function (s) {
          return drop(countPrefix(p)(s))(s);
      };
  };
  var takeWhile = function (p) {
      return function (s) {
          return take(countPrefix(p)(s))(s);
      };
  };
  var codePointFromChar = function ($53) {
      return CodePoint(Data_Enum.fromEnum(Data_Enum.boundedEnumChar)($53));
  };
  var codePointAtFallback = function ($copy_n) {
      return function ($copy_s) {
          var $tco_var_n = $copy_n;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(n, s) {
              var v = uncons(s);
              if (v instanceof Data_Maybe.Just) {
                  var $43 = n === 0;
                  if ($43) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0.head);
                  };
                  $tco_var_n = n - 1 | 0;
                  $copy_s = v.value0.tail;
                  return;
              };
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_n, $copy_s);
          };
          return $tco_result;
      };
  };
  var codePointAt = function (v) {
      return function (v1) {
          if (v < 0) {
              return Data_Maybe.Nothing.value;
          };
          if (v === 0 && v1 === "") {
              return Data_Maybe.Nothing.value;
          };
          if (v === 0) {
              return new Data_Maybe.Just(unsafeCodePointAt0(v1));
          };
          return $foreign._codePointAt(codePointAtFallback)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(unsafeCodePointAt0)(v)(v1);
      };
  };
  var boundedCodePoint = new Data_Bounded.Bounded(function () {
      return ordCodePoint;
  }, 0, 1114111);
  var boundedEnumCodePoint = new Data_Enum.BoundedEnum(function () {
      return boundedCodePoint;
  }, function () {
      return enumCodePoint;
  }, 1114111 + 1 | 0, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 1114111) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.String.CodePoints line 63, column 1 - line 63, column 55: " + [ n.constructor.name ]);
  });
  var enumCodePoint = new Data_Enum.Enum(function () {
      return ordCodePoint;
  }, Data_Enum.defaultPred(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)), Data_Enum.defaultSucc(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)));
  exports["codePointFromChar"] = codePointFromChar;
  exports["singleton"] = singleton;
  exports["fromCodePointArray"] = fromCodePointArray;
  exports["toCodePointArray"] = toCodePointArray;
  exports["codePointAt"] = codePointAt;
  exports["uncons"] = uncons;
  exports["length"] = length;
  exports["countPrefix"] = countPrefix;
  exports["indexOf"] = indexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["lastIndexOf"] = lastIndexOf;
  exports["lastIndexOf'"] = lastIndexOf$prime;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["splitAt"] = splitAt;
  exports["eqCodePoint"] = eqCodePoint;
  exports["ordCodePoint"] = ordCodePoint;
  exports["showCodePoint"] = showCodePoint;
  exports["boundedCodePoint"] = boundedCodePoint;
  exports["enumCodePoint"] = enumCodePoint;
  exports["boundedEnumCodePoint"] = boundedEnumCodePoint;
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_CodePoints = PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Global = PS["Global"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Perm = function (x) {
      return x;
  };
  var Perms = function (x) {
      return x;
  };
  var write = {
      r: false,
      w: true,
      x: false
  };
  var semiringPerm = new Data_Semiring.Semiring(function (v) {
      return function (v1) {
          return {
              r: v.r || v1.r,
              w: v.w || v1.w,
              x: v.x || v1.x
          };
      };
  }, function (v) {
      return function (v1) {
          return {
              r: v.r && v1.r,
              w: v.w && v1.w,
              x: v.x && v1.x
          };
      };
  }, {
      r: true,
      w: true,
      x: true
  }, {
      r: false,
      w: false,
      x: false
  });
  var read = {
      r: true,
      w: false,
      x: false
  };
  var permToInt = function (v) {
      return ((function () {
          if (v.r) {
              return 4;
          };
          return 0;
      })() + (function () {
          if (v.w) {
              return 2;
          };
          return 0;
      })() | 0) + (function () {
          if (v.x) {
              return 1;
          };
          return 0;
      })() | 0;
  };
  var permToString = function ($97) {
      return Data_Show.show(Data_Show.showInt)(permToInt($97));
  };
  var permsToString = function (v) {
      return "0" + (permToString(v.u) + (permToString(v.g) + permToString(v.o)));
  };
  var permsToInt = function ($98) {
      return Data_Maybe.fromJust()(Data_Int.fromNumber(Global.readInt(8)(permsToString($98))));
  };
  var none = Data_Semiring.zero(semiringPerm);
  var mkPerms = function (u) {
      return function (g) {
          return function (o) {
              return {
                  u: u,
                  g: g,
                  o: o
              };
          };
      };
  };
  var mkPerm = function (r) {
      return function (w) {
          return function (x) {
              return {
                  r: r,
                  w: w,
                  x: x
              };
          };
      };
  };
  var execute = {
      r: false,
      w: false,
      x: true
  };
  var permFromChar = function (c) {
      if (c === "0") {
          return Data_Maybe.Just.create(none);
      };
      if (c === "1") {
          return Data_Maybe.Just.create(execute);
      };
      if (c === "2") {
          return Data_Maybe.Just.create(write);
      };
      if (c === "3") {
          return Data_Maybe.Just.create(Data_Semiring.add(semiringPerm)(write)(execute));
      };
      if (c === "4") {
          return Data_Maybe.Just.create(read);
      };
      if (c === "5") {
          return Data_Maybe.Just.create(Data_Semiring.add(semiringPerm)(read)(execute));
      };
      if (c === "6") {
          return Data_Maybe.Just.create(Data_Semiring.add(semiringPerm)(read)(write));
      };
      if (c === "7") {
          return Data_Maybe.Just.create(Data_Semiring.add(semiringPerm)(Data_Semiring.add(semiringPerm)(read)(write))(execute));
      };
      return Data_Maybe.Nothing.value;
  };
  var permsFromString = (function () {
      var zeroChar = Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Enum.boundedEnumChar)(48));
      var dropPrefix = function (x) {
          return function (xs) {
              if (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqChar))(Data_String_CodeUnits.charAt(0)(xs))(new Data_Maybe.Just(x))) {
                  return Data_String_CodePoints.drop(1)(xs);
              };
              if (Data_Boolean.otherwise) {
                  return xs;
              };
              throw new Error("Failed pattern match at Node.FS.Perms line 126, column 5 - line 128, column 35: " + [ x.constructor.name, xs.constructor.name ]);
          };
      };
      var _perms = function (v) {
          if (v.length === 3) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(mkPerms)(permFromChar(v[0])))(permFromChar(v[1])))(permFromChar(v[2]));
          };
          return Data_Maybe.Nothing.value;
      };
      return function ($99) {
          return _perms(Data_String_CodeUnits.toCharArray(dropPrefix(zeroChar)($99)));
      };
  })();
  var eqPerm = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.r === v1.r && (v.w === v1.w && v.x === v1.x);
      };
  });
  var eqPerms = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return Data_Eq.eq(eqPerm)(v.u)(v1.u) && (Data_Eq.eq(eqPerm)(v.g)(v1.g) && Data_Eq.eq(eqPerm)(v.o)(v1.o));
      };
  });
  var ordPerm = new Data_Ord.Ord(function () {
      return eqPerm;
  }, function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_Ord.ordArray(Data_Ord.ordBoolean))([ v.r, v.w, v.x ])([ v1.r, v1.w, v1.x ]);
      };
  });
  var ordPerms = new Data_Ord.Ord(function () {
      return eqPerms;
  }, function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_Ord.ordArray(ordPerm))([ v.u, v.g, v.o ])([ v1.u, v1.g, v1.o ]);
      };
  });
  var all = Data_Semiring.one(semiringPerm);
  var showPerm = new Data_Show.Show(function (v) {
      if (Data_Eq.eq(eqPerm)(v)(none)) {
          return "none";
      };
      if (Data_Eq.eq(eqPerm)(v)(all)) {
          return "all";
      };
      var ps = Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
          if (v.r) {
              return [ "read" ];
          };
          return [  ];
      })())(Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
          if (v.w) {
              return [ "write" ];
          };
          return [  ];
      })())((function () {
          if (v.x) {
              return [ "execute" ];
          };
          return [  ];
      })()));
      return Data_String_Common.joinWith(" + ")(ps);
  });
  var showPerms = new Data_Show.Show(function (v) {
      var f = function (perm) {
          var str = Data_Show.show(showPerm)(perm);
          var $93 = Data_Maybe.isNothing(Data_String_CodePoints.indexOf(" ")(str));
          if ($93) {
              return str;
          };
          return "(" + (str + ")");
      };
      return "mkPerms " + Data_String_Common.joinWith(" ")(Data_Functor.map(Data_Functor.functorArray)(f)([ v.u, v.g, v.o ]));
  });
  exports["none"] = none;
  exports["read"] = read;
  exports["write"] = write;
  exports["execute"] = execute;
  exports["all"] = all;
  exports["mkPerms"] = mkPerms;
  exports["permsFromString"] = permsFromString;
  exports["permsToString"] = permsToString;
  exports["permsToInt"] = permsToInt;
  exports["eqPerm"] = eqPerm;
  exports["ordPerm"] = ordPerm;
  exports["showPerm"] = showPerm;
  exports["semiringPerm"] = semiringPerm;
  exports["eqPerms"] = eqPerms;
  exports["ordPerms"] = ordPerms;
  exports["showPerms"] = showPerms;
})(PS["Node.FS.Perms"] = PS["Node.FS.Perms"] || {});
(function(exports) {
    "use strict";

  exports.showStatsObj = require("util").inspect;

  exports.statsMethod = function (m, s) {
    return s[m]();
  };
})(PS["Node.FS.Stats"] = PS["Node.FS.Stats"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  var createDate = function (y, m, d, h, mi, s, ms) {
    var date = new Date(Date.UTC(y, m, d, h, mi, s, ms));
    if (y >= 0 && y < 100) {
      date.setUTCFullYear(y);
    }
    return date;
  };

  var createLocalDate = function (y, m, d, h, mi, s, ms) {
    var date = new Date(y, m, d, h, mi, s, ms);
    if (y >= 0 && y < 100) {
      date.setFullYear(y);
    }
    return date;
  };

  exports.now = function () {
    return new Date();
  };

  exports.isValid = function (date) {
    return !isNaN(date.getTime());
  };

  exports.toInstantImpl = function (just) {
    return function (nothing) {
      return function (date) {
        var t = date.getTime();
        return isNaN(t) ? nothing : just(t);
      };
    };
  };

  exports.fromInstant = function (instant) {
    return new Date(instant);
  };

  exports.jsdate = function (parts) {
    return createDate(parts.year, parts.month, parts.day, parts.hour, parts.minute, parts.second, parts.millisecond);
  };

  exports.jsdateLocal = function (parts) {
    return function () {
      return createLocalDate(parts.year, parts.month, parts.day, parts.hour, parts.minute, parts.second, parts.millisecond);
    };
  };

  exports.dateMethod = function (method, date) {
    return date[method]();
  };

  exports.dateMethodEff = function (method, date) {
    return function () {
      return date[method]();
    };
  };

  exports.parse = function (dateString) {
    return function () {
      return new Date(dateString);
    };
  };

  exports.fromTime = function (time) {
    return new Date(time);
  };
})(PS["Data.JSDate"] = PS["Data.JSDate"] || {});
(function(exports) {
    "use strict";

  exports.unsafeToForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };

  exports.isArray = Array.isArray || function (value) {
    return Object.prototype.toString.call(value) === "[object Array]";
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];                 
  var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);
  var runExcept = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
  };
  var mapExcept = function (f) {
      return Control_Monad_Except_Trans.mapExceptT(function ($1) {
          return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($1)));
      });
  };
  exports["runExcept"] = runExcept;
  exports["mapExcept"] = mapExcept;
  exports["withExcept"] = withExcept;
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var unfoldable1NonEmpty = function (dictUnfoldable) {
      return new Data_Unfoldable1.Unfoldable1(function (f) {
          return function (b) {
              return Data_Tuple.uncurry(NonEmpty.create)(Data_Functor.map(Data_Tuple.functorTuple)(Data_Unfoldable.unfoldr(dictUnfoldable)(Data_Functor.map(Data_Maybe.functorMaybe)(f)))(f(b)));
          };
      });
  };
  var tail = function (v) {
      return v.value1;
  };
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var showNonEmpty = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var oneOf = function (dictAlternative) {
      return function (v) {
          return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Control_Applicative.pure(dictAlternative.Applicative0())(v.value0))(v.value1);
      };
  };
  var head = function (v) {
      return v.value0;
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (m) {
              return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
          };
      });
  };
  var functorWithIndex = function (dictFunctorWithIndex) {
      return new Data_FunctorWithIndex.FunctorWithIndex(function () {
          return functorNonEmpty(dictFunctorWithIndex.Functor0());
      }, function (f) {
          return function (v) {
              return new NonEmpty(f(Data_Maybe.Nothing.value)(v.value0), Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function ($146) {
                  return f(Data_Maybe.Just.create($146));
              })(v.value1));
          };
      });
  };
  var fromNonEmpty = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var foldl1 = function (dictFoldable) {
      return function (f) {
          return function (v) {
              return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
          };
      };
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  var foldableWithIndexNonEmpty = function (dictFoldableWithIndex) {
      return new Data_FoldableWithIndex.FoldableWithIndex(function () {
          return foldableNonEmpty(dictFoldableWithIndex.Foldable0());
      }, function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(Data_Maybe.Nothing.value)(v.value0))(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function ($147) {
                      return f(Data_Maybe.Just.create($147));
                  })(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function ($148) {
                      return f(Data_Maybe.Just.create($148));
                  })(f(Data_Maybe.Nothing.value)(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(Data_Maybe.Nothing.value)(v.value0)(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function ($149) {
                      return f(Data_Maybe.Just.create($149));
                  })(b)(v.value1));
              };
          };
      });
  };
  var traversableNonEmpty = function (dictTraversable) {
      return new Data_Traversable.Traversable(function () {
          return foldableNonEmpty(dictTraversable.Foldable1());
      }, function () {
          return functorNonEmpty(dictTraversable.Functor0());
      }, function (dictApplicative) {
          return function (v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(v.value0))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
          };
      }, function (dictApplicative) {
          return function (f) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(f(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
              };
          };
      });
  };
  var traversableWithIndexNonEmpty = function (dictTraversableWithIndex) {
      return new Data_TraversableWithIndex.TraversableWithIndex(function () {
          return foldableWithIndexNonEmpty(dictTraversableWithIndex.FoldableWithIndex1());
      }, function () {
          return functorWithIndex(dictTraversableWithIndex.FunctorWithIndex0());
      }, function () {
          return traversableNonEmpty(dictTraversableWithIndex.Traversable2());
      }, function (dictApplicative) {
          return function (f) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(f(Data_Maybe.Nothing.value)(v.value0)))(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function ($150) {
                      return f(Data_Maybe.Just.create($150));
                  })(v.value1));
              };
          };
      });
  };
  var foldable1NonEmpty = function (dictFoldable) {
      return new Data_Semigroup_Foldable.Foldable1(function () {
          return foldableNonEmpty(dictFoldable);
      }, function (dictSemigroup) {
          return Data_Semigroup_Foldable.foldMap1(foldable1NonEmpty(dictFoldable))(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
      }, function (dictSemigroup) {
          return function (f) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(function (s) {
                      return function (a1) {
                          return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
                      };
                  })(f(v.value0))(v.value1);
              };
          };
      });
  };
  var eqNonEmpty = function (dictEq1) {
      return function (dictEq) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq1(dictEq1)(dictEq)(x.value1)(y.value1);
              };
          });
      };
  };
  var ordNonEmpty = function (dictOrd1) {
      return function (dictOrd) {
          return new Data_Ord.Ord(function () {
              return eqNonEmpty(dictOrd1.Eq10())(dictOrd.Eq0());
          }, function (x) {
              return function (y) {
                  var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare1(dictOrd1)(dictOrd)(x.value1)(y.value1);
              };
          });
      };
  };
  var eq1NonEmpty = function (dictEq1) {
      return new Data_Eq.Eq1(function (dictEq) {
          return Data_Eq.eq(eqNonEmpty(dictEq1)(dictEq));
      });
  };
  var ord1NonEmpty = function (dictOrd1) {
      return new Data_Ord.Ord1(function () {
          return eq1NonEmpty(dictOrd1.Eq10());
      }, function (dictOrd) {
          return Data_Ord.compare(ordNonEmpty(dictOrd1)(dictOrd));
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["foldl1"] = foldl1;
  exports["fromNonEmpty"] = fromNonEmpty;
  exports["oneOf"] = oneOf;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["showNonEmpty"] = showNonEmpty;
  exports["eqNonEmpty"] = eqNonEmpty;
  exports["eq1NonEmpty"] = eq1NonEmpty;
  exports["ordNonEmpty"] = ordNonEmpty;
  exports["ord1NonEmpty"] = ord1NonEmpty;
  exports["functorNonEmpty"] = functorNonEmpty;
  exports["functorWithIndex"] = functorWithIndex;
  exports["foldableNonEmpty"] = foldableNonEmpty;
  exports["foldableWithIndexNonEmpty"] = foldableWithIndexNonEmpty;
  exports["traversableNonEmpty"] = traversableNonEmpty;
  exports["traversableWithIndexNonEmpty"] = traversableWithIndexNonEmpty;
  exports["foldable1NonEmpty"] = foldable1NonEmpty;
  exports["unfoldable1NonEmpty"] = unfoldable1NonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var toList = function (v) {
      return new Cons(v.value0, v.value1);
  };
  var newtypeNonEmptyList = new Data_Newtype.Newtype(function (n) {
      return n;
  }, NonEmptyList);
  var nelCons = function (a) {
      return function (v) {
          return new Data_NonEmpty.NonEmpty(a, new Cons(v.value0, v.value1));
      };
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($174) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($174));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 81, column 12 - line 83, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($175) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($175));
          };
      };
  });
  var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
  var foldableWithIndexList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableList;
  }, function (dictMonoid) {
      return function (f) {
          return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
              return function (acc) {
                  return function ($176) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(i)($176));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      return function (acc) {
          return function ($177) {
              return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v) {
                  return function (a) {
                      return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
                  };
              })(new Data_Tuple.Tuple(0, acc))($177));
          };
      };
  }, function (f) {
      return function (b) {
          return function (xs) {
              var v = (function () {
                  var rev = Data_Foldable.foldl(foldableList)(function (v1) {
                      return function (a) {
                          return new Data_Tuple.Tuple(v1.value0 + 1 | 0, new Cons(a, v1.value1));
                      };
                  });
                  return rev(new Data_Tuple.Tuple(0, Nil.value))(xs);
              })();
              return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v1) {
                  return function (a) {
                      return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
                  };
              })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
          };
      };
  });
  var foldableWithIndexNonEmptyList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableNonEmptyList;
  }, function (dictMonoid) {
      return function (f) {
          return function (v) {
              return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)(function ($178) {
                  return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($178));
              })(v);
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function ($179) {
                  return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($179));
              })(b)(v);
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function ($180) {
                  return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($180));
              })(b)(v);
          };
      };
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var functorWithIndexList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorList;
  }, function (f) {
      return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
          return function (x) {
              return function (acc) {
                  return new Cons(f(i)(x), acc);
              };
          };
      })(Nil.value);
  });
  var functorWithIndexNonEmptyList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorNonEmptyList;
  }, function (fn) {
      return function (v) {
          return NonEmptyList(Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))(function ($181) {
              return fn(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($181));
          })(v));
      };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
      return function (as$prime) {
          return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
      });
  };
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function ($182) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value))(Data_Foldable.foldl(foldableList)(function (acc) {
                  return function ($183) {
                      return Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc)(f($183));
                  };
              })(Control_Applicative.pure(dictApplicative)(Nil.value))($182));
          };
      };
  });
  var traversableNonEmptyList = Data_NonEmpty.traversableNonEmpty(traversableList);
  var traversableWithIndexList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexList;
  }, function () {
      return functorWithIndexList;
  }, function () {
      return traversableList;
  }, function (dictApplicative) {
      return function (f) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($184) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(rev)(Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
                  return function (acc) {
                      return function ($185) {
                          return Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc)(f(i)($185));
                      };
                  };
              })(Control_Applicative.pure(dictApplicative)(Nil.value))($184));
          };
      };
  });
  var traversableWithIndexNonEmptyList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexNonEmptyList;
  }, function () {
      return functorWithIndexNonEmptyList;
  }, function () {
      return traversableNonEmptyList;
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmptyList)(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)(function ($186) {
                  return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($186));
              })(v));
          };
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 105, column 22 - line 107, column 61: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 112, column 22 - line 114, column 52: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldable1NonEmptyList = Data_NonEmpty.unfoldable1NonEmpty(unfoldableList);
  var foldable1NonEmptyList = Data_NonEmpty.foldable1NonEmpty(foldableList);
  var extendNonEmptyList = new Control_Extend.Extend(function () {
      return functorNonEmptyList;
  }, function (f) {
      return function (v) {
          var go = function (a) {
              return function (v1) {
                  return {
                      val: new Cons(f(new Data_NonEmpty.NonEmpty(a, v1.acc)), v1.val),
                      acc: new Cons(a, v1.acc)
                  };
              };
          };
          return new Data_NonEmpty.NonEmpty(f(v), (Data_Foldable.foldr(foldableList)(go)({
              val: Nil.value,
              acc: Nil.value
          })(v.value1)).val);
      };
  });
  var extendList = new Control_Extend.Extend(function () {
      return functorList;
  }, function (f) {
      return function (v) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              var go = function (a$prime) {
                  return function (v1) {
                      var acc$prime = new Cons(a$prime, v1.acc);
                      return {
                          val: new Cons(f(acc$prime), v1.val),
                          acc: acc$prime
                      };
                  };
              };
              return new Cons(f(v), (Data_Foldable.foldr(foldableList)(go)({
                  val: Nil.value,
                  acc: Nil.value
              })(v.value1)).val);
          };
          throw new Error("Failed pattern match at Data.List.Types line 152, column 1 - line 152, column 35: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var eq1List = new Data_Eq.Eq1(function (dictEq) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      return function ($copy_v2) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, v1, v2) {
                              if (!v2) {
                                  $tco_done = true;
                                  return false;
                              };
                              if (v instanceof Nil && v1 instanceof Nil) {
                                  $tco_done = true;
                                  return v2;
                              };
                              if (v instanceof Cons && v1 instanceof Cons) {
                                  $tco_var_v = v.value1;
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                                  return;
                              };
                              $tco_done = true;
                              return false;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
                          };
                          return $tco_result;
                      };
                  };
              };
              return go(xs)(ys)(true);
          };
      };
  });
  var eqList = function (dictEq) {
      return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
  };
  var eqNonEmptyList = function (dictEq) {
      return Data_NonEmpty.eqNonEmpty(eq1List)(dictEq);
  };
  var ord1List = new Data_Ord.Ord1(function () {
      return eq1List;
  }, function (dictOrd) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      var $tco_var_v = $copy_v;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v, v1) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.EQ.value;
                          };
                          if (v instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.LT.value;
                          };
                          if (v1 instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.GT.value;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_var_v = v.value1;
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              $tco_done = true;
                              return v2;
                          };
                          throw new Error("Failed pattern match at Data.List.Types line 55, column 5 - line 55, column 20: " + [ v.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return go(xs)(ys);
          };
      };
  });
  var ordList = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqList(dictOrd.Eq0());
      }, Data_Ord.compare1(ord1List)(dictOrd));
  };
  var ordNonEmptyList = function (dictOrd) {
      return Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd);
  };
  var comonadNonEmptyList = new Control_Comonad.Comonad(function () {
      return extendNonEmptyList;
  }, function (v) {
      return v.value0;
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 127, column 1 - line 127, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
      };
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 134, column 1 - line 134, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindNonEmptyList = new Control_Bind.Bind(function () {
      return applyNonEmptyList;
  }, function (v) {
      return function (f) {
          var v1 = f(v.value0);
          return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(Control_Bind.bind(bindList)(v.value1)(function ($187) {
              return toList(f($187));
          })));
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  var monadList = new Control_Monad.Monad(function () {
      return applicativeList;
  }, function () {
      return bindList;
  });
  var altNonEmptyList = new Control_Alt.Alt(function () {
      return functorNonEmptyList;
  }, Data_Semigroup.append(semigroupNonEmptyList));
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var alternativeList = new Control_Alternative.Alternative(function () {
      return applicativeList;
  }, function () {
      return plusList;
  });
  var monadZeroList = new Control_MonadZero.MonadZero(function () {
      return alternativeList;
  }, function () {
      return monadList;
  });
  var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
      return monadZeroList;
  });
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, function ($188) {
      return NonEmptyList(Data_NonEmpty.singleton(plusList)($188));
  });
  var monadNonEmptyList = new Control_Monad.Monad(function () {
      return applicativeNonEmptyList;
  }, function () {
      return bindNonEmptyList;
  });
  var traversable1NonEmptyList = new Data_Semigroup_Traversable.Traversable1(function () {
      return foldable1NonEmptyList;
  }, function () {
      return traversableNonEmptyList;
  }, function (dictApply) {
      return Data_Semigroup_Traversable.traverse1(traversable1NonEmptyList)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApply) {
      return function (f) {
          return function (v) {
              return Data_Functor.mapFlipped(dictApply.Functor0())(Data_Foldable.foldl(foldableList)(function (acc) {
                  return function ($189) {
                      return Control_Apply.lift2(dictApply)(Data_Function.flip(nelCons))(acc)(f($189));
                  };
              })(Data_Functor.map(dictApply.Functor0())(Control_Applicative.pure(applicativeNonEmptyList))(f(v.value0)))(v.value1))(function (v1) {
                  return Data_Foldable.foldl(foldableList)(Data_Function.flip(nelCons))(Control_Applicative.pure(applicativeNonEmptyList)(v1.value0))(v1.value1);
              });
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["toList"] = toList;
  exports["nelCons"] = nelCons;
  exports["showList"] = showList;
  exports["eqList"] = eqList;
  exports["eq1List"] = eq1List;
  exports["ordList"] = ordList;
  exports["ord1List"] = ord1List;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["functorWithIndexList"] = functorWithIndexList;
  exports["foldableList"] = foldableList;
  exports["foldableWithIndexList"] = foldableWithIndexList;
  exports["unfoldable1List"] = unfoldable1List;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["traversableWithIndexList"] = traversableWithIndexList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["monadList"] = monadList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["alternativeList"] = alternativeList;
  exports["monadZeroList"] = monadZeroList;
  exports["monadPlusList"] = monadPlusList;
  exports["extendList"] = extendList;
  exports["newtypeNonEmptyList"] = newtypeNonEmptyList;
  exports["eqNonEmptyList"] = eqNonEmptyList;
  exports["ordNonEmptyList"] = ordNonEmptyList;
  exports["showNonEmptyList"] = showNonEmptyList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applyNonEmptyList"] = applyNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["bindNonEmptyList"] = bindNonEmptyList;
  exports["monadNonEmptyList"] = monadNonEmptyList;
  exports["altNonEmptyList"] = altNonEmptyList;
  exports["extendNonEmptyList"] = extendNonEmptyList;
  exports["comonadNonEmptyList"] = comonadNonEmptyList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
  exports["traversableNonEmptyList"] = traversableNonEmptyList;
  exports["foldable1NonEmptyList"] = foldable1NonEmptyList;
  exports["unfoldable1NonEmptyList"] = unfoldable1NonEmptyList;
  exports["functorWithIndexNonEmptyList"] = functorWithIndexNonEmptyList;
  exports["foldableWithIndexNonEmptyList"] = foldableWithIndexNonEmptyList;
  exports["traversableWithIndexNonEmptyList"] = traversableWithIndexNonEmptyList;
  exports["traversable1NonEmptyList"] = traversable1NonEmptyList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Pattern = function (x) {
      return x;
  };
  var updateAt = function (v) {
      return function (v1) {
          return function (v2) {
              if (v === 0 && v2 instanceof Data_List_Types.Cons) {
                  return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2.value1));
              };
              if (v2 instanceof Data_List_Types.Cons) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                      return new Data_List_Types.Cons(v2.value0, v3);
                  })(updateAt(v - 1 | 0)(v1)(v2.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var unzip = Data_Foldable.foldr(Data_List_Types.foldableList)(function (v) {
      return function (v1) {
          return new Data_Tuple.Tuple(new Data_List_Types.Cons(v.value0, v1.value0), new Data_List_Types.Cons(v.value1, v1.value1));
      };
  })(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_Types.Nil.value));
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 259, column 1 - line 259, column 66: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 245, column 1 - line 245, column 43: " + [ v.constructor.name ]);
  };
  var stripPrefix = function (dictEq) {
      return function (v) {
          return function (s) {
              var go = function (prefix) {
                  return function (input) {
                      if (prefix instanceof Data_List_Types.Cons && (input instanceof Data_List_Types.Cons && Data_Eq.eq(dictEq)(prefix.value0)(input.value0))) {
                          return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
                              a: prefix.value1,
                              b: input.value1
                          }));
                      };
                      if (prefix instanceof Data_List_Types.Nil) {
                          return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
                      };
                      return Data_Maybe.Nothing.value;
                  };
              };
              return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
          };
      };
  };
  var span = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
              var v2 = span(v)(v1.value1);
              return {
                  init: new Data_List_Types.Cons(v1.value0, v2.init),
                  rest: v2.rest
              };
          };
          return {
              init: Data_List_Types.Nil.value,
              rest: v1
          };
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_List_Types.Cons.create)(new Data_List_Types.Cons(x, Data_List_Types.Nil.value))(xs);
      };
  };
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var sortBy = function (cmp) {
      var merge = function (v) {
          return function (v1) {
              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                  if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
                      return new Data_List_Types.Cons(v1.value0, merge(v)(v1.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_List_Types.Cons(v.value0, merge(v.value1)(v1));
                  };
              };
              if (v instanceof Data_List_Types.Nil) {
                  return v1;
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  return v;
              };
              throw new Error("Failed pattern match at Data.List line 473, column 3 - line 473, column 38: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      var mergePairs = function (v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
              return new Data_List_Types.Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
          };
          return v;
      };
      var mergeAll = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return v.value0;
              };
              $copy_v = mergePairs(v);
              return;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      var sequences = function (v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
              if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
                  return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
              };
              if (Data_Boolean.otherwise) {
                  return ascending(v.value1.value0)(function (v1) {
                      return new Data_List_Types.Cons(v.value0, v1);
                  })(v.value1.value1);
              };
          };
          return singleton(v);
      };
      var descending = function ($copy_a) {
          return function ($copy_as) {
              return function ($copy_v) {
                  var $tco_var_a = $copy_a;
                  var $tco_var_as = $copy_as;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(a, as, v) {
                      if (v instanceof Data_List_Types.Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                          $tco_var_a = v.value0;
                          $tco_var_as = new Data_List_Types.Cons(a, as);
                          $copy_v = v.value1;
                          return;
                      };
                      $tco_done = true;
                      return new Data_List_Types.Cons(new Data_List_Types.Cons(a, as), sequences(v));
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                  };
                  return $tco_result;
              };
          };
      };
      var ascending = function ($copy_a) {
          return function ($copy_as) {
              return function ($copy_v) {
                  var $tco_var_a = $copy_a;
                  var $tco_var_as = $copy_as;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(a, as, v) {
                      if (v instanceof Data_List_Types.Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                          $tco_var_a = v.value0;
                          $tco_var_as = function (ys) {
                              return as(new Data_List_Types.Cons(a, ys));
                          };
                          $copy_v = v.value1;
                          return;
                      };
                      $tco_done = true;
                      return new Data_List_Types.Cons(as(singleton(a)), sequences(v));
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                  };
                  return $tco_result;
              };
          };
      };
      return function ($337) {
          return mergeAll(sequences($337));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var tails = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return singleton(Data_List_Types.Nil.value);
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_List_Types.Cons(v, tails(v.value1));
      };
      throw new Error("Failed pattern match at Data.List line 626, column 1 - line 626, column 43: " + [ v.constructor.name ]);
  };
  var showPattern = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Pattern " + (Data_Show.show(Data_List_Types.showList(dictShow))(v) + ")");
      });
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 3 - line 368, column 19: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var take = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              return function ($copy_v1) {
                  var $tco_var_acc = $copy_acc;
                  var $tco_var_v = $copy_v;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(acc, v, v1) {
                      if (v < 1) {
                          $tco_done = true;
                          return reverse(acc);
                      };
                      if (v1 instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return reverse(acc);
                      };
                      if (v1 instanceof Data_List_Types.Cons) {
                          $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                          $tco_var_v = v - 1 | 0;
                          $copy_v1 = v1.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List line 520, column 3 - line 520, column 35: " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_acc, $tco_var_v, $copy_v1);
                  };
                  return $tco_result;
              };
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var takeWhile = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Cons && p(v.value0)) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  $tco_done = true;
                  return reverse(acc);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var unsnoc = function (lst) {
      var go = function ($copy_v) {
          return function ($copy_acc) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, acc) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return new Data_Maybe.Just({
                          revInit: acc,
                          last: v.value0
                      });
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_v = v.value1;
                      $copy_acc = new Data_List_Types.Cons(v.value0, acc);
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 270, column 3 - line 270, column 23: " + [ v.constructor.name, acc.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_acc);
              };
              return $tco_result;
          };
      };
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (h) {
          return {
              init: reverse(h.revInit),
              last: h.last
          };
      })(go(lst)(Data_List_Types.Nil.value));
  };
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, v1, acc) {
                              if (v instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v.value1;
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List line 718, column 3 - line 718, column 21: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
              };
              return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_List_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Data_Boolean.otherwise) {
              var go = function ($copy_s) {
                  return function ($copy_e) {
                      return function ($copy_step) {
                          return function ($copy_rest) {
                              var $tco_var_s = $copy_s;
                              var $tco_var_e = $copy_e;
                              var $tco_var_step = $copy_step;
                              var $tco_done = false;
                              var $tco_result;
                              function $tco_loop(s, e, step, rest) {
                                  if (s === e) {
                                      $tco_done = true;
                                      return new Data_List_Types.Cons(s, rest);
                                  };
                                  if (Data_Boolean.otherwise) {
                                      $tco_var_s = s + step | 0;
                                      $tco_var_e = e;
                                      $tco_var_step = step;
                                      $copy_rest = new Data_List_Types.Cons(s, rest);
                                      return;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 148, column 3 - line 149, column 65: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                              while (!$tco_done) {
                                  $tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
                              };
                              return $tco_result;
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $223 = start > end;
                  if ($223) {
                      return 1;
                  };
                  return -1 | 0;
              })())(Data_List_Types.Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 144, column 1 - line 144, column 32: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var partition = function (p) {
      return function (xs) {
          var select = function (x) {
              return function (v) {
                  var $226 = p(x);
                  if ($226) {
                      return {
                          no: v.no,
                          yes: new Data_List_Types.Cons(x, v.yes)
                      };
                  };
                  return {
                      no: new Data_List_Types.Cons(x, v.no),
                      yes: v.yes
                  };
              };
          };
          return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
              no: Data_List_Types.Nil.value,
              yes: Data_List_Types.Nil.value
          })(xs);
      };
  };
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var newtypePattern = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Pattern);
  var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexList);
  var mapMaybe = function (f) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var v1 = f(v.value0);
                      if (v1 instanceof Data_Maybe.Nothing) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List line 419, column 5 - line 421, column 32: " + [ v1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.List line 417, column 3 - line 417, column 27: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var manyRec = function (dictMonadRec) {
      return function (dictAlternative) {
          return function (p) {
              var go = function (acc) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (v) {
                      return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v1) {
                          return new Data_List_Types.Cons(v1, acc);
                      })(function (v1) {
                          return reverse(acc);
                      })(v));
                  });
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
          };
      };
  };
  var someRec = function (dictMonadRec) {
      return function (dictAlternative) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(manyRec(dictMonadRec)(dictAlternative)(v));
          };
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
          };
      };
  };
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var last = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return new Data_Maybe.Just(v.value0);
          };
          if (v instanceof Data_List_Types.Cons) {
              $copy_v = v.value1;
              return;
          };
          $tco_done = true;
          return Data_Maybe.Nothing.value;
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var insertBy = function (v) {
      return function (x) {
          return function (v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return singleton(x);
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  var v2 = v(x)(v1.value0);
                  if (v2 instanceof Data_Ordering.GT) {
                      return new Data_List_Types.Cons(v1.value0, insertBy(v)(x)(v1.value1));
                  };
                  return new Data_List_Types.Cons(x, v1);
              };
              throw new Error("Failed pattern match at Data.List line 216, column 1 - line 216, column 68: " + [ v.constructor.name, x.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var insertAt = function (v) {
      return function (v1) {
          return function (v2) {
              if (v === 0) {
                  return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2));
              };
              if (v2 instanceof Data_List_Types.Cons) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                      return new Data_List_Types.Cons(v2.value0, v3);
                  })(insertAt(v - 1 | 0)(v1)(v2.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
  };
  var init = function (lst) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.init;
      })(unsnoc(lst));
  };
  var index = function ($copy_v) {
      return function ($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
              if (v instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_List_Types.Cons && v1 === 0) {
                  $tco_done = true;
                  return new Data_Maybe.Just(v.value0);
              };
              if (v instanceof Data_List_Types.Cons) {
                  $tco_var_v = v.value1;
                  $copy_v1 = v1 - 1 | 0;
                  return;
              };
              throw new Error("Failed pattern match at Data.List line 281, column 1 - line 281, column 44: " + [ v.constructor.name, v1.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_v1);
          };
          return $tco_result;
      };
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 230, column 1 - line 230, column 22: " + [ v.constructor.name ]);
  };
  var transpose = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Nil) {
          return transpose(v.value1);
      };
      if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Cons) {
          return new Data_List_Types.Cons(new Data_List_Types.Cons(v.value0.value0, mapMaybe(head)(v.value1)), transpose(new Data_List_Types.Cons(v.value0.value1, mapMaybe(tail)(v.value1))));
      };
      throw new Error("Failed pattern match at Data.List line 752, column 1 - line 752, column 54: " + [ v.constructor.name ]);
  };
  var groupBy = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Nil) {
              return Data_List_Types.Nil.value;
          };
          if (v1 instanceof Data_List_Types.Cons) {
              var v2 = span(v(v1.value0))(v1.value1);
              return new Data_List_Types.Cons(new Data_NonEmpty.NonEmpty(v1.value0, v2.init), groupBy(v)(v2.rest));
          };
          throw new Error("Failed pattern match at Data.List line 605, column 1 - line 605, column 80: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var group = function (dictEq) {
      return groupBy(Data_Eq.eq(dictEq));
  };
  var group$prime = function (dictOrd) {
      return function ($338) {
          return group(dictOrd.Eq0())(sort(dictOrd)($338));
      };
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  var foldM = function (dictMonad) {
      return function (v) {
          return function (a) {
              return function (v1) {
                  if (v1 instanceof Data_List_Types.Nil) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(a);
                  };
                  if (v1 instanceof Data_List_Types.Cons) {
                      return Control_Bind.bind(dictMonad.Bind1())(v(a)(v1.value0))(function (a$prime) {
                          return foldM(dictMonad)(v)(a$prime)(v1.value1);
                      });
                  };
                  throw new Error("Failed pattern match at Data.List line 763, column 1 - line 763, column 72: " + [ v.constructor.name, a.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var findIndex = function (fn) {
      var go = function ($copy_v) {
          return function ($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                  if (v1 instanceof Data_List_Types.Cons) {
                      if (fn(v1.value0)) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v);
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_v = v + 1 | 0;
                          $copy_v1 = v1.value1;
                          return;
                      };
                  };
                  if (v1 instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List line 301, column 3 - line 301, column 35: " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
              };
              return $tco_result;
          };
      };
      return go(0);
  };
  var findLastIndex = function (fn) {
      return function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
              return (length(xs) - 1 | 0) - v | 0;
          })(findIndex(fn)(reverse(xs)));
      };
  };
  var filterM = function (dictMonad) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Types.Nil.value);
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(v1.value0))(function (v2) {
                      return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(v)(v1.value1))(function (v3) {
                          return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                              if (v2) {
                                  return new Data_List_Types.Cons(v1.value0, v3);
                              };
                              return v3;
                          })());
                      });
                  });
              };
              throw new Error("Failed pattern match at Data.List line 403, column 1 - line 403, column 75: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var filter = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 390, column 3 - line 390, column 27: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var intersectBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return Data_List_Types.Nil.value;
              };
              if (v2 instanceof Data_List_Types.Nil) {
                  return Data_List_Types.Nil.value;
              };
              return filter(function (x) {
                  return Data_Foldable.any(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(v(x))(v2);
              })(v1);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var nubBy = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Nil) {
              return Data_List_Types.Nil.value;
          };
          if (v1 instanceof Data_List_Types.Cons) {
              return new Data_List_Types.Cons(v1.value0, nubBy(v)(filter(function (y) {
                  return !v(v1.value0)(y);
              })(v1.value1)));
          };
          throw new Error("Failed pattern match at Data.List line 644, column 1 - line 644, column 59: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var nub = function (dictEq) {
      return nubBy(Data_Eq.eq(dictEq));
  };
  var eqPattern = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              return Data_Eq.eq(Data_List_Types.eqList(dictEq))(x)(y);
          };
      });
  };
  var ordPattern = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqPattern(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(x)(y);
          };
      });
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Types.Cons && p(v.value0)) {
                  $copy_v = v.value1;
                  return;
              };
              $tco_done = true;
              return v;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return go;
  };
  var dropEnd = function (n) {
      return function (xs) {
          return take(length(xs) - n | 0)(xs);
      };
  };
  var drop = function ($copy_v) {
      return function ($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
              if (v < 1) {
                  $tco_done = true;
                  return v1;
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return Data_List_Types.Nil.value;
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  $tco_var_v = v - 1 | 0;
                  $copy_v1 = v1.value1;
                  return;
              };
              throw new Error("Failed pattern match at Data.List line 543, column 1 - line 543, column 42: " + [ v.constructor.name, v1.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_v1);
          };
          return $tco_result;
      };
  };
  var slice = function (start) {
      return function (end) {
          return function (xs) {
              return take(end - start | 0)(drop(start)(xs));
          };
      };
  };
  var takeEnd = function (n) {
      return function (xs) {
          return drop(length(xs) - n | 0)(xs);
      };
  };
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Data_List_Types.Nil) {
                  return Data_List_Types.Nil.value;
              };
              if (v2 instanceof Data_List_Types.Cons && v(v1)(v2.value0)) {
                  return v2.value1;
              };
              if (v2 instanceof Data_List_Types.Cons) {
                  return new Data_List_Types.Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
              };
              throw new Error("Failed pattern match at Data.List line 671, column 1 - line 671, column 67: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Data_Semigroup.append(Data_List_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  var deleteAt = function (v) {
      return function (v1) {
          if (v === 0 && v1 instanceof Data_List_Types.Cons) {
              return new Data_Maybe.Just(v1.value1);
          };
          if (v1 instanceof Data_List_Types.Cons) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (v2) {
                  return new Data_List_Types.Cons(v1.value0, v2);
              })(deleteAt(v - 1 | 0)(v1.value1));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindList));
  var concat = function (v) {
      return Control_Bind.bind(Data_List_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  var alterAt = function (v) {
      return function (v1) {
          return function (v2) {
              if (v === 0 && v2 instanceof Data_List_Types.Cons) {
                  return Data_Maybe.Just.create((function () {
                      var v3 = v1(v2.value0);
                      if (v3 instanceof Data_Maybe.Nothing) {
                          return v2.value1;
                      };
                      if (v3 instanceof Data_Maybe.Just) {
                          return new Data_List_Types.Cons(v3.value0, v2.value1);
                      };
                      throw new Error("Failed pattern match at Data.List line 352, column 3 - line 354, column 23: " + [ v3.constructor.name ]);
                  })());
              };
              if (v2 instanceof Data_List_Types.Cons) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                      return new Data_List_Types.Cons(v2.value0, v3);
                  })(alterAt(v - 1 | 0)(v1)(v2.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var modifyAt = function (n) {
      return function (f) {
          return alterAt(n)(function ($339) {
              return Data_Maybe.Just.create(f($339));
          });
      };
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["range"] = range;
  exports["some"] = some;
  exports["someRec"] = someRec;
  exports["many"] = many;
  exports["manyRec"] = manyRec;
  exports["null"] = $$null;
  exports["length"] = length;
  exports["snoc"] = snoc;
  exports["insert"] = insert;
  exports["insertBy"] = insertBy;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
  exports["uncons"] = uncons;
  exports["unsnoc"] = unsnoc;
  exports["index"] = index;
  exports["elemIndex"] = elemIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["insertAt"] = insertAt;
  exports["deleteAt"] = deleteAt;
  exports["updateAt"] = updateAt;
  exports["modifyAt"] = modifyAt;
  exports["alterAt"] = alterAt;
  exports["reverse"] = reverse;
  exports["concat"] = concat;
  exports["concatMap"] = concatMap;
  exports["filter"] = filter;
  exports["filterM"] = filterM;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["Pattern"] = Pattern;
  exports["stripPrefix"] = stripPrefix;
  exports["slice"] = slice;
  exports["take"] = take;
  exports["takeEnd"] = takeEnd;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["dropEnd"] = dropEnd;
  exports["dropWhile"] = dropWhile;
  exports["span"] = span;
  exports["group"] = group;
  exports["group'"] = group$prime;
  exports["groupBy"] = groupBy;
  exports["partition"] = partition;
  exports["nub"] = nub;
  exports["nubBy"] = nubBy;
  exports["union"] = union;
  exports["unionBy"] = unionBy;
  exports["delete"] = $$delete;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["intersect"] = intersect;
  exports["intersectBy"] = intersectBy;
  exports["zipWith"] = zipWith;
  exports["zipWithA"] = zipWithA;
  exports["zip"] = zip;
  exports["unzip"] = unzip;
  exports["transpose"] = transpose;
  exports["foldM"] = foldM;
  exports["eqPattern"] = eqPattern;
  exports["ordPattern"] = ordPattern;
  exports["newtypePattern"] = newtypePattern;
  exports["showPattern"] = showPattern;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var zipWith = function (f) {
      return function (v) {
          return function (v1) {
              return new Data_NonEmpty.NonEmpty(f(v.value0)(v1.value0), Data_List.zipWith(f)(v.value1)(v1.value1));
          };
      };
  };
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Semigroup_Traversable.sequence1(Data_List_Types.traversable1NonEmptyList)(dictApplicative.Apply0())(zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var wrappedOperation2 = function (name) {
      return function (f) {
          return function (v) {
              return function (v1) {
                  var v2 = f(new Data_List_Types.Cons(v.value0, v.value1))(new Data_List_Types.Cons(v1.value0, v1.value1));
                  if (v2 instanceof Data_List_Types.Cons) {
                      return new Data_NonEmpty.NonEmpty(v2.value0, v2.value1);
                  };
                  if (v2 instanceof Data_List_Types.Nil) {
                      return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
                  };
                  throw new Error("Failed pattern match at Data.List.NonEmpty line 104, column 3 - line 106, column 81: " + [ v2.constructor.name ]);
              };
          };
      };
  };
  var wrappedOperation = function (name) {
      return function (f) {
          return function (v) {
              var v1 = f(new Data_List_Types.Cons(v.value0, v.value1));
              if (v1 instanceof Data_List_Types.Cons) {
                  return new Data_NonEmpty.NonEmpty(v1.value0, v1.value1);
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
              };
              throw new Error("Failed pattern match at Data.List.NonEmpty line 91, column 3 - line 93, column 81: " + [ v1.constructor.name ]);
          };
      };
  };
  var updateAt = function (i) {
      return function (a) {
          return function (v) {
              if (i === 0) {
                  return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(a, v.value1));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function ($161) {
                      return Data_List_Types.NonEmptyList((function (v1) {
                          return new Data_NonEmpty.NonEmpty(v.value0, v1);
                      })($161));
                  })(Data_List.updateAt(i - 1 | 0)(a)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.NonEmpty line 197, column 1 - line 197, column 75: " + [ i.constructor.name, a.constructor.name, v.constructor.name ]);
          };
      };
  };
  var unzip = function (ts) {
      return new Data_Tuple.Tuple(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Tuple.fst)(ts), Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Tuple.snd)(ts));
  };
  var unsnoc = function (v) {
      var v1 = Data_List.unsnoc(v.value1);
      if (v1 instanceof Data_Maybe.Nothing) {
          return {
              init: Data_List_Types.Nil.value,
              last: v.value0
          };
      };
      if (v1 instanceof Data_Maybe.Just) {
          return {
              init: new Data_List_Types.Cons(v.value0, v1.value0.init),
              last: v1.value0.last
          };
      };
      throw new Error("Failed pattern match at Data.List.NonEmpty line 159, column 35 - line 161, column 50: " + [ v1.constructor.name ]);
  };
  var unionBy = function ($162) {
      return wrappedOperation2("unionBy")(Data_List.unionBy($162));
  };
  var union = function (dictEq) {
      return wrappedOperation2("union")(Data_List.union(dictEq));
  };
  var uncons = function (v) {
      return {
          head: v.value0,
          tail: v.value1
      };
  };
  var toList = function (v) {
      return new Data_List_Types.Cons(v.value0, v.value1);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function ($163) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
                  return new Data_Tuple.Tuple(rec.head, rec.tail);
              })(Data_List.uncons(xs));
          })(toList($163));
      };
  };
  var tail = function (v) {
      return v.value1;
  };
  var sortBy = function ($164) {
      return wrappedOperation("sortBy")(Data_List.sortBy($164));
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var snoc = function (v) {
      return function (y) {
          return new Data_NonEmpty.NonEmpty(v.value0, Data_List.snoc(v.value1)(y));
      };
  };
  var singleton = function ($165) {
      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($165));
  };
  var snoc$prime = function (v) {
      return function (y) {
          if (v instanceof Data_List_Types.Cons) {
              return new Data_NonEmpty.NonEmpty(v.value0, Data_List.snoc(v.value1)(y));
          };
          if (v instanceof Data_List_Types.Nil) {
              return singleton(y);
          };
          throw new Error("Failed pattern match at Data.List.NonEmpty line 139, column 1 - line 139, column 51: " + [ v.constructor.name, y.constructor.name ]);
      };
  };
  var reverse = wrappedOperation("reverse")(Data_List.reverse);
  var nubBy = function ($166) {
      return wrappedOperation("nubBy")(Data_List.nubBy($166));
  };
  var nub = function (dictEq) {
      return wrappedOperation("nub")(Data_List.nub(dictEq));
  };
  var modifyAt = function (i) {
      return function (f) {
          return function (v) {
              if (i === 0) {
                  return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(f(v.value0), v.value1));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function ($167) {
                      return Data_List_Types.NonEmptyList((function (v1) {
                          return new Data_NonEmpty.NonEmpty(v.value0, v1);
                      })($167));
                  })(Data_List.modifyAt(i - 1 | 0)(f)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.NonEmpty line 202, column 1 - line 202, column 82: " + [ i.constructor.name, f.constructor.name, v.constructor.name ]);
          };
      };
  };
  var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexNonEmptyList);
  var lift = function (f) {
      return function (v) {
          return f(new Data_List_Types.Cons(v.value0, v.value1));
      };
  };
  var mapMaybe = function ($168) {
      return lift(Data_List.mapMaybe($168));
  };
  var partition = function ($169) {
      return lift(Data_List.partition($169));
  };
  var span = function ($170) {
      return lift(Data_List.span($170));
  };
  var take = function ($171) {
      return lift(Data_List.take($171));
  };
  var takeWhile = function ($172) {
      return lift(Data_List.takeWhile($172));
  };
  var length = function (v) {
      return 1 + Data_List.length(v.value1) | 0;
  };
  var last = function (v) {
      return Data_Maybe.fromMaybe(v.value0)(Data_List.last(v.value1));
  };
  var intersectBy = function ($173) {
      return wrappedOperation2("intersectBy")(Data_List.intersectBy($173));
  };
  var intersect = function (dictEq) {
      return wrappedOperation2("intersect")(Data_List.intersect(dictEq));
  };
  var insertAt = function (i) {
      return function (a) {
          return function (v) {
              if (i === 0) {
                  return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(a, new Data_List_Types.Cons(v.value0, v.value1)));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function ($174) {
                      return Data_List_Types.NonEmptyList((function (v1) {
                          return new Data_NonEmpty.NonEmpty(v.value0, v1);
                      })($174));
                  })(Data_List.insertAt(i - 1 | 0)(a)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.NonEmpty line 192, column 1 - line 192, column 75: " + [ i.constructor.name, a.constructor.name, v.constructor.name ]);
          };
      };
  };
  var init = function (v) {
      return Data_Maybe.maybe(Data_List_Types.Nil.value)(function (v1) {
          return new Data_List_Types.Cons(v.value0, v1);
      })(Data_List.init(v.value1));
  };
  var index = function (v) {
      return function (i) {
          if (i === 0) {
              return new Data_Maybe.Just(v.value0);
          };
          if (Data_Boolean.otherwise) {
              return Data_List.index(v.value1)(i - 1 | 0);
          };
          throw new Error("Failed pattern match at Data.List.NonEmpty line 166, column 1 - line 166, column 52: " + [ v.constructor.name, i.constructor.name ]);
      };
  };
  var head = function (v) {
      return v.value0;
  };
  var groupBy = function ($175) {
      return wrappedOperation("groupBy")(Data_List.groupBy($175));
  };
  var group$prime = function (dictOrd) {
      return wrappedOperation("group'")(Data_List["group'"](dictOrd));
  };
  var group = function (dictEq) {
      return wrappedOperation("group")(Data_List.group(dictEq));
  };
  var fromList = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(v.value0, v.value1));
      };
      throw new Error("Failed pattern match at Data.List.NonEmpty line 120, column 1 - line 120, column 57: " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return function ($176) {
          return fromList(Data_List.fromFoldable(dictFoldable)($176));
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(f(a)(v.value0))(function (a$prime) {
                      return Data_List.foldM(dictMonad)(f)(a$prime)(v.value1);
                  });
              };
          };
      };
  };
  var findLastIndex = function (f) {
      return function (v) {
          var v1 = Data_List.findLastIndex(f)(v.value1);
          if (v1 instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(v1.value0 + 1 | 0);
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              if (f(v.value0)) {
                  return new Data_Maybe.Just(0);
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
          };
          throw new Error("Failed pattern match at Data.List.NonEmpty line 186, column 3 - line 190, column 29: " + [ v1.constructor.name ]);
      };
  };
  var findIndex = function (f) {
      return function (v) {
          if (f(v.value0)) {
              return new Data_Maybe.Just(0);
          };
          if (Data_Boolean.otherwise) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                  return v1 + 1 | 0;
              })(Data_List.findIndex(f)(v.value1));
          };
          throw new Error("Failed pattern match at Data.List.NonEmpty line 179, column 1 - line 179, column 69: " + [ f.constructor.name, v.constructor.name ]);
      };
  };
  var filterM = function (dictMonad) {
      return function ($177) {
          return lift(Data_List.filterM(dictMonad)($177));
      };
  };
  var filter = function ($178) {
      return lift(Data_List.filter($178));
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function ($179) {
      return lift(Data_List.dropWhile($179));
  };
  var drop = function ($180) {
      return lift(Data_List.drop($180));
  };
  var cons$prime = function (x) {
      return function (xs) {
          return new Data_NonEmpty.NonEmpty(x, xs);
      };
  };
  var cons = function (y) {
      return function (v) {
          return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindNonEmptyList));
  var concat = function (v) {
      return Control_Bind.bind(Data_List_Types.bindNonEmptyList)(v)(Control_Category.identity(Control_Category.categoryFn));
  };
  var catMaybes = lift(Data_List.catMaybes);
  var appendFoldable = function (dictFoldable) {
      return function (v) {
          return function (ys) {
              return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(Data_List_Types.semigroupList)(v.value1)(Data_List.fromFoldable(dictFoldable)(ys)));
          };
      };
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["fromList"] = fromList;
  exports["toList"] = toList;
  exports["singleton"] = singleton;
  exports["length"] = length;
  exports["cons"] = cons;
  exports["cons'"] = cons$prime;
  exports["snoc"] = snoc;
  exports["snoc'"] = snoc$prime;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
  exports["uncons"] = uncons;
  exports["unsnoc"] = unsnoc;
  exports["index"] = index;
  exports["elemIndex"] = elemIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["insertAt"] = insertAt;
  exports["updateAt"] = updateAt;
  exports["modifyAt"] = modifyAt;
  exports["reverse"] = reverse;
  exports["concat"] = concat;
  exports["concatMap"] = concatMap;
  exports["filter"] = filter;
  exports["filterM"] = filterM;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["appendFoldable"] = appendFoldable;
  exports["mapWithIndex"] = mapWithIndex;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["span"] = span;
  exports["group"] = group;
  exports["group'"] = group$prime;
  exports["groupBy"] = groupBy;
  exports["partition"] = partition;
  exports["nub"] = nub;
  exports["nubBy"] = nubBy;
  exports["union"] = union;
  exports["unionBy"] = unionBy;
  exports["intersect"] = intersect;
  exports["intersectBy"] = intersectBy;
  exports["zipWith"] = zipWith;
  exports["zipWithA"] = zipWithA;
  exports["zip"] = zip;
  exports["unzip"] = unzip;
  exports["foldM"] = foldM;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Prelude = PS["Prelude"];                 
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var showForeignError = new Data_Show.Show(function (v) {
      if (v instanceof ForeignError) {
          return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof ErrorAtIndex) {
          return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof ErrorAtProperty) {
          return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Foreign line 63, column 1 - line 63, column 47: " + [ v.constructor.name ]);
  });
  var renderForeignError = function (v) {
      if (v instanceof ForeignError) {
          return v.value0;
      };
      if (v instanceof ErrorAtIndex) {
          return "Error at array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof ErrorAtProperty) {
          return "Error at property " + (Data_Show.show(Data_Show.showString)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof TypeMismatch) {
          return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
      };
      throw new Error("Failed pattern match at Foreign line 72, column 1 - line 72, column 45: " + [ v.constructor.name ]);
  };
  var readUndefined = function (value) {
      if ($foreign.isUndefined(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
      };
      if (Data_Boolean.otherwise) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
      };
      throw new Error("Failed pattern match at Foreign line 157, column 1 - line 157, column 46: " + [ value.constructor.name ]);
  };
  var readNullOrUndefined = function (value) {
      if ($foreign.isNull(value) || $foreign.isUndefined(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
      };
      if (Data_Boolean.otherwise) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
      };
      throw new Error("Failed pattern match at Foreign line 162, column 1 - line 162, column 52: " + [ value.constructor.name ]);
  };
  var readNull = function (value) {
      if ($foreign.isNull(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
      };
      if (Data_Boolean.otherwise) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
      };
      throw new Error("Failed pattern match at Foreign line 152, column 1 - line 152, column 41: " + [ value.constructor.name ]);
  };
  var fail = function ($107) {
      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton($107));
  };
  var readArray = function (value) {
      if ($foreign.isArray(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
      };
      if (Data_Boolean.otherwise) {
          return fail(new TypeMismatch("array", $foreign.tagOf(value)));
      };
      throw new Error("Failed pattern match at Foreign line 147, column 1 - line 147, column 42: " + [ value.constructor.name ]);
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Foreign line 106, column 1 - line 106, column 55: " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  var readBoolean = unsafeReadTagged("Boolean");
  var readNumber = unsafeReadTagged("Number");
  var readInt = function (value) {
      var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
      var fromNumber = function ($108) {
          return Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither))(Data_Int.fromNumber($108));
      };
      return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromNumber))(readNumber(value));
  };
  var readString = unsafeReadTagged("String");
  var readChar = function (value) {
      var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Char", $foreign.tagOf(value))));
      var fromString = function ($109) {
          return Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither))(Data_String_CodeUnits.toChar($109));
      };
      return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromString))(readString(value));
  };
  var eqForeignError = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof ForeignError && y instanceof ForeignError) {
              return x.value0 === y.value0;
          };
          if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
              return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
          };
          if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
              return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
          };
          return false;
      };
  });
  var ordForeignError = new Data_Ord.Ord(function () {
      return eqForeignError;
  }, function (x) {
      return function (y) {
          if (x instanceof ForeignError && y instanceof ForeignError) {
              return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          };
          if (x instanceof ForeignError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ForeignError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
          };
          if (x instanceof TypeMismatch) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof TypeMismatch) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
              var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
          };
          if (x instanceof ErrorAtIndex) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ErrorAtIndex) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
          };
          throw new Error("Failed pattern match at Foreign line 61, column 8 - line 61, column 52: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["renderForeignError"] = renderForeignError;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readString"] = readString;
  exports["readChar"] = readChar;
  exports["readBoolean"] = readBoolean;
  exports["readNumber"] = readNumber;
  exports["readInt"] = readInt;
  exports["readArray"] = readArray;
  exports["readNull"] = readNull;
  exports["readUndefined"] = readUndefined;
  exports["readNullOrUndefined"] = readNullOrUndefined;
  exports["fail"] = fail;
  exports["eqForeignError"] = eqForeignError;
  exports["ordForeignError"] = ordForeignError;
  exports["showForeignError"] = showForeignError;
  exports["unsafeToForeign"] = $foreign.unsafeToForeign;
  exports["unsafeFromForeign"] = $foreign.unsafeFromForeign;
  exports["typeOf"] = $foreign.typeOf;
  exports["tagOf"] = $foreign.tagOf;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
  exports["isArray"] = $foreign.isArray;
})(PS["Foreign"] = PS["Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.JSDate"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_DateTime_Instant = PS["Data.DateTime.Instant"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Time = PS["Data.Time"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Effect = PS["Effect"];
  var Foreign = PS["Foreign"];
  var Prelude = PS["Prelude"];                 
  var toUTCString = function (dt) {
      return $foreign.dateMethod("toUTCString", dt);
  };
  var toTimeString = function (dt) {
      return $foreign.dateMethod("toTimeString", dt);
  };
  var toString = function (dt) {
      return $foreign.dateMethod("toString", dt);
  };
  var toInstant = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(function ($4) {
      return Data_DateTime_Instant.instant(Data_Time_Duration.Milliseconds($4));
  })($foreign.toInstantImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value));
  var toISOString = function (dt) {
      return $foreign.dateMethodEff("toISOString", dt);
  };
  var toDateTime = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_DateTime_Instant.toDateTime))(toInstant);
  var toDateString = function (dt) {
      return $foreign.dateMethod("toDateString", dt);
  };
  var toDate = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_DateTime.date))(toDateTime);
  var readDate = Foreign.unsafeReadTagged("Date");
  var getUTCSeconds = function (dt) {
      return $foreign.dateMethod("getUTCSeconds", dt);
  };
  var getUTCMonth = function (dt) {
      return $foreign.dateMethod("getUTCMonth", dt);
  };
  var getUTCMinutes = function (dt) {
      return $foreign.dateMethod("getUTCMinutes", dt);
  };
  var getUTCMilliseconds = function (dt) {
      return $foreign.dateMethod("getUTCMilliseconds", dt);
  };
  var getUTCHours = function (dt) {
      return $foreign.dateMethod("getUTCHours", dt);
  };
  var getUTCFullYear = function (dt) {
      return $foreign.dateMethod("getUTCFullYear", dt);
  };
  var getUTCDay = function (dt) {
      return $foreign.dateMethod("getUTCDay", dt);
  };
  var getUTCDate = function (dt) {
      return $foreign.dateMethod("getUTCDate", dt);
  };
  var getTimezoneOffset = function (dt) {
      return $foreign.dateMethodEff("getTimezoneOffset", dt);
  };
  var getTime = function (dt) {
      return $foreign.dateMethod("getTime", dt);
  };
  var showJSDate = new Data_Show.Show(function (a) {
      return "(fromTime " + (Data_Show.show(Data_Show.showNumber)(getTime(a)) + ")");
  });
  var getSeconds = function (dt) {
      return $foreign.dateMethodEff("getSeconds", dt);
  };
  var getMonth = function (dt) {
      return $foreign.dateMethodEff("getMonth", dt);
  };
  var getMinutes = function (dt) {
      return $foreign.dateMethodEff("getMinutes", dt);
  };
  var getMilliseconds = function (dt) {
      return $foreign.dateMethodEff("getMilliseconds", dt);
  };
  var getHours = function (dt) {
      return $foreign.dateMethodEff("getHours", dt);
  };
  var getFullYear = function (dt) {
      return $foreign.dateMethodEff("getFullYear", dt);
  };
  var getDay = function (dt) {
      return $foreign.dateMethodEff("getDay", dt);
  };
  var getDate = function (dt) {
      return $foreign.dateMethodEff("getDate", dt);
  };
  var fromDateTime = function (v) {
      return $foreign.jsdate({
          year: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0))),
          month: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)) - 1 | 0),
          day: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0))),
          hour: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1))),
          minute: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1))),
          second: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1))),
          millisecond: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1)))
      });
  };
  var eqJSDate = new Data_Eq.Eq(function (a) {
      return function (b) {
          return getTime(a) === getTime(b);
      };
  });
  var ordJSDate = new Data_Ord.Ord(function () {
      return eqJSDate;
  }, function (a) {
      return function (b) {
          return Data_Ord.compare(Data_Ord.ordNumber)(getTime(a))(getTime(b));
      };
  });
  exports["readDate"] = readDate;
  exports["fromDateTime"] = fromDateTime;
  exports["toDateTime"] = toDateTime;
  exports["toDate"] = toDate;
  exports["toInstant"] = toInstant;
  exports["getTime"] = getTime;
  exports["getUTCDate"] = getUTCDate;
  exports["getUTCDay"] = getUTCDay;
  exports["getUTCFullYear"] = getUTCFullYear;
  exports["getUTCHours"] = getUTCHours;
  exports["getUTCMilliseconds"] = getUTCMilliseconds;
  exports["getUTCMinutes"] = getUTCMinutes;
  exports["getUTCMonth"] = getUTCMonth;
  exports["getUTCSeconds"] = getUTCSeconds;
  exports["getDate"] = getDate;
  exports["getDay"] = getDay;
  exports["getFullYear"] = getFullYear;
  exports["getHours"] = getHours;
  exports["getMilliseconds"] = getMilliseconds;
  exports["getMinutes"] = getMinutes;
  exports["getMonth"] = getMonth;
  exports["getSeconds"] = getSeconds;
  exports["getTimezoneOffset"] = getTimezoneOffset;
  exports["toDateString"] = toDateString;
  exports["toISOString"] = toISOString;
  exports["toString"] = toString;
  exports["toTimeString"] = toTimeString;
  exports["toUTCString"] = toUTCString;
  exports["eqJSDate"] = eqJSDate;
  exports["ordJSDate"] = ordJSDate;
  exports["showJSDate"] = showJSDate;
  exports["isValid"] = $foreign.isValid;
  exports["fromInstant"] = $foreign.fromInstant;
  exports["jsdate"] = $foreign.jsdate;
  exports["jsdateLocal"] = $foreign.jsdateLocal;
  exports["now"] = $foreign.now;
  exports["parse"] = $foreign.parse;
  exports["fromTime"] = $foreign.fromTime;
})(PS["Data.JSDate"] = PS["Data.JSDate"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Node.FS.Stats"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_JSDate = PS["Data.JSDate"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Stats = (function () {
      function Stats(value0) {
          this.value0 = value0;
      };
      Stats.create = function (value0) {
          return new Stats(value0);
      };
      return Stats;
  })();
  var statusChangedTime = function (v) {
      return Data_Maybe.fromJust()(Data_JSDate.toDateTime(v.value0.ctime));
  };
  var showStats = new Data_Show.Show(function (v) {
      return "Stats " + $foreign.showStatsObj(v.value0);
  });
  var modifiedTime = function (v) {
      return Data_Maybe.fromJust()(Data_JSDate.toDateTime(v.value0.mtime));
  };
  var isSymbolicLink = function (v) {
      return $foreign.statsMethod("isSymbolicLink", v.value0);
  };
  var isSocket = function (v) {
      return $foreign.statsMethod("isSocket", v.value0);
  };
  var isFile = function (v) {
      return $foreign.statsMethod("isFile", v.value0);
  };
  var isFIFO = function (v) {
      return $foreign.statsMethod("isFIFO", v.value0);
  };
  var isDirectory = function (v) {
      return $foreign.statsMethod("isDirectory", v.value0);
  };
  var isCharacterDevice = function (v) {
      return $foreign.statsMethod("isCharacterDevice", v.value0);
  };
  var isBlockDevice = function (v) {
      return $foreign.statsMethod("isBlockDevice", v.value0);
  };
  var accessedTime = function (v) {
      return Data_Maybe.fromJust()(Data_JSDate.toDateTime(v.value0.atime));
  };
  exports["Stats"] = Stats;
  exports["isFile"] = isFile;
  exports["isDirectory"] = isDirectory;
  exports["isBlockDevice"] = isBlockDevice;
  exports["isCharacterDevice"] = isCharacterDevice;
  exports["isFIFO"] = isFIFO;
  exports["isSocket"] = isSocket;
  exports["isSymbolicLink"] = isSymbolicLink;
  exports["accessedTime"] = accessedTime;
  exports["modifiedTime"] = modifiedTime;
  exports["statusChangedTime"] = statusChangedTime;
  exports["showStats"] = showStats;
})(PS["Node.FS.Stats"] = PS["Node.FS.Stats"] || {});
(function(exports) {
    "use strict";
  var path =require("path"); 

  exports.normalize = path.normalize;

  exports.concat = function (segments) {
    return path.join.apply(this, segments);
  };

  exports.resolve = function (from) {
    return function (to) {
      return function () {
        return path.resolve.apply(this, from.concat([to]));
      };
    };
  };

  exports.relative = function (from) {
    return function (to) {
      return path.relative(from, to);
    };
  };

  exports.dirname = function (p) {
    return path.normalize(path.dirname(p));
  };

  exports.basename = path.basename;

  exports.basenameWithoutExt = function (p) {
    return function (ext) {
      return path.basename(p, ext);
    };
  };

  exports.extname = path.extname;

  exports.sep = path.sep;

  exports.delimiter = path.delimiter;

  exports.parse = path.parse;

  exports.isAbsolute = path.isAbsolute;
})(PS["Node.Path"] = PS["Node.Path"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Node.Path"];
  var Effect = PS["Effect"];
  exports["normalize"] = $foreign.normalize;
  exports["concat"] = $foreign.concat;
  exports["resolve"] = $foreign.resolve;
  exports["relative"] = $foreign.relative;
  exports["dirname"] = $foreign.dirname;
  exports["basename"] = $foreign.basename;
  exports["basenameWithoutExt"] = $foreign.basenameWithoutExt;
  exports["extname"] = $foreign.extname;
  exports["sep"] = $foreign.sep;
  exports["delimiter"] = $foreign.delimiter;
  exports["parse"] = $foreign.parse;
  exports["isAbsolute"] = $foreign.isAbsolute;
})(PS["Node.Path"] = PS["Node.Path"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Node.FS.Async"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_DateTime_Instant = PS["Data.DateTime.Instant"];
  var Data_Either = PS["Data.Either"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Effect = PS["Effect"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Unsafe = PS["Effect.Unsafe"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_Encoding = PS["Node.Encoding"];
  var Node_FS = PS["Node.FS"];
  var Node_FS_Internal = PS["Node.FS.Internal"];
  var Node_FS_Perms = PS["Node.FS.Perms"];
  var Node_FS_Stats = PS["Node.FS.Stats"];
  var Node_Path = PS["Node.Path"];
  var Prelude = PS["Prelude"];                 
  var handleCallback = function (cb) {
      return $foreign.handleCallbackImpl(Data_Either.Left.create, Data_Either.Right.create, cb);
  };
  var fs = Node_FS_Internal.unsafeRequireFS;
  var link = function (src) {
      return function (dst) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.link(src, dst, handleCallback(cb));
              });
          };
      };
  };
  var mkdir$prime = function (file) {
      return function (perms) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.mkdir(file, Node_FS_Perms.permsToString(perms), handleCallback(cb));
              });
          };
      };
  };
  var mkdir = Data_Function.flip(mkdir$prime)(Node_FS_Perms.mkPerms(Node_FS_Perms.all)(Node_FS_Perms.all)(Node_FS_Perms.all));
  var readFile = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readFile(file, {}, handleCallback(cb));
          });
      };
  };
  var readTextFile = function (encoding) {
      return function (file) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.readFile(file, {
                      encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                  }, handleCallback(cb));
              });
          };
      };
  };
  var readdir = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readdir(file, handleCallback(cb));
          });
      };
  };
  var readlink = function (path) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readlink(path, handleCallback(cb));
          });
      };
  };
  var realpath = function (path) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.realpath(path, {}, handleCallback(cb));
          });
      };
  };
  var realpath$prime = function (path) {
      return function (cache) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.realpath(path, cache, handleCallback(cb));
              });
          };
      };
  };
  var rename = function (oldFile) {
      return function (newFile) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.rename(oldFile, newFile, handleCallback(cb));
              });
          };
      };
  };
  var rmdir = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.rmdir(file, handleCallback(cb));
          });
      };
  };
  var stat = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.stat(file, handleCallback(function ($32) {
                  return cb(Data_Functor.map(Data_Either.functorEither)(Node_FS_Stats.Stats.create)($32));
              }));
          });
      };
  };
  var symlink = function (src) {
      return function (dest) {
          return function (ty) {
              return function (cb) {
                  return Node_FS_Internal.mkEffect(function (v) {
                      return fs.symlink(src, dest, Node_FS.symlinkTypeToNode(ty), handleCallback(cb));
                  });
              };
          };
      };
  };
  var truncate = function (file) {
      return function (len) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.truncate(file, len, handleCallback(cb));
              });
          };
      };
  };
  var unlink = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.unlink(file, handleCallback(cb));
          });
      };
  };
  var utimes = function (file) {
      return function (atime) {
          return function (mtime) {
              return function (cb) {
                  var toEpochMilliseconds = function ($33) {
                      return Data_DateTime_Instant.unInstant(Data_DateTime_Instant.fromDateTime($33));
                  };
                  var ms = function (v) {
                      return Data_Int.round(v);
                  };
                  var fromDate = function (date) {
                      return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(ms(toEpochMilliseconds(date)))(1000);
                  };
                  return Node_FS_Internal.mkEffect(function (v) {
                      return fs.utimes(file, fromDate(atime), fromDate(mtime), handleCallback(cb));
                  });
              };
          };
      };
  };
  var writeFile = function (file) {
      return function (buff) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.writeFile(file, buff, {}, handleCallback(cb));
              });
          };
      };
  };
  var writeTextFile = function (encoding) {
      return function (file) {
          return function (buff) {
              return function (cb) {
                  return Node_FS_Internal.mkEffect(function (v) {
                      return fs.writeFile(file, buff, {
                          encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                      }, handleCallback(cb));
                  });
              };
          };
      };
  };
  var fdWrite = function (fd) {
      return function (buff) {
          return function (off) {
              return function (len) {
                  return function (pos) {
                      return function (cb) {
                          return Node_FS_Internal.mkEffect(function (v) {
                              return fs.write(fd, buff, off, len, Data_Nullable.toNullable(pos), handleCallback(cb));
                          });
                      };
                  };
              };
          };
      };
  };
  var fdRead = function (fd) {
      return function (buff) {
          return function (off) {
              return function (len) {
                  return function (pos) {
                      return function (cb) {
                          return Node_FS_Internal.mkEffect(function (v) {
                              return fs.read(fd, buff, off, len, Data_Nullable.toNullable(pos), handleCallback(cb));
                          });
                      };
                  };
              };
          };
      };
  };
  var fdOpen = function (file) {
      return function (flags) {
          return function (mode) {
              return function (cb) {
                  return Node_FS_Internal.mkEffect(function (v) {
                      return fs.open(file, Node_FS.fileFlagsToNode(flags), Data_Nullable.toNullable(mode), handleCallback(cb));
                  });
              };
          };
      };
  };
  var fdNext = function (fd) {
      return function (buff) {
          return function (cb) {
              return function __do() {
                  var v = Node_Buffer.size(buff)();
                  return fdRead(fd)(buff)(0)(v)(Data_Maybe.Nothing.value)(cb)();
              };
          };
      };
  };
  var fdClose = function (fd) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.close(fd, handleCallback(cb));
          });
      };
  };
  var fdAppend = function (fd) {
      return function (buff) {
          return function (cb) {
              return function __do() {
                  var v = Node_Buffer.size(buff)();
                  return fdWrite(fd)(buff)(0)(v)(Data_Maybe.Nothing.value)(cb)();
              };
          };
      };
  };
  var exists = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.exists(file, function (b) {
                  return Effect_Unsafe.unsafePerformEffect(cb(b));
              });
          });
      };
  };
  var chown = function (file) {
      return function (uid) {
          return function (gid) {
              return function (cb) {
                  return Node_FS_Internal.mkEffect(function (v) {
                      return fs.chown(file, uid, gid, handleCallback(cb));
                  });
              };
          };
      };
  };
  var chmod = function (file) {
      return function (perms) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.chmod(file, Node_FS_Perms.permsToString(perms), handleCallback(cb));
              });
          };
      };
  };
  var appendTextFile = function (encoding) {
      return function (file) {
          return function (buff) {
              return function (cb) {
                  return Node_FS_Internal.mkEffect(function (v) {
                      return fs.appendFile(file, buff, {
                          encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                      }, handleCallback(cb));
                  });
              };
          };
      };
  };
  var appendFile = function (file) {
      return function (buff) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.appendFile(file, buff, {}, handleCallback(cb));
              });
          };
      };
  };
  exports["rename"] = rename;
  exports["truncate"] = truncate;
  exports["chown"] = chown;
  exports["chmod"] = chmod;
  exports["stat"] = stat;
  exports["link"] = link;
  exports["symlink"] = symlink;
  exports["readlink"] = readlink;
  exports["realpath"] = realpath;
  exports["realpath'"] = realpath$prime;
  exports["unlink"] = unlink;
  exports["rmdir"] = rmdir;
  exports["mkdir"] = mkdir;
  exports["mkdir'"] = mkdir$prime;
  exports["readdir"] = readdir;
  exports["utimes"] = utimes;
  exports["readFile"] = readFile;
  exports["readTextFile"] = readTextFile;
  exports["writeFile"] = writeFile;
  exports["writeTextFile"] = writeTextFile;
  exports["appendFile"] = appendFile;
  exports["appendTextFile"] = appendTextFile;
  exports["exists"] = exists;
  exports["fdOpen"] = fdOpen;
  exports["fdRead"] = fdRead;
  exports["fdNext"] = fdNext;
  exports["fdWrite"] = fdWrite;
  exports["fdAppend"] = fdAppend;
  exports["fdClose"] = fdClose;
})(PS["Node.FS.Async"] = PS["Node.FS.Async"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_Encoding = PS["Node.Encoding"];
  var Node_FS = PS["Node.FS"];
  var Node_FS_Async = PS["Node.FS.Async"];
  var Node_FS_Perms = PS["Node.FS.Perms"];
  var Node_FS_Stats = PS["Node.FS.Stats"];
  var Node_Path = PS["Node.Path"];
  var Prelude = PS["Prelude"];                 
  var toAff = function (p) {
      return Effect_Aff.makeAff(function (k) {
          return Data_Functor.voidLeft(Effect.functorEffect)(p(k))(Effect_Aff.nonCanceler);
      });
  };
  var toAff1 = function (f) {
      return function (a) {
          return toAff(f(a));
      };
  };
  var unlink = toAff1(Node_FS_Async.unlink);
  var toAff2 = function (f) {
      return function (a) {
          return function (b) {
              return toAff(f(a)(b));
          };
      };
  };
  var truncate = toAff2(Node_FS_Async.truncate);
  var writeFile = toAff2(Node_FS_Async.writeFile);
  var toAff3 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return toAff(f(a)(b)(c));
              };
          };
      };
  };
  var utimes = toAff3(Node_FS_Async.utimes);
  var writeTextFile = toAff3(Node_FS_Async.writeTextFile);
  var toAff5 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return toAff(f(a)(b)(c)(d)(e));
                      };
                  };
              };
          };
      };
  };
  var symlink = toAff3(Node_FS_Async.symlink);
  var stat = toAff1(Node_FS_Async.stat);
  var rmdir = toAff1(Node_FS_Async.rmdir);
  var rename = toAff2(Node_FS_Async.rename);
  var realpath$prime = toAff2(Node_FS_Async["realpath'"]);
  var realpath = toAff1(Node_FS_Async.realpath);
  var readlink = toAff1(Node_FS_Async.readlink);
  var readdir = toAff1(Node_FS_Async.readdir);
  var readTextFile = toAff2(Node_FS_Async.readTextFile);
  var readFile = toAff1(Node_FS_Async.readFile);
  var mkdir$prime = toAff2(Node_FS_Async["mkdir'"]);
  var mkdir = toAff1(Node_FS_Async.mkdir);
  var link = toAff2(Node_FS_Async.link);
  var fdWrite = toAff5(Node_FS_Async.fdWrite);
  var fdRead = toAff5(Node_FS_Async.fdRead);
  var fdOpen = toAff3(Node_FS_Async.fdOpen);
  var fdNext = toAff2(Node_FS_Async.fdNext);
  var fdClose = toAff1(Node_FS_Async.fdClose);
  var fdAppend = toAff2(Node_FS_Async.fdAppend);
  var exists = function (file) {
      return Effect_Aff.makeAff(function (k) {
          return Data_Functor.voidLeft(Effect.functorEffect)(Node_FS_Async.exists(file)(function ($0) {
              return k(Control_Applicative.pure(Data_Either.applicativeEither)($0));
          }))(Effect_Aff.nonCanceler);
      });
  };
  var chown = toAff3(Node_FS_Async.chown);
  var chmod = toAff2(Node_FS_Async.chmod);
  var appendTextFile = toAff3(Node_FS_Async.appendTextFile);
  var appendFile = toAff2(Node_FS_Async.appendFile);
  exports["rename"] = rename;
  exports["truncate"] = truncate;
  exports["chown"] = chown;
  exports["chmod"] = chmod;
  exports["stat"] = stat;
  exports["link"] = link;
  exports["symlink"] = symlink;
  exports["readlink"] = readlink;
  exports["realpath"] = realpath;
  exports["realpath'"] = realpath$prime;
  exports["unlink"] = unlink;
  exports["rmdir"] = rmdir;
  exports["mkdir"] = mkdir;
  exports["mkdir'"] = mkdir$prime;
  exports["readdir"] = readdir;
  exports["utimes"] = utimes;
  exports["readFile"] = readFile;
  exports["readTextFile"] = readTextFile;
  exports["writeFile"] = writeFile;
  exports["writeTextFile"] = writeTextFile;
  exports["appendFile"] = appendFile;
  exports["appendTextFile"] = appendTextFile;
  exports["exists"] = exists;
  exports["fdOpen"] = fdOpen;
  exports["fdRead"] = fdRead;
  exports["fdNext"] = fdNext;
  exports["fdWrite"] = fdWrite;
  exports["fdAppend"] = fdAppend;
  exports["fdClose"] = fdClose;
})(PS["Node.FS.Aff"] = PS["Node.FS.Aff"] || {});
(function(exports) {
    "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Array = PS["Data.Array"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Effect_Aff = PS["Effect.Aff"];
  var Node_FS_Aff = PS["Node.FS.Aff"];
  var Prelude = PS["Prelude"];                 
  var renderStyle = function (application) {
      return function (pages) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Array.filterA(Effect_Aff.applicativeAff)(function (page) {
              return Node_FS_Aff.exists("./src/" + (application + ("/Page/" + (page + ".css"))));
          })(pages))(function (v) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)("\x0a/////////////////////////\x0a// AUTO GENERATED FILE //\x0a// DO NOT EDIT THIS    //\x0a/////////////////////////\x0a" + Data_String_Common.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
                  return "import './Page/" + (page + ".css'");
              })(v)));
          });
      };
  };
  exports["renderStyle"] = renderStyle;
})(PS["Alchelmy.Template.Style"] = PS["Alchelmy.Template.Style"] || {});
(function(exports) {
    "use strict";

  exports["showRegex'"] = function (r) {
    return "" + r;
  };

  exports["regex'"] = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports.source = function (r) {
    return r.source;
  };

  exports["flags'"] = function (r) {
    return {
      multiline: r.multiline,
      ignoreCase: r.ignoreCase,
      global: r.global,
      sticky: !!r.sticky,
      unicode: !!r.unicode
    };
  };

  exports.test = function (r) {
    return function (s) {
      var lastIndex = r.lastIndex;
      var result = r.test(s);
      r.lastIndex = lastIndex;
      return result;
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null || m.length === 0) {
            return nothing;
          } else {
            for (var i = 0; i < m.length; i++) {
              m[i] = m[i] == null ? nothing : just(m[i]);
            }
            return just(m);
          }
        };
      };
    };
  };

  exports.replace = function (r) {
    return function (s1) {
      return function (s2) {
        return s2.replace(r, s1);
      };
    };
  };

  exports["replace'"] = function (r) {
    return function (f) {
      return function (s2) {
        return s2.replace(r, function (match) {
          return f(match)(Array.prototype.splice.call(arguments, 1, arguments.length - 3));
        });
      };
    };
  };

  exports._search = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var result = s.search(r);
          return result === -1 ? nothing : just(result);
        };
      };
    };
  };

  exports.split = function (r) {
    return function (s) {
      return s.split(r);
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_NonEmpty_Internal = PS["Data.Array.NonEmpty.Internal"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var unsafeFromArrayF = Unsafe_Coerce.unsafeCoerce;
  var unsafeFromArray = Unsafe_Coerce.unsafeCoerce;
  var toArray = Unsafe_Coerce.unsafeCoerce;
  var unionBy$prime = function (eq) {
      return function (xs) {
          return function ($39) {
              return unsafeFromArray(Data_Array.unionBy(eq)(toArray(xs))($39));
          };
      };
  };
  var union$prime = function (dictEq) {
      return unionBy$prime(Data_Eq.eq(dictEq));
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function ($40) {
              return unionBy$prime(eq)(xs)(toArray($40));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  var unzip = function ($41) {
      return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(unsafeFromArray)(unsafeFromArray)(Data_Array.unzip(toArray($41)));
  };
  var updateAt = function (i) {
      return function (x) {
          return function ($42) {
              return unsafeFromArrayF(Data_Array.updateAt(i)(x)(toArray($42)));
          };
      };
  };
  var zip = function (xs) {
      return function (ys) {
          return unsafeFromArray(Data_Array.zip(toArray(xs))(toArray(ys)));
      };
  };
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              return unsafeFromArray(Data_Array.zipWith(f)(toArray(xs))(toArray(ys)));
          };
      };
  };
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return unsafeFromArrayF(Data_Array.zipWithA(dictApplicative)(f)(toArray(xs))(toArray(ys)));
              };
          };
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function ($43) {
              return unsafeFromArrayF(Data_Array.some(dictAlternative)(dictLazy)($43));
          };
      };
  };
  var snoc$prime = function (xs) {
      return function (x) {
          return unsafeFromArray(Data_Array.snoc(xs)(x));
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return unsafeFromArray(Data_Array.snoc(toArray(xs))(x));
      };
  };
  var singleton = function ($44) {
      return unsafeFromArray(Data_Array.singleton($44));
  };
  var replicate = function (i) {
      return function (x) {
          return unsafeFromArray(Data_Array.replicate(Data_Ord.max(Data_Ord.ordInt)(1)(i))(x));
      };
  };
  var range = function (x) {
      return function (y) {
          return unsafeFromArray(Data_Array.range(x)(y));
      };
  };
  var modifyAt = function (i) {
      return function (f) {
          return function ($45) {
              return unsafeFromArrayF(Data_Array.modifyAt(i)(f)(toArray($45)));
          };
      };
  };
  var intersectBy$prime = function (eq) {
      return function (xs) {
          return Data_Array.intersectBy(eq)(toArray(xs));
      };
  };
  var intersectBy = function (eq) {
      return function (xs) {
          return function ($46) {
              return intersectBy$prime(eq)(xs)(toArray($46));
          };
      };
  };
  var intersect$prime = function (dictEq) {
      return intersectBy$prime(Data_Eq.eq(dictEq));
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var insertAt = function (i) {
      return function (x) {
          return function ($47) {
              return unsafeFromArrayF(Data_Array.insertAt(i)(x)(toArray($47)));
          };
      };
  };
  var fromFoldable1 = function (dictFoldable1) {
      return function ($48) {
          return unsafeFromArray(Data_Array.fromFoldable(dictFoldable1.Foldable0())($48));
      };
  };
  var fromArray = function (xs) {
      if (Data_Array.length(xs) > 0) {
          return new Data_Maybe.Just(unsafeFromArray(xs));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Array.NonEmpty line 134, column 1 - line 134, column 58: " + [ xs.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return function ($49) {
          return fromArray(Data_Array.fromFoldable(dictFoldable)($49));
      };
  };
  var difference$prime = function (dictEq) {
      return function (xs) {
          return Data_Array.difference(dictEq)(toArray(xs));
      };
  };
  var cons$prime = function (x) {
      return function (xs) {
          return unsafeFromArray(Data_Array.cons(x)(xs));
      };
  };
  var fromNonEmpty = function (v) {
      return cons$prime(v.value0)(v.value1);
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Data_Array_NonEmpty_Internal.bindNonEmptyArray));
  var concat = function ($50) {
      return unsafeFromArray(Data_Array.concat(toArray(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(toArray)($50))));
  };
  var appendArray = function (xs) {
      return function (ys) {
          return unsafeFromArray(Data_Semigroup.append(Data_Semigroup.semigroupArray)(toArray(xs))(ys));
      };
  };
  var alterAt = function (i) {
      return function (f) {
          return function ($51) {
              return Data_Array.alterAt(i)(f)(toArray($51));
          };
      };
  };
  var adaptMaybe = function (f) {
      return function ($52) {
          return Data_Maybe.fromJust()(f(toArray($52)));
      };
  };
  var head = adaptMaybe(Data_Array.head);
  var init = adaptMaybe(Data_Array.init);
  var last = adaptMaybe(Data_Array.last);
  var tail = adaptMaybe(Data_Array.tail);
  var uncons = adaptMaybe(Data_Array.uncons);
  var toNonEmpty = function ($53) {
      return (function (v) {
          return new Data_NonEmpty.NonEmpty(v.head, v.tail);
      })(uncons($53));
  };
  var unsnoc = adaptMaybe(Data_Array.unsnoc);
  var adaptAny = function (f) {
      return function ($54) {
          return f(toArray($54));
      };
  };
  var catMaybes = adaptAny(Data_Array.catMaybes);
  var $$delete = function (dictEq) {
      return function (x) {
          return adaptAny(Data_Array["delete"](dictEq)(x));
      };
  };
  var deleteAt = function (i) {
      return adaptAny(Data_Array.deleteAt(i));
  };
  var deleteBy = function (f) {
      return function (x) {
          return adaptAny(Data_Array.deleteBy(f)(x));
      };
  };
  var difference = function (dictEq) {
      return function (xs) {
          return adaptAny(difference$prime(dictEq)(xs));
      };
  };
  var drop = function (i) {
      return adaptAny(Data_Array.drop(i));
  };
  var dropEnd = function (i) {
      return adaptAny(Data_Array.dropEnd(i));
  };
  var dropWhile = function (f) {
      return adaptAny(Data_Array.dropWhile(f));
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return adaptAny(Data_Array.elemIndex(dictEq)(x));
      };
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return adaptAny(Data_Array.elemLastIndex(dictEq)(x));
      };
  };
  var filter = function (f) {
      return adaptAny(Data_Array.filter(f));
  };
  var filterA = function (dictApplicative) {
      return function (f) {
          return adaptAny(Data_Array.filterA(dictApplicative)(f));
      };
  };
  var findIndex = function (x) {
      return adaptAny(Data_Array.findIndex(x));
  };
  var findLastIndex = function (x) {
      return adaptAny(Data_Array.findLastIndex(x));
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (acc) {
              return adaptAny(Data_Array.foldM(dictMonad)(f)(acc));
          };
      };
  };
  var foldRecM = function (dictMonadRec) {
      return function (f) {
          return function (acc) {
              return adaptAny(Data_Array.foldRecM(dictMonadRec)(f)(acc));
          };
      };
  };
  var index = adaptAny(Data_Array.index);
  var length = adaptAny(Data_Array.length);
  var mapMaybe = function (f) {
      return adaptAny(Data_Array.mapMaybe(f));
  };
  var partition = function (f) {
      return adaptAny(Data_Array.partition(f));
  };
  var slice = function (start) {
      return function (end) {
          return adaptAny(Data_Array.slice(start)(end));
      };
  };
  var span = function (f) {
      return adaptAny(Data_Array.span(f));
  };
  var take = function (i) {
      return adaptAny(Data_Array.take(i));
  };
  var takeEnd = function (i) {
      return adaptAny(Data_Array.takeEnd(i));
  };
  var takeWhile = function (f) {
      return adaptAny(Data_Array.takeWhile(f));
  };
  var toUnfoldable = function (dictUnfoldable) {
      return adaptAny(Data_Array.toUnfoldable(dictUnfoldable));
  };
  var unsafeAdapt = function (f) {
      return function ($55) {
          return unsafeFromArray(adaptAny(f)($55));
      };
  };
  var cons = function (x) {
      return unsafeAdapt(Data_Array.cons(x));
  };
  var insert = function (dictOrd) {
      return function (x) {
          return unsafeAdapt(Data_Array.insert(dictOrd)(x));
      };
  };
  var insertBy = function (f) {
      return function (x) {
          return unsafeAdapt(Data_Array.insertBy(f)(x));
      };
  };
  var modifyAtIndices = function (dictFoldable) {
      return function (is) {
          return function (f) {
              return unsafeAdapt(Data_Array.modifyAtIndices(dictFoldable)(is)(f));
          };
      };
  };
  var nub = function (dictOrd) {
      return unsafeAdapt(Data_Array.nub(dictOrd));
  };
  var nubBy = function (f) {
      return unsafeAdapt(Data_Array.nubBy(f));
  };
  var nubByEq = function (f) {
      return unsafeAdapt(Data_Array.nubByEq(f));
  };
  var nubEq = function (dictEq) {
      return unsafeAdapt(Data_Array.nubEq(dictEq));
  };
  var reverse = unsafeAdapt(Data_Array.reverse);
  var sort = function (dictOrd) {
      return unsafeAdapt(Data_Array.sort(dictOrd));
  };
  var sortBy = function (f) {
      return unsafeAdapt(Data_Array.sortBy(f));
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return unsafeAdapt(Data_Array.sortWith(dictOrd)(f));
      };
  };
  var updateAtIndices = function (dictFoldable) {
      return function (pairs) {
          return unsafeAdapt(Data_Array.updateAtIndices(dictFoldable)(pairs));
      };
  };
  var unsafeIndex = function (dictPartial) {
      return adaptAny(Data_Array.unsafeIndex(dictPartial));
  };
  var toUnfoldable1 = function (dictUnfoldable1) {
      return function (xs) {
          var len = length(xs);
          var f = function (i) {
              return Data_Tuple.Tuple.create(unsafeIndex()(xs)(i))((function () {
                  var $38 = i < (len - 1 | 0);
                  if ($38) {
                      return new Data_Maybe.Just(i + 1 | 0);
                  };
                  return Data_Maybe.Nothing.value;
              })());
          };
          return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(f)(0);
      };
  };
  exports["fromArray"] = fromArray;
  exports["fromNonEmpty"] = fromNonEmpty;
  exports["toArray"] = toArray;
  exports["toNonEmpty"] = toNonEmpty;
  exports["fromFoldable"] = fromFoldable;
  exports["fromFoldable1"] = fromFoldable1;
  exports["toUnfoldable"] = toUnfoldable;
  exports["toUnfoldable1"] = toUnfoldable1;
  exports["singleton"] = singleton;
  exports["range"] = range;
  exports["replicate"] = replicate;
  exports["some"] = some;
  exports["length"] = length;
  exports["cons"] = cons;
  exports["cons'"] = cons$prime;
  exports["snoc"] = snoc;
  exports["snoc'"] = snoc$prime;
  exports["appendArray"] = appendArray;
  exports["insert"] = insert;
  exports["insertBy"] = insertBy;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
  exports["uncons"] = uncons;
  exports["unsnoc"] = unsnoc;
  exports["index"] = index;
  exports["elemIndex"] = elemIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["insertAt"] = insertAt;
  exports["deleteAt"] = deleteAt;
  exports["updateAt"] = updateAt;
  exports["updateAtIndices"] = updateAtIndices;
  exports["modifyAt"] = modifyAt;
  exports["modifyAtIndices"] = modifyAtIndices;
  exports["alterAt"] = alterAt;
  exports["reverse"] = reverse;
  exports["concat"] = concat;
  exports["concatMap"] = concatMap;
  exports["filter"] = filter;
  exports["partition"] = partition;
  exports["filterA"] = filterA;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["sortWith"] = sortWith;
  exports["slice"] = slice;
  exports["take"] = take;
  exports["takeEnd"] = takeEnd;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["dropEnd"] = dropEnd;
  exports["dropWhile"] = dropWhile;
  exports["span"] = span;
  exports["nub"] = nub;
  exports["nubBy"] = nubBy;
  exports["nubEq"] = nubEq;
  exports["nubByEq"] = nubByEq;
  exports["union"] = union;
  exports["union'"] = union$prime;
  exports["unionBy"] = unionBy;
  exports["unionBy'"] = unionBy$prime;
  exports["delete"] = $$delete;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["difference'"] = difference$prime;
  exports["intersect"] = intersect;
  exports["intersect'"] = intersect$prime;
  exports["intersectBy"] = intersectBy;
  exports["intersectBy'"] = intersectBy$prime;
  exports["zipWith"] = zipWith;
  exports["zipWithA"] = zipWithA;
  exports["zip"] = zip;
  exports["unzip"] = unzip;
  exports["foldM"] = foldM;
  exports["foldRecM"] = foldRecM;
  exports["unsafeIndex"] = unsafeIndex;
})(PS["Data.Array.NonEmpty"] = PS["Data.Array.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Prelude = PS["Prelude"];                 
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var unicode = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: true
  });
  var sticky = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      sticky: true,
      unicode: false
  });
  var showRegexFlags = new Data_Show.Show(function (v) {
      var usedFlags = Data_Semigroup.append(Data_Semigroup.semigroupArray)([  ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.global))("global"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.ignoreCase))("ignoreCase"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.multiline))("multiline"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.sticky))("sticky"))(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.unicode))("unicode"))))));
      var $6 = Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(usedFlags)([  ]);
      if ($6) {
          return "noFlags";
      };
      return "(" + (Data_String_Common.joinWith(" <> ")(usedFlags) + ")");
  });
  var semigroupRegexFlags = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return new RegexFlags({
              global: v.value0.global || v1.value0.global,
              ignoreCase: v.value0.ignoreCase || v1.value0.ignoreCase,
              multiline: v.value0.multiline || v1.value0.multiline,
              sticky: v.value0.sticky || v1.value0.sticky,
              unicode: v.value0.unicode || v1.value0.unicode
          });
      };
  });
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: false
  });
  var multiline = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: true,
      sticky: false,
      unicode: false
  });
  var monoidRegexFlags = new Data_Monoid.Monoid(function () {
      return semigroupRegexFlags;
  }, noFlags);
  var ignoreCase = new RegexFlags({
      global: false,
      ignoreCase: true,
      multiline: false,
      sticky: false,
      unicode: false
  });
  var global = new RegexFlags({
      global: true,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: false
  });
  var eqRegexFlags = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.value0.global === v1.value0.global && (v.value0.ignoreCase === v1.value0.ignoreCase && (v.value0.multiline === v1.value0.multiline && (v.value0.sticky === v1.value0.sticky && v.value0.unicode === v1.value0.unicode)));
      };
  });
  exports["RegexFlags"] = RegexFlags;
  exports["noFlags"] = noFlags;
  exports["global"] = global;
  exports["ignoreCase"] = ignoreCase;
  exports["multiline"] = multiline;
  exports["sticky"] = sticky;
  exports["unicode"] = unicode;
  exports["semigroupRegexFlags"] = semigroupRegexFlags;
  exports["monoidRegexFlags"] = monoidRegexFlags;
  exports["eqRegexFlags"] = eqRegexFlags;
  exports["showRegexFlags"] = showRegexFlags;
})(PS["Data.String.Regex.Flags"] = PS["Data.String.Regex.Flags"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.Regex"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty = PS["Data.Array.NonEmpty"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Prelude = PS["Prelude"];                 
  var showRegex = new Data_Show.Show($foreign["showRegex'"]);
  var search = $foreign._search(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var parseFlags = function (s) {
      return new Data_String_Regex_Flags.RegexFlags({
          global: Data_String_CodeUnits.contains("g")(s),
          ignoreCase: Data_String_CodeUnits.contains("i")(s),
          multiline: Data_String_CodeUnits.contains("m")(s),
          sticky: Data_String_CodeUnits.contains("y")(s),
          unicode: Data_String_CodeUnits.contains("u")(s)
      });
  };
  var match = $foreign._match(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var flags = function ($8) {
      return Data_String_Regex_Flags.RegexFlags.create($foreign["flags'"]($8));
  };
  exports["regex"] = regex;
  exports["flags"] = flags;
  exports["renderFlags"] = renderFlags;
  exports["parseFlags"] = parseFlags;
  exports["match"] = match;
  exports["search"] = search;
  exports["showRegex"] = showRegex;
  exports["source"] = $foreign.source;
  exports["test"] = $foreign.test;
  exports["replace"] = $foreign.replace;
  exports["replace'"] = $foreign["replace'"];
  exports["split"] = $foreign.split;
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.warn = function (s) {
    return function () {
      console.warn(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };

  exports.info = function (s) {
    return function () {
      console.info(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Console"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];                 
  var warnShow = function (dictShow) {
      return function (a) {
          return $foreign.warn(Data_Show.show(dictShow)(a));
      };
  };
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  var infoShow = function (dictShow) {
      return function (a) {
          return $foreign.info(Data_Show.show(dictShow)(a));
      };
  };
  var errorShow = function (dictShow) {
      return function (a) {
          return $foreign.error(Data_Show.show(dictShow)(a));
      };
  };
  exports["logShow"] = logShow;
  exports["warnShow"] = warnShow;
  exports["errorShow"] = errorShow;
  exports["infoShow"] = infoShow;
  exports["log"] = $foreign.log;
  exports["warn"] = $foreign.warn;
  exports["error"] = $foreign.error;
  exports["info"] = $foreign.info;
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Console = PS["Effect.Console"];                 
  var warnShow = function (dictMonadEffect) {
      return function (dictShow) {
          return function ($12) {
              return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.warnShow(dictShow)($12));
          };
      };
  };
  var warn = function (dictMonadEffect) {
      return function ($13) {
          return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.warn($13));
      };
  };
  var logShow = function (dictMonadEffect) {
      return function (dictShow) {
          return function ($14) {
              return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.logShow(dictShow)($14));
          };
      };
  };
  var log = function (dictMonadEffect) {
      return function ($15) {
          return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.log($15));
      };
  };
  var infoShow = function (dictMonadEffect) {
      return function (dictShow) {
          return function ($16) {
              return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.infoShow(dictShow)($16));
          };
      };
  };
  var info = function (dictMonadEffect) {
      return function ($17) {
          return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.info($17));
      };
  };
  var errorShow = function (dictMonadEffect) {
      return function (dictShow) {
          return function ($18) {
              return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.errorShow(dictShow)($18));
          };
      };
  };
  var error = function (dictMonadEffect) {
      return function ($19) {
          return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.error($19));
      };
  };
  exports["log"] = log;
  exports["logShow"] = logShow;
  exports["warn"] = warn;
  exports["warnShow"] = warnShow;
  exports["error"] = error;
  exports["errorShow"] = errorShow;
  exports["info"] = info;
  exports["infoShow"] = infoShow;
})(PS["Effect.Class.Console"] = PS["Effect.Class.Console"] || {});
(function(exports) {
    "use strict";

  exports.process = process;

  exports.onBeforeExit = function (callback) {
    return function () {
      process.on("beforeExit", callback);
    };
  };

  exports.onExit = function (callback) {
    return function () {
      process.on("exit", function (code) {
        callback(code)();
      });
    };
  };

  exports.onSignalImpl = function (signal) {
    return function (callback) {
      return function () {
        process.on(signal, callback);
      };
    };
  };

  exports.chdir = function (dir) {
    return function () {
      process.chdir(dir);
    };
  };

  exports.setEnv = function (var_) {
    return function (val) {
      return function () {
        process.env[var_] = val;
      };
    };
  };

  exports.exit = function (code) {
    return function () {
      process.exit(code);
    };
  };
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Uid = function (x) {
      return x;
  };
  var Pid = function (x) {
      return x;
  };
  var Gid = function (x) {
      return x;
  };
  var showUid = new Data_Show.Show(function (v) {
      return "(Uid " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var showPid = new Data_Show.Show(function (v) {
      return "(Pid " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var showGid = new Data_Show.Show(function (v) {
      return "(Gid " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var ordUid = Data_Ord.ordInt;
  var ordPid = Data_Ord.ordInt;
  var ordGid = Data_Ord.ordInt;
  var newtypeUid = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Uid);
  var newtypePid = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Pid);
  var newtypeGid = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Gid);
  var eqUid = Data_Eq.eqInt;
  var eqPid = Data_Eq.eqInt;
  var eqGid = Data_Eq.eqInt;
  exports["Pid"] = Pid;
  exports["Gid"] = Gid;
  exports["Uid"] = Uid;
  exports["newtypePid"] = newtypePid;
  exports["eqPid"] = eqPid;
  exports["ordPid"] = ordPid;
  exports["showPid"] = showPid;
  exports["newtypeGid"] = newtypeGid;
  exports["eqGid"] = eqGid;
  exports["ordGid"] = ordGid;
  exports["showGid"] = showGid;
  exports["newtypeUid"] = newtypeUid;
  exports["eqUid"] = eqUid;
  exports["ordUid"] = ordUid;
  exports["showUid"] = showUid;
})(PS["Data.Posix"] = PS["Data.Posix"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var SIGABRT = (function () {
      function SIGABRT() {

      };
      SIGABRT.value = new SIGABRT();
      return SIGABRT;
  })();
  var SIGALRM = (function () {
      function SIGALRM() {

      };
      SIGALRM.value = new SIGALRM();
      return SIGALRM;
  })();
  var SIGBUS = (function () {
      function SIGBUS() {

      };
      SIGBUS.value = new SIGBUS();
      return SIGBUS;
  })();
  var SIGCHLD = (function () {
      function SIGCHLD() {

      };
      SIGCHLD.value = new SIGCHLD();
      return SIGCHLD;
  })();
  var SIGCLD = (function () {
      function SIGCLD() {

      };
      SIGCLD.value = new SIGCLD();
      return SIGCLD;
  })();
  var SIGCONT = (function () {
      function SIGCONT() {

      };
      SIGCONT.value = new SIGCONT();
      return SIGCONT;
  })();
  var SIGEMT = (function () {
      function SIGEMT() {

      };
      SIGEMT.value = new SIGEMT();
      return SIGEMT;
  })();
  var SIGFPE = (function () {
      function SIGFPE() {

      };
      SIGFPE.value = new SIGFPE();
      return SIGFPE;
  })();
  var SIGHUP = (function () {
      function SIGHUP() {

      };
      SIGHUP.value = new SIGHUP();
      return SIGHUP;
  })();
  var SIGILL = (function () {
      function SIGILL() {

      };
      SIGILL.value = new SIGILL();
      return SIGILL;
  })();
  var SIGINFO = (function () {
      function SIGINFO() {

      };
      SIGINFO.value = new SIGINFO();
      return SIGINFO;
  })();
  var SIGINT = (function () {
      function SIGINT() {

      };
      SIGINT.value = new SIGINT();
      return SIGINT;
  })();
  var SIGIO = (function () {
      function SIGIO() {

      };
      SIGIO.value = new SIGIO();
      return SIGIO;
  })();
  var SIGIOT = (function () {
      function SIGIOT() {

      };
      SIGIOT.value = new SIGIOT();
      return SIGIOT;
  })();
  var SIGKILL = (function () {
      function SIGKILL() {

      };
      SIGKILL.value = new SIGKILL();
      return SIGKILL;
  })();
  var SIGLOST = (function () {
      function SIGLOST() {

      };
      SIGLOST.value = new SIGLOST();
      return SIGLOST;
  })();
  var SIGPIPE = (function () {
      function SIGPIPE() {

      };
      SIGPIPE.value = new SIGPIPE();
      return SIGPIPE;
  })();
  var SIGPOLL = (function () {
      function SIGPOLL() {

      };
      SIGPOLL.value = new SIGPOLL();
      return SIGPOLL;
  })();
  var SIGPROF = (function () {
      function SIGPROF() {

      };
      SIGPROF.value = new SIGPROF();
      return SIGPROF;
  })();
  var SIGPWR = (function () {
      function SIGPWR() {

      };
      SIGPWR.value = new SIGPWR();
      return SIGPWR;
  })();
  var SIGQUIT = (function () {
      function SIGQUIT() {

      };
      SIGQUIT.value = new SIGQUIT();
      return SIGQUIT;
  })();
  var SIGSEGV = (function () {
      function SIGSEGV() {

      };
      SIGSEGV.value = new SIGSEGV();
      return SIGSEGV;
  })();
  var SIGSTKFLT = (function () {
      function SIGSTKFLT() {

      };
      SIGSTKFLT.value = new SIGSTKFLT();
      return SIGSTKFLT;
  })();
  var SIGSTOP = (function () {
      function SIGSTOP() {

      };
      SIGSTOP.value = new SIGSTOP();
      return SIGSTOP;
  })();
  var SIGSYS = (function () {
      function SIGSYS() {

      };
      SIGSYS.value = new SIGSYS();
      return SIGSYS;
  })();
  var SIGTERM = (function () {
      function SIGTERM() {

      };
      SIGTERM.value = new SIGTERM();
      return SIGTERM;
  })();
  var SIGTRAP = (function () {
      function SIGTRAP() {

      };
      SIGTRAP.value = new SIGTRAP();
      return SIGTRAP;
  })();
  var SIGTSTP = (function () {
      function SIGTSTP() {

      };
      SIGTSTP.value = new SIGTSTP();
      return SIGTSTP;
  })();
  var SIGTTIN = (function () {
      function SIGTTIN() {

      };
      SIGTTIN.value = new SIGTTIN();
      return SIGTTIN;
  })();
  var SIGTTOU = (function () {
      function SIGTTOU() {

      };
      SIGTTOU.value = new SIGTTOU();
      return SIGTTOU;
  })();
  var SIGUNUSED = (function () {
      function SIGUNUSED() {

      };
      SIGUNUSED.value = new SIGUNUSED();
      return SIGUNUSED;
  })();
  var SIGURG = (function () {
      function SIGURG() {

      };
      SIGURG.value = new SIGURG();
      return SIGURG;
  })();
  var SIGUSR1 = (function () {
      function SIGUSR1() {

      };
      SIGUSR1.value = new SIGUSR1();
      return SIGUSR1;
  })();
  var SIGUSR2 = (function () {
      function SIGUSR2() {

      };
      SIGUSR2.value = new SIGUSR2();
      return SIGUSR2;
  })();
  var SIGVTALRM = (function () {
      function SIGVTALRM() {

      };
      SIGVTALRM.value = new SIGVTALRM();
      return SIGVTALRM;
  })();
  var SIGWINCH = (function () {
      function SIGWINCH() {

      };
      SIGWINCH.value = new SIGWINCH();
      return SIGWINCH;
  })();
  var SIGXCPU = (function () {
      function SIGXCPU() {

      };
      SIGXCPU.value = new SIGXCPU();
      return SIGXCPU;
  })();
  var SIGXFSZ = (function () {
      function SIGXFSZ() {

      };
      SIGXFSZ.value = new SIGXFSZ();
      return SIGXFSZ;
  })();
  var toString = function (s) {
      if (s instanceof SIGABRT) {
          return "SIGABRT";
      };
      if (s instanceof SIGALRM) {
          return "SIGALRM";
      };
      if (s instanceof SIGBUS) {
          return "SIGBUS";
      };
      if (s instanceof SIGCHLD) {
          return "SIGCHLD";
      };
      if (s instanceof SIGCLD) {
          return "SIGCLD";
      };
      if (s instanceof SIGCONT) {
          return "SIGCONT";
      };
      if (s instanceof SIGEMT) {
          return "SIGEMT";
      };
      if (s instanceof SIGFPE) {
          return "SIGFPE";
      };
      if (s instanceof SIGHUP) {
          return "SIGHUP";
      };
      if (s instanceof SIGILL) {
          return "SIGILL";
      };
      if (s instanceof SIGINFO) {
          return "SIGINFO";
      };
      if (s instanceof SIGINT) {
          return "SIGINT";
      };
      if (s instanceof SIGIO) {
          return "SIGIO";
      };
      if (s instanceof SIGIOT) {
          return "SIGIOT";
      };
      if (s instanceof SIGKILL) {
          return "SIGKILL";
      };
      if (s instanceof SIGLOST) {
          return "SIGLOST";
      };
      if (s instanceof SIGPIPE) {
          return "SIGPIPE";
      };
      if (s instanceof SIGPOLL) {
          return "SIGPOLL";
      };
      if (s instanceof SIGPROF) {
          return "SIGPROF";
      };
      if (s instanceof SIGPWR) {
          return "SIGPWR";
      };
      if (s instanceof SIGQUIT) {
          return "SIGQUIT";
      };
      if (s instanceof SIGSEGV) {
          return "SIGSEGV";
      };
      if (s instanceof SIGSTKFLT) {
          return "SIGSTKFLT";
      };
      if (s instanceof SIGSTOP) {
          return "SIGSTOP";
      };
      if (s instanceof SIGSYS) {
          return "SIGSYS";
      };
      if (s instanceof SIGTERM) {
          return "SIGTERM";
      };
      if (s instanceof SIGTRAP) {
          return "SIGTRAP";
      };
      if (s instanceof SIGTSTP) {
          return "SIGTSTP";
      };
      if (s instanceof SIGTTIN) {
          return "SIGTTIN";
      };
      if (s instanceof SIGTTOU) {
          return "SIGTTOU";
      };
      if (s instanceof SIGUNUSED) {
          return "SIGUNUSED";
      };
      if (s instanceof SIGURG) {
          return "SIGURG";
      };
      if (s instanceof SIGUSR1) {
          return "SIGUSR1";
      };
      if (s instanceof SIGUSR2) {
          return "SIGUSR2";
      };
      if (s instanceof SIGVTALRM) {
          return "SIGVTALRM";
      };
      if (s instanceof SIGWINCH) {
          return "SIGWINCH";
      };
      if (s instanceof SIGXCPU) {
          return "SIGXCPU";
      };
      if (s instanceof SIGXFSZ) {
          return "SIGXFSZ";
      };
      throw new Error("Failed pattern match at Data.Posix.Signal line 48, column 14 - line 88, column 1: " + [ s.constructor.name ]);
  };
  var showSignal = new Data_Show.Show(toString);
  var fromString = function (s) {
      if (s === "SIGABRT") {
          return new Data_Maybe.Just(SIGABRT.value);
      };
      if (s === "SIGALRM") {
          return new Data_Maybe.Just(SIGALRM.value);
      };
      if (s === "SIGBUS") {
          return new Data_Maybe.Just(SIGBUS.value);
      };
      if (s === "SIGCHLD") {
          return new Data_Maybe.Just(SIGCHLD.value);
      };
      if (s === "SIGCLD") {
          return new Data_Maybe.Just(SIGCLD.value);
      };
      if (s === "SIGCONT") {
          return new Data_Maybe.Just(SIGCONT.value);
      };
      if (s === "SIGEMT") {
          return new Data_Maybe.Just(SIGEMT.value);
      };
      if (s === "SIGFPE") {
          return new Data_Maybe.Just(SIGFPE.value);
      };
      if (s === "SIGHUP") {
          return new Data_Maybe.Just(SIGHUP.value);
      };
      if (s === "SIGILL") {
          return new Data_Maybe.Just(SIGILL.value);
      };
      if (s === "SIGINFO") {
          return new Data_Maybe.Just(SIGINFO.value);
      };
      if (s === "SIGINT") {
          return new Data_Maybe.Just(SIGINT.value);
      };
      if (s === "SIGIO") {
          return new Data_Maybe.Just(SIGIO.value);
      };
      if (s === "SIGIOT") {
          return new Data_Maybe.Just(SIGIOT.value);
      };
      if (s === "SIGKILL") {
          return new Data_Maybe.Just(SIGKILL.value);
      };
      if (s === "SIGLOST") {
          return new Data_Maybe.Just(SIGLOST.value);
      };
      if (s === "SIGPIPE") {
          return new Data_Maybe.Just(SIGPIPE.value);
      };
      if (s === "SIGPOLL") {
          return new Data_Maybe.Just(SIGPOLL.value);
      };
      if (s === "SIGPROF") {
          return new Data_Maybe.Just(SIGPROF.value);
      };
      if (s === "SIGPWR") {
          return new Data_Maybe.Just(SIGPWR.value);
      };
      if (s === "SIGQUIT") {
          return new Data_Maybe.Just(SIGQUIT.value);
      };
      if (s === "SIGSEGV") {
          return new Data_Maybe.Just(SIGSEGV.value);
      };
      if (s === "SIGSTKFLT") {
          return new Data_Maybe.Just(SIGSTKFLT.value);
      };
      if (s === "SIGSTOP") {
          return new Data_Maybe.Just(SIGSTOP.value);
      };
      if (s === "SIGSYS") {
          return new Data_Maybe.Just(SIGSYS.value);
      };
      if (s === "SIGTERM") {
          return new Data_Maybe.Just(SIGTERM.value);
      };
      if (s === "SIGTRAP") {
          return new Data_Maybe.Just(SIGTRAP.value);
      };
      if (s === "SIGTSTP") {
          return new Data_Maybe.Just(SIGTSTP.value);
      };
      if (s === "SIGTTIN") {
          return new Data_Maybe.Just(SIGTTIN.value);
      };
      if (s === "SIGTTOU") {
          return new Data_Maybe.Just(SIGTTOU.value);
      };
      if (s === "SIGUNUSED") {
          return new Data_Maybe.Just(SIGUNUSED.value);
      };
      if (s === "SIGURG") {
          return new Data_Maybe.Just(SIGURG.value);
      };
      if (s === "SIGUSR1") {
          return new Data_Maybe.Just(SIGUSR1.value);
      };
      if (s === "SIGUSR2") {
          return new Data_Maybe.Just(SIGUSR2.value);
      };
      if (s === "SIGVTALRM") {
          return new Data_Maybe.Just(SIGVTALRM.value);
      };
      if (s === "SIGWINCH") {
          return new Data_Maybe.Just(SIGWINCH.value);
      };
      if (s === "SIGXCPU") {
          return new Data_Maybe.Just(SIGXCPU.value);
      };
      if (s === "SIGXFSZ") {
          return new Data_Maybe.Just(SIGXFSZ.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var eqSignal = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof SIGABRT && y instanceof SIGABRT) {
              return true;
          };
          if (x instanceof SIGALRM && y instanceof SIGALRM) {
              return true;
          };
          if (x instanceof SIGBUS && y instanceof SIGBUS) {
              return true;
          };
          if (x instanceof SIGCHLD && y instanceof SIGCHLD) {
              return true;
          };
          if (x instanceof SIGCLD && y instanceof SIGCLD) {
              return true;
          };
          if (x instanceof SIGCONT && y instanceof SIGCONT) {
              return true;
          };
          if (x instanceof SIGEMT && y instanceof SIGEMT) {
              return true;
          };
          if (x instanceof SIGFPE && y instanceof SIGFPE) {
              return true;
          };
          if (x instanceof SIGHUP && y instanceof SIGHUP) {
              return true;
          };
          if (x instanceof SIGILL && y instanceof SIGILL) {
              return true;
          };
          if (x instanceof SIGINFO && y instanceof SIGINFO) {
              return true;
          };
          if (x instanceof SIGINT && y instanceof SIGINT) {
              return true;
          };
          if (x instanceof SIGIO && y instanceof SIGIO) {
              return true;
          };
          if (x instanceof SIGIOT && y instanceof SIGIOT) {
              return true;
          };
          if (x instanceof SIGKILL && y instanceof SIGKILL) {
              return true;
          };
          if (x instanceof SIGLOST && y instanceof SIGLOST) {
              return true;
          };
          if (x instanceof SIGPIPE && y instanceof SIGPIPE) {
              return true;
          };
          if (x instanceof SIGPOLL && y instanceof SIGPOLL) {
              return true;
          };
          if (x instanceof SIGPROF && y instanceof SIGPROF) {
              return true;
          };
          if (x instanceof SIGPWR && y instanceof SIGPWR) {
              return true;
          };
          if (x instanceof SIGQUIT && y instanceof SIGQUIT) {
              return true;
          };
          if (x instanceof SIGSEGV && y instanceof SIGSEGV) {
              return true;
          };
          if (x instanceof SIGSTKFLT && y instanceof SIGSTKFLT) {
              return true;
          };
          if (x instanceof SIGSTOP && y instanceof SIGSTOP) {
              return true;
          };
          if (x instanceof SIGSYS && y instanceof SIGSYS) {
              return true;
          };
          if (x instanceof SIGTERM && y instanceof SIGTERM) {
              return true;
          };
          if (x instanceof SIGTRAP && y instanceof SIGTRAP) {
              return true;
          };
          if (x instanceof SIGTSTP && y instanceof SIGTSTP) {
              return true;
          };
          if (x instanceof SIGTTIN && y instanceof SIGTTIN) {
              return true;
          };
          if (x instanceof SIGTTOU && y instanceof SIGTTOU) {
              return true;
          };
          if (x instanceof SIGUNUSED && y instanceof SIGUNUSED) {
              return true;
          };
          if (x instanceof SIGURG && y instanceof SIGURG) {
              return true;
          };
          if (x instanceof SIGUSR1 && y instanceof SIGUSR1) {
              return true;
          };
          if (x instanceof SIGUSR2 && y instanceof SIGUSR2) {
              return true;
          };
          if (x instanceof SIGVTALRM && y instanceof SIGVTALRM) {
              return true;
          };
          if (x instanceof SIGWINCH && y instanceof SIGWINCH) {
              return true;
          };
          if (x instanceof SIGXCPU && y instanceof SIGXCPU) {
              return true;
          };
          if (x instanceof SIGXFSZ && y instanceof SIGXFSZ) {
              return true;
          };
          return false;
      };
  });
  var ordSignal = new Data_Ord.Ord(function () {
      return eqSignal;
  }, function (x) {
      return function (y) {
          if (x instanceof SIGABRT && y instanceof SIGABRT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGABRT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGABRT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGALRM && y instanceof SIGALRM) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGALRM) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGALRM) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGBUS && y instanceof SIGBUS) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGBUS) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGBUS) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGCHLD && y instanceof SIGCHLD) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGCHLD) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGCHLD) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGCLD && y instanceof SIGCLD) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGCLD) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGCLD) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGCONT && y instanceof SIGCONT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGCONT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGCONT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGEMT && y instanceof SIGEMT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGEMT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGEMT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGFPE && y instanceof SIGFPE) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGFPE) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGFPE) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGHUP && y instanceof SIGHUP) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGHUP) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGHUP) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGILL && y instanceof SIGILL) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGILL) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGILL) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGINFO && y instanceof SIGINFO) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGINFO) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGINFO) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGINT && y instanceof SIGINT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGINT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGINT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGIO && y instanceof SIGIO) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGIO) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGIO) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGIOT && y instanceof SIGIOT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGIOT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGIOT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGKILL && y instanceof SIGKILL) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGKILL) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGKILL) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGLOST && y instanceof SIGLOST) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGLOST) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGLOST) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGPIPE && y instanceof SIGPIPE) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGPIPE) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGPIPE) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGPOLL && y instanceof SIGPOLL) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGPOLL) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGPOLL) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGPROF && y instanceof SIGPROF) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGPROF) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGPROF) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGPWR && y instanceof SIGPWR) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGPWR) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGPWR) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGQUIT && y instanceof SIGQUIT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGQUIT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGQUIT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGSEGV && y instanceof SIGSEGV) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGSEGV) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGSEGV) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGSTKFLT && y instanceof SIGSTKFLT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGSTKFLT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGSTKFLT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGSTOP && y instanceof SIGSTOP) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGSTOP) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGSTOP) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGSYS && y instanceof SIGSYS) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGSYS) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGSYS) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGTERM && y instanceof SIGTERM) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGTERM) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGTERM) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGTRAP && y instanceof SIGTRAP) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGTRAP) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGTRAP) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGTSTP && y instanceof SIGTSTP) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGTSTP) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGTSTP) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGTTIN && y instanceof SIGTTIN) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGTTIN) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGTTIN) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGTTOU && y instanceof SIGTTOU) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGTTOU) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGTTOU) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGUNUSED && y instanceof SIGUNUSED) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGUNUSED) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGUNUSED) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGURG && y instanceof SIGURG) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGURG) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGURG) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGUSR1 && y instanceof SIGUSR1) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGUSR1) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGUSR1) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGUSR2 && y instanceof SIGUSR2) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGUSR2) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGUSR2) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGVTALRM && y instanceof SIGVTALRM) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGVTALRM) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGVTALRM) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGWINCH && y instanceof SIGWINCH) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGWINCH) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGWINCH) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGXCPU && y instanceof SIGXCPU) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGXCPU) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGXCPU) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGXFSZ && y instanceof SIGXFSZ) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Posix.Signal line 140, column 8 - line 140, column 34: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  exports["SIGABRT"] = SIGABRT;
  exports["SIGALRM"] = SIGALRM;
  exports["SIGBUS"] = SIGBUS;
  exports["SIGCHLD"] = SIGCHLD;
  exports["SIGCLD"] = SIGCLD;
  exports["SIGCONT"] = SIGCONT;
  exports["SIGEMT"] = SIGEMT;
  exports["SIGFPE"] = SIGFPE;
  exports["SIGHUP"] = SIGHUP;
  exports["SIGILL"] = SIGILL;
  exports["SIGINFO"] = SIGINFO;
  exports["SIGINT"] = SIGINT;
  exports["SIGIO"] = SIGIO;
  exports["SIGIOT"] = SIGIOT;
  exports["SIGKILL"] = SIGKILL;
  exports["SIGLOST"] = SIGLOST;
  exports["SIGPIPE"] = SIGPIPE;
  exports["SIGPOLL"] = SIGPOLL;
  exports["SIGPROF"] = SIGPROF;
  exports["SIGPWR"] = SIGPWR;
  exports["SIGQUIT"] = SIGQUIT;
  exports["SIGSEGV"] = SIGSEGV;
  exports["SIGSTKFLT"] = SIGSTKFLT;
  exports["SIGSTOP"] = SIGSTOP;
  exports["SIGSYS"] = SIGSYS;
  exports["SIGTERM"] = SIGTERM;
  exports["SIGTRAP"] = SIGTRAP;
  exports["SIGTSTP"] = SIGTSTP;
  exports["SIGTTIN"] = SIGTTIN;
  exports["SIGTTOU"] = SIGTTOU;
  exports["SIGUNUSED"] = SIGUNUSED;
  exports["SIGURG"] = SIGURG;
  exports["SIGUSR1"] = SIGUSR1;
  exports["SIGUSR2"] = SIGUSR2;
  exports["SIGVTALRM"] = SIGVTALRM;
  exports["SIGWINCH"] = SIGWINCH;
  exports["SIGXCPU"] = SIGXCPU;
  exports["SIGXFSZ"] = SIGXFSZ;
  exports["toString"] = toString;
  exports["fromString"] = fromString;
  exports["showSignal"] = showSignal;
  exports["eqSignal"] = eqSignal;
  exports["ordSignal"] = ordSignal;
})(PS["Data.Posix.Signal"] = PS["Data.Posix.Signal"] || {});
(function(exports) {
    "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._fmapObject = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  exports._mapWithKey = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(k)(m0[k]);
      }
    }
    return m;
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  exports._foldSCObject = function (m, z, f, fromMaybe) {
    var acc = z;
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        var maybeR = f(acc)(k)(m[k]);
        var r = fromMaybe(null)(maybeR);
        if (r === null) return acc;
        else acc = r;
      }
    }
    return acc;
  };

  exports.all = function (f) {
    return function (m) {
      for (var k in m) {
        if (hasOwnProperty.call(m, k) && !f(k)(m[k])) return false;
      }
      return true;
    };
  };

  exports.size = function (m) {
    var s = 0;
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        ++s;
      }
    }
    return s;
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  exports._unsafeDeleteObject = function (m, k) {
    delete m[k];
    return m;
  };

  exports._lookupST = function (no, yes, k, m) {
    return function () {
      return k in m ? yes(m[k]) : no;
    };
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;

  exports.keys = Object.keys || toArrayWithKey(function (k) {
    return function () { return k; };
  });
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
    "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.peekImpl = function (just) {
    return function (nothing) {
      return function (k) {
        return function (m) {
          return function () {
            return {}.hasOwnProperty.call(m, k) ? just(m[k]) : nothing;
          };
        };
      };
    };
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (k) {
    return function (m) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Foreign.Object.ST"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];                 
  var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["peek"] = peek;
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
  exports["delete"] = $foreign["delete"];
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Foreign.Object"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Foreign_Object_ST = PS["Foreign.Object.ST"];
  var Prelude = PS["Prelude"];                 
  var values = $foreign.toArrayWithKey(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var toUnfoldable = function (dictUnfoldable) {
      return function ($44) {
          return Data_Array.toUnfoldable(dictUnfoldable)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)($44));
      };
  };
  var toAscUnfoldable = function (dictUnfoldable) {
      return function ($45) {
          return Data_Array.toUnfoldable(dictUnfoldable)(Data_Array.sortWith(Data_Ord.ordString)(Data_Tuple.fst)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)($45)));
      };
  };
  var toAscArray = toAscUnfoldable(Data_Unfoldable.unfoldableArray);
  var toArray = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
  var thawST = $foreign._copyST;
  var singleton = function (k) {
      return function (v) {
          return $foreign.runST(Control_Bind.bindFlipped(Control_Monad_ST_Internal.bindST)(Foreign_Object_ST.poke(k)(v))(Foreign_Object_ST["new"]));
      };
  };
  var showObject = function (dictShow) {
      return new Data_Show.Show(function (m) {
          return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(Data_Show.showString)(dictShow)))(toArray(m)) + ")");
      });
  };
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(thawST(m))(function (v) {
              return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(f(v))(function (v1) {
                  return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(v);
              });
          }));
      };
  };
  var member = Data_Function_Uncurried.runFn4($foreign._lookup)(false)(Data_Function["const"](true));
  var mapWithKey = function (f) {
      return function (m) {
          return $foreign._mapWithKey(m, f);
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var isSubmap = function (dictEq) {
      return function (m1) {
          return function (m2) {
              var f = function (k) {
                  return function (v) {
                      return $foreign._lookup(false, Data_Eq.eq(dictEq)(v), k, m2);
                  };
              };
              return $foreign.all(f)(m1);
          };
      };
  };
  var isEmpty = $foreign.all(function (v) {
      return function (v1) {
          return false;
      };
  });
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var functorObject = new Data_Functor.Functor(function (f) {
      return function (m) {
          return $foreign._fmapObject(m, f);
      };
  });
  var functorWithIndexObject = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorObject;
  }, mapWithKey);
  var fromFoldableWith = function (dictFoldable) {
      return function (f) {
          return function (l) {
              return $foreign.runST(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Foreign_Object_ST["new"])(function (v) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_ST_Internal.bindST)(Data_Foldable.for_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(l)(function (v1) {
                      return Control_Bind.bind(Control_Monad_ST_Internal.bindST)($foreign._lookupST(v1.value1, f(v1.value1), v1.value0, v))(function (v$prime) {
                          return Foreign_Object_ST.poke(v1.value0)(v$prime)(v);
                      });
                  }))(function () {
                      return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(v);
                  });
              }));
          };
      };
  };
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return $foreign.runST(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Foreign_Object_ST["new"])(function (v) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_ST_Internal.bindST)(Data_Foldable.for_(Control_Monad_ST_Internal.applicativeST)(Data_Foldable.foldableArray)(Data_Array.fromFoldable(dictFoldable)(l))(function (v1) {
                  return Foreign_Object_ST.poke(v1.value0)(v1.value1)(v);
              }))(function () {
                  return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(v);
              });
          }));
      };
  };
  var freezeST = $foreign._copyST;
  var foldMaybe = function (f) {
      return function (z) {
          return function (m) {
              return $foreign._foldSCObject(m, z, f, Data_Maybe.fromMaybe);
          };
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (z) {
              return $foreign._foldM(Control_Bind.bind(dictMonad.Bind1()))(f)(Control_Applicative.pure(dictMonad.Applicative0())(z));
          };
      };
  };
  var semigroupObject = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (m1) {
          return function (m2) {
              return mutate(function (s1) {
                  return foldM(Control_Monad_ST_Internal.monadST)(function (s2) {
                      return function (k) {
                          return function (v2) {
                              return Foreign_Object_ST.poke(k)($foreign._lookup(v2, function (v1) {
                                  return Data_Semigroup.append(dictSemigroup)(v1)(v2);
                              }, k, m2))(s2);
                          };
                      };
                  })(s1)(m1);
              })(m2);
          };
      });
  };
  var monoidObject = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupObject(dictSemigroup);
      }, $foreign.empty);
  };
  var union = function (m) {
      return mutate(function (s) {
          return foldM(Control_Monad_ST_Internal.monadST)(function (s$prime) {
              return function (k) {
                  return function (v) {
                      return Foreign_Object_ST.poke(k)(v)(s$prime);
                  };
              };
          })(s)(m);
      });
  };
  var unions = function (dictFoldable) {
      return Data_Foldable.foldl(dictFoldable)(union)($foreign.empty);
  };
  var fold = $foreign._foldM(Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableObject = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return foldMap(dictMonoid)(Data_Function["const"](f));
      };
  }, function (f) {
      return fold(function (z) {
          return function (v) {
              return f(z);
          };
      });
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
          };
      };
  });
  var foldableWithIndexObject = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableObject;
  }, function (dictMonoid) {
      return foldMap(dictMonoid);
  }, function (f) {
      return fold(Data_Function.flip(f));
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
          };
      };
  });
  var traversableWithIndexObject = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexObject;
  }, function () {
      return functorWithIndexObject;
  }, function () {
      return traversableObject;
  }, function (dictApplicative) {
      return function (f) {
          return function (ms) {
              return fold(function (acc) {
                  return function (k) {
                      return function (v) {
                          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                      };
                  };
              })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
          };
      };
  });
  var traversableObject = new Data_Traversable.Traversable(function () {
      return foldableObject;
  }, function () {
      return functorObject;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function ($46) {
          return Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative)(Data_Function["const"]($46));
      };
  });
  var filterWithKey = function (predicate) {
      return function (m) {
          var go = (function () {
              var step = function (acc) {
                  return function (k) {
                      return function (v) {
                          var $40 = predicate(k)(v);
                          if ($40) {
                              return Foreign_Object_ST.poke(k)(v)(acc);
                          };
                          return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(acc);
                      };
                  };
              };
              return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Foreign_Object_ST["new"])(function (v) {
                  return foldM(Control_Monad_ST_Internal.monadST)(step)(v)(m);
              });
          })();
          return $foreign.runST(go);
      };
  };
  var filterKeys = function (predicate) {
      return filterWithKey(function ($47) {
          return Data_Function["const"](predicate($47));
      });
  };
  var filter = function (predicate) {
      return filterWithKey(Data_Function["const"](predicate));
  };
  var eqObject = function (dictEq) {
      return new Data_Eq.Eq(function (m1) {
          return function (m2) {
              return isSubmap(dictEq)(m1)(m2) && isSubmap(dictEq)(m2)(m1);
          };
      });
  };
  var ordObject = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqObject(dictOrd.Eq0());
      }, function (m1) {
          return function (m2) {
              return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(Data_Ord.ordString)(dictOrd)))(toAscArray(m1))(toAscArray(m2));
          };
      });
  };
  var eq1Object = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqObject(dictEq));
  });
  var $$delete = function (k) {
      return mutate(Foreign_Object_ST["delete"](k));
  };
  var pop = function (k) {
      return function (m) {
          return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(lookup(k)(m))(function (a) {
              return new Data_Tuple.Tuple(a, $$delete(k)(m));
          });
      };
  };
  var alter = function (f) {
      return function (k) {
          return function (m) {
              var v = f(lookup(k)(m));
              if (v instanceof Data_Maybe.Nothing) {
                  return $$delete(k)(m);
              };
              if (v instanceof Data_Maybe.Just) {
                  return insert(k)(v.value0)(m);
              };
              throw new Error("Failed pattern match at Foreign.Object line 204, column 15 - line 206, column 25: " + [ v.constructor.name ]);
          };
      };
  };
  var update = function (f) {
      return function (k) {
          return function (m) {
              return alter(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
          };
      };
  };
  exports["isEmpty"] = isEmpty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["toUnfoldable"] = toUnfoldable;
  exports["toAscUnfoldable"] = toAscUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["fromFoldableWith"] = fromFoldableWith;
  exports["delete"] = $$delete;
  exports["pop"] = pop;
  exports["member"] = member;
  exports["alter"] = alter;
  exports["update"] = update;
  exports["mapWithKey"] = mapWithKey;
  exports["filterWithKey"] = filterWithKey;
  exports["filterKeys"] = filterKeys;
  exports["filter"] = filter;
  exports["values"] = values;
  exports["union"] = union;
  exports["unions"] = unions;
  exports["isSubmap"] = isSubmap;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["foldM"] = foldM;
  exports["foldMaybe"] = foldMaybe;
  exports["thawST"] = thawST;
  exports["freezeST"] = freezeST;
  exports["functorObject"] = functorObject;
  exports["functorWithIndexObject"] = functorWithIndexObject;
  exports["foldableObject"] = foldableObject;
  exports["foldableWithIndexObject"] = foldableWithIndexObject;
  exports["traversableObject"] = traversableObject;
  exports["traversableWithIndexObject"] = traversableWithIndexObject;
  exports["eqObject"] = eqObject;
  exports["eq1Object"] = eq1Object;
  exports["ordObject"] = ordObject;
  exports["showObject"] = showObject;
  exports["semigroupObject"] = semigroupObject;
  exports["monoidObject"] = monoidObject;
  exports["empty"] = $foreign.empty;
  exports["size"] = $foreign.size;
  exports["keys"] = $foreign.keys;
  exports["all"] = $foreign.all;
  exports["runST"] = $foreign.runST;
  exports["toArrayWithKey"] = $foreign.toArrayWithKey;
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var AIX = (function () {
      function AIX() {

      };
      AIX.value = new AIX();
      return AIX;
  })();
  var Darwin = (function () {
      function Darwin() {

      };
      Darwin.value = new Darwin();
      return Darwin;
  })();
  var FreeBSD = (function () {
      function FreeBSD() {

      };
      FreeBSD.value = new FreeBSD();
      return FreeBSD;
  })();
  var Linux = (function () {
      function Linux() {

      };
      Linux.value = new Linux();
      return Linux;
  })();
  var OpenBSD = (function () {
      function OpenBSD() {

      };
      OpenBSD.value = new OpenBSD();
      return OpenBSD;
  })();
  var SunOS = (function () {
      function SunOS() {

      };
      SunOS.value = new SunOS();
      return SunOS;
  })();
  var Win32 = (function () {
      function Win32() {

      };
      Win32.value = new Win32();
      return Win32;
  })();
  var Android = (function () {
      function Android() {

      };
      Android.value = new Android();
      return Android;
  })();
  var toString = function (v) {
      if (v instanceof AIX) {
          return "aix";
      };
      if (v instanceof Darwin) {
          return "darwin";
      };
      if (v instanceof FreeBSD) {
          return "freebsd";
      };
      if (v instanceof Linux) {
          return "linux";
      };
      if (v instanceof OpenBSD) {
          return "openbsd";
      };
      if (v instanceof SunOS) {
          return "sunos";
      };
      if (v instanceof Win32) {
          return "win32";
      };
      if (v instanceof Android) {
          return "android";
      };
      throw new Error("Failed pattern match at Node.Platform line 20, column 1 - line 20, column 31: " + [ v.constructor.name ]);
  };
  var showPlatform = new Data_Show.Show(function (v) {
      if (v instanceof AIX) {
          return "AIX";
      };
      if (v instanceof Darwin) {
          return "Darwin";
      };
      if (v instanceof FreeBSD) {
          return "FreeBSD";
      };
      if (v instanceof Linux) {
          return "Linux";
      };
      if (v instanceof OpenBSD) {
          return "OpenBSD";
      };
      if (v instanceof SunOS) {
          return "SunOS";
      };
      if (v instanceof Win32) {
          return "Win32";
      };
      if (v instanceof Android) {
          return "Android";
      };
      throw new Error("Failed pattern match at Node.Platform line 43, column 1 - line 43, column 39: " + [ v.constructor.name ]);
  });
  var fromString = function (v) {
      if (v === "aix") {
          return new Data_Maybe.Just(AIX.value);
      };
      if (v === "darwin") {
          return new Data_Maybe.Just(Darwin.value);
      };
      if (v === "freebsd") {
          return new Data_Maybe.Just(FreeBSD.value);
      };
      if (v === "linux") {
          return new Data_Maybe.Just(Linux.value);
      };
      if (v === "openbsd") {
          return new Data_Maybe.Just(OpenBSD.value);
      };
      if (v === "sunos") {
          return new Data_Maybe.Just(SunOS.value);
      };
      if (v === "win32") {
          return new Data_Maybe.Just(Win32.value);
      };
      if (v === "android") {
          return new Data_Maybe.Just(Android.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var eqPlatform = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof AIX && y instanceof AIX) {
              return true;
          };
          if (x instanceof Darwin && y instanceof Darwin) {
              return true;
          };
          if (x instanceof FreeBSD && y instanceof FreeBSD) {
              return true;
          };
          if (x instanceof Linux && y instanceof Linux) {
              return true;
          };
          if (x instanceof OpenBSD && y instanceof OpenBSD) {
              return true;
          };
          if (x instanceof SunOS && y instanceof SunOS) {
              return true;
          };
          if (x instanceof Win32 && y instanceof Win32) {
              return true;
          };
          if (x instanceof Android && y instanceof Android) {
              return true;
          };
          return false;
      };
  });
  var ordPlatform = new Data_Ord.Ord(function () {
      return eqPlatform;
  }, function (x) {
      return function (y) {
          if (x instanceof AIX && y instanceof AIX) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof AIX) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AIX) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Darwin && y instanceof Darwin) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Darwin) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Darwin) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof FreeBSD && y instanceof FreeBSD) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof FreeBSD) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof FreeBSD) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Linux && y instanceof Linux) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Linux) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Linux) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof OpenBSD && y instanceof OpenBSD) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof OpenBSD) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof OpenBSD) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SunOS && y instanceof SunOS) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SunOS) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SunOS) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Win32 && y instanceof Win32) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Win32) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Win32) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Android && y instanceof Android) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Node.Platform line 54, column 8 - line 54, column 36: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  exports["AIX"] = AIX;
  exports["Darwin"] = Darwin;
  exports["FreeBSD"] = FreeBSD;
  exports["Linux"] = Linux;
  exports["OpenBSD"] = OpenBSD;
  exports["SunOS"] = SunOS;
  exports["Win32"] = Win32;
  exports["Android"] = Android;
  exports["toString"] = toString;
  exports["fromString"] = fromString;
  exports["showPlatform"] = showPlatform;
  exports["eqPlatform"] = eqPlatform;
  exports["ordPlatform"] = ordPlatform;
})(PS["Node.Platform"] = PS["Node.Platform"] || {});
(function(exports) {
    "use strict";

  exports.undefined = undefined;

  exports.setEncodingImpl = function (s) {
    return function (enc) {
      return function () {
        s.setEncoding(enc);
      };
    };
  };

  exports.readChunkImpl = function (Left) {
    return function (Right) {
      return function (chunk) {
        if (chunk instanceof Buffer) {
          return Right(chunk);
        } else if (typeof chunk === "string") {
          return Left(chunk);
        } else {
          throw new Error(
            "Node.Stream.readChunkImpl: Unrecognised " +
            "chunk type; expected String or Buffer, got: " +
            chunk);
        }
      };
    };
  };

  exports.onDataEitherImpl = function (readChunk) {
    return function (r) {
      return function (f) {
        return function () {
          r.on("data", function (data) {
            f(readChunk(data))();
          });
        };
      };
    };
  };

  exports.onEnd = function (s) {
    return function (f) {
      return function () {
        s.on("end", f);
      };
    };
  };

  exports.onFinish = function (s) {
    return function (f) {
      return function () {
        s.on("finish", f);
      };
    };
  };

  exports.onReadable = function (s) {
    return function (f) {
      return function () {
        s.on("readable", f);
      };
    };
  };

  exports.onError = function (s) {
    return function (f) {
      return function () {
        s.on("error", function (e) {
          f(e)();
        });
      };
    };
  };

  exports.onClose = function (s) {
    return function (f) {
      return function () {
        s.on("close", f);
      };
    };
  };

  exports.resume = function (s) {
    return function () {
      s.resume();
    };
  };

  exports.pause = function (s) {
    return function () {
      s.pause();
    };
  };

  exports.isPaused = function (s) {
    return function () {
      return s.isPaused();
    };
  };

  exports.pipe = function (r) {
    return function (w) {
      return function () {
        return r.pipe(w);
      };
    };
  };

  exports.unpipe = function (r) {
    return function (w) {
      return function () {
        return r.unpipe(w);
      };
    };
  };

  exports.unpipeAll = function (r) {
    return function () {
      return r.unpipe();
    };
  };

  exports.readImpl = function (readChunk) {
    return function (Nothing) {
      return function (Just) {
        return function (r) {
          return function (s) {
            return function () {
              var v = r.read(s);
              if (v === null) {
                return Nothing;
              } else {
                return Just(readChunk(v));
              }
            };
          };
        };
      };
    };
  };

  exports.write = function (w) {
    return function (chunk) {
      return function (done) {
        return function () {
          return w.write(chunk, null, done);
        };
      };
    };
  };

  exports.writeStringImpl = function (w) {
    return function (enc) {
      return function (s) {
        return function (done) {
          return function () {
            return w.write(s, enc, done);
          };
        };
      };
    };
  };

  exports.cork = function (w) {
    return function () {
      return w.cork();
    };
  };

  exports.uncork = function (w) {
    return function () {
      return w.uncork();
    };
  };

  exports.setDefaultEncodingImpl = function (w) {
    return function (enc) {
      return function () {
        w.setDefaultEncoding(enc);
      };
    };
  };

  exports.end = function (w) {
    return function (done) {
      return function () {
        w.end(null, null, function () {
          done();
        });
      };
    };
  };

  exports.destroy = function (strm) {
    return function () {
      strm.destroy(null);
    };
  };

  exports.destroyWithError = function (strm) {
    return function (e) {
      return function () {
        strm.destroy(e);
      };
    };
  };
})(PS["Node.Stream"] = PS["Node.Stream"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Node.Stream"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Effect_Exception = PS["Effect.Exception"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_Encoding = PS["Node.Encoding"];
  var Prelude = PS["Prelude"];                 
  var writeString = function (w) {
      return function (enc) {
          return $foreign.writeStringImpl(w)(Data_Show.show(Node_Encoding.showEncoding)(enc));
      };
  };
  var setEncoding = function (r) {
      return function (enc) {
          return $foreign.setEncodingImpl(r)(Data_Show.show(Node_Encoding.showEncoding)(enc));
      };
  };
  var setDefaultEncoding = function (r) {
      return function (enc) {
          return $foreign.setDefaultEncodingImpl(r)(Data_Show.show(Node_Encoding.showEncoding)(enc));
      };
  };
  var readChunk = $foreign.readChunkImpl(Data_Either.Left.create)(Data_Either.Right.create);
  var readEither = function (r) {
      return function (size) {
          return $foreign.readImpl(readChunk)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create)(r)(Data_Maybe.fromMaybe($foreign["undefined"])(size));
      };
  };
  var readString = function (r) {
      return function (size) {
          return function (enc) {
              return function __do() {
                  var v = readEither(r)(size)();
                  if (v instanceof Data_Maybe.Nothing) {
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Left) {
                      return Effect_Exception["throw"]("Stream encoding should not be set")();
                  };
                  if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Right) {
                      return Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(Node_Buffer.toString(enc)(v.value0.value0))();
                  };
                  throw new Error("Failed pattern match at Node.Stream line 120, column 3 - line 123, column 60: " + [ v.constructor.name ]);
              };
          };
      };
  };
  var read = function (r) {
      return function (size) {
          return function __do() {
              var v = readEither(r)(size)();
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Left) {
                  return Effect_Exception["throw"]("Stream encoding should not be set")();
              };
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Right) {
                  return new Data_Maybe.Just(v.value0.value0);
              };
              throw new Error("Failed pattern match at Node.Stream line 107, column 3 - line 110, column 36: " + [ v.constructor.name ]);
          };
      };
  };
  var onDataEither = function (r) {
      return function (cb) {
          return $foreign.onDataEitherImpl(readChunk)(r)(cb);
      };
  };
  var onData = function (r) {
      return function (cb) {
          var fromEither = function (x) {
              if (x instanceof Data_Either.Left) {
                  return Effect_Exception["throw"]("Stream encoding should not be set");
              };
              if (x instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(x.value0);
              };
              throw new Error("Failed pattern match at Node.Stream line 94, column 5 - line 98, column 17: " + [ x.constructor.name ]);
          };
          return onDataEither(r)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)(cb)(fromEither));
      };
  };
  var onDataString = function (r) {
      return function (enc) {
          return function (cb) {
              return onData(r)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)(cb)(Node_Buffer.toString(enc)));
          };
      };
  };
  exports["onData"] = onData;
  exports["onDataString"] = onDataString;
  exports["onDataEither"] = onDataEither;
  exports["setEncoding"] = setEncoding;
  exports["read"] = read;
  exports["readString"] = readString;
  exports["readEither"] = readEither;
  exports["writeString"] = writeString;
  exports["setDefaultEncoding"] = setDefaultEncoding;
  exports["onReadable"] = $foreign.onReadable;
  exports["onEnd"] = $foreign.onEnd;
  exports["onFinish"] = $foreign.onFinish;
  exports["onClose"] = $foreign.onClose;
  exports["onError"] = $foreign.onError;
  exports["resume"] = $foreign.resume;
  exports["pause"] = $foreign.pause;
  exports["isPaused"] = $foreign.isPaused;
  exports["pipe"] = $foreign.pipe;
  exports["unpipe"] = $foreign.unpipe;
  exports["unpipeAll"] = $foreign.unpipeAll;
  exports["write"] = $foreign.write;
  exports["cork"] = $foreign.cork;
  exports["uncork"] = $foreign.uncork;
  exports["end"] = $foreign.end;
  exports["destroy"] = $foreign.destroy;
})(PS["Node.Stream"] = PS["Node.Stream"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Node.Process"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Posix = PS["Data.Posix"];
  var Data_Posix_Signal = PS["Data.Posix.Signal"];
  var Effect = PS["Effect"];
  var Foreign_Object = PS["Foreign.Object"];
  var Node_Platform = PS["Node.Platform"];
  var Node_Stream = PS["Node.Stream"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var version = $foreign.process.version;
  var stdoutIsTTY = $foreign.process.stdout.isTTY;
  var stdout = $foreign.process.stdout;
  var stdin = $foreign.process.stdin;
  var stderrIsTTY = $foreign.process.stderr.isTTY;
  var stderr = $foreign.process.stderr;
  var platformStr = $foreign.process.platform;
  var platform = Node_Platform.fromString(platformStr);
  var pid = $foreign.process.pid;
  var onSignal = function (sig) {
      return $foreign.onSignalImpl(Data_Posix_Signal.toString(sig));
  };
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  var nextTick = function (callback) {
      return mkEffect(function (v) {
          return $foreign.process.nextTick(callback);
      });
  };
  var getEnv = mkEffect(function (v) {
      return $foreign.process.env;
  });
  var lookupEnv = function (k) {
      return Data_Functor.map(Effect.functorEffect)(Foreign_Object.lookup(k))(getEnv);
  };
  var execPath = mkEffect(function (v) {
      return $foreign.process.execPath;
  });
  var execArgv = mkEffect(function (v) {
      return $foreign.process.execArgv;
  });
  var cwd = $foreign.process.cwd;
  var argv = mkEffect(function (v) {
      return $foreign.process.argv;
  });
  exports["onSignal"] = onSignal;
  exports["argv"] = argv;
  exports["execArgv"] = execArgv;
  exports["execPath"] = execPath;
  exports["cwd"] = cwd;
  exports["getEnv"] = getEnv;
  exports["lookupEnv"] = lookupEnv;
  exports["pid"] = pid;
  exports["platform"] = platform;
  exports["stdin"] = stdin;
  exports["stdout"] = stdout;
  exports["stderr"] = stderr;
  exports["stdoutIsTTY"] = stdoutIsTTY;
  exports["stderrIsTTY"] = stderrIsTTY;
  exports["version"] = version;
  exports["onBeforeExit"] = $foreign.onBeforeExit;
  exports["onExit"] = $foreign.onExit;
  exports["chdir"] = $foreign.chdir;
  exports["setEnv"] = $foreign.setEnv;
  exports["exit"] = $foreign.exit;
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Alchelmy"];
  var Alchelmy_Template_Page = PS["Alchelmy.Template.Page"];
  var Alchelmy_Template_Root = PS["Alchelmy.Template.Root"];
  var Alchelmy_Template_Router = PS["Alchelmy.Template.Router"];
  var Alchelmy_Template_Style = PS["Alchelmy.Template.Style"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Data_Traversable = PS["Data.Traversable"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Class_Console = PS["Effect.Class.Console"];
  var Effect_Console = PS["Effect.Console"];
  var Effect_Exception = PS["Effect.Exception"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_Encoding = PS["Node.Encoding"];
  var Node_FS_Aff = PS["Node.FS.Aff"];
  var Node_FS_Stats = PS["Node.FS.Stats"];
  var Node_Path = PS["Node.Path"];
  var Node_Process = PS["Node.Process"];
  var Prelude = PS["Prelude"];                 
  var validatePageName = function (pageName) {
      var v = Data_Functor.map(Data_Either.functorEither)(Data_Function.flip(Data_String_Regex.test)(pageName))(Data_String_Regex.regex("[A-Z][a-zA-Z0-9_]*")(Data_String_Regex_Flags.noFlags));
      if (v instanceof Data_Either.Left) {
          return false;
      };
      if (v instanceof Data_Either.Right) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Alchelmy line 168, column 29 - line 170, column 27: " + [ v.constructor.name ]);
  };
  var usage = "\x0aUsage: \x0a\x0a  alchelmy init <application>\x0a\x0a    Create new application. \x0a\x0a  alchelmy update    \x0a\x0a    (Re)Generate Alchemy.elm, alchemy.js\x0a\x0a  alchelmy new <name>      \x0a\x0a    Create new page named <name>. <name> must be an valid module name.\x0a";
  var glob = function (pattern) {
      return Effect_Aff.makeAff(function (resolve) {
          return function __do() {
              var v = $foreign.globEffect(function (err) {
                  return resolve(new Data_Either.Left(err));
              })(function (results) {
                  return resolve(new Data_Either.Right(results));
              })(pattern)();
              return Effect_Aff.nonCanceler;
          };
      });
  };
  var getApplicationName = Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.readdir("./src"))(function (v) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable["for"](Effect_Aff.applicativeAff)(Data_Traversable.traversableArray)(v)(function (file) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ "./src/" ])(file)))(function (v1) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.stat(v1))(function (v2) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)((function () {
                      var $39 = Node_FS_Stats.isDirectory(v2);
                      if ($39) {
                          return new Data_Maybe.Just(file);
                      };
                      return Data_Maybe.Nothing.value;
                  })());
              });
          });
      }))(function (v1) {
          var dirs = Data_Array.catMaybes(v1);
          if (dirs.length === 1) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(dirs[0]);
          };
          return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Cannot decide the application name. Too many directory or no directory in src directory. "));
      });
  });
  var pageExists = function (pageName) {
      var $43 = validatePageName(pageName);
      if ($43) {
          return Control_Bind.bind(Effect_Aff.bindAff)(getApplicationName)(function (v) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ "./src/", v, "Page" ])(pageName + ".elm")))(function (v1) {
                  return Node_FS_Aff.exists(v1);
              });
          });
      };
      return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Invalid page name: " + (pageName + ". An page name must be an valid Elm module name.")));
  };
  var ensureDir = function (dir) {
      return Data_Functor["void"](Effect_Aff.functorAff)(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(Node_FS_Aff.mkdir(dir)));
  };
  var generateNewPage = function (pageName) {
      return function (routing) {
          var $46 = validatePageName(pageName);
          if ($46) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Generating new page: " + pageName))(function () {
                  return Control_Bind.bind(Effect_Aff.bindAff)(getApplicationName)(function (v) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Application found: " + v))(function () {
                          return Control_Bind.bind(Effect_Aff.bindAff)(pageExists(pageName))(function (v1) {
                              if (v1) {
                                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                      Effect_Console.error("[Error] Page module '" + (pageName + "' already exists."))();
                                      return Node_Process.exit(1)();
                                  });
                              };
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ "./src/", v ])("Page")))(function (v2) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(ensureDir(v2))(function () {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ v2 ])(pageName + ".css")))(function (v3) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Buffer.fromString("")(Node_Encoding.UTF8.value)))(function (v4) {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Node_FS_Aff.writeFile(v3)(v4))(function () {
                                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ v2 ])(pageName + ".elm")))(function (v5) {
                                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Buffer.fromString(Alchelmy_Template_Page.renderBlankPage(v)(pageName)(routing))(Node_Encoding.UTF8.value)))(function (v6) {
                                                          return Node_FS_Aff.writeFile(v5)(v6);
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          };
          return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Invalid page name: " + (pageName + ". An page name must be an valid Elm module name.")));
      };
  };
  var generateRouter = function (argv) {
      return Control_Bind.bind(Effect_Aff.bindAff)(getApplicationName)(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ "src", v ])("Root.elm")))(function (v1) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.exists(v1))(function (v2) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(!v2)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Generating " + (v + "/Root.elm")))(function () {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ ".", "src", v ])("Root.elm")))(function (v3) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Buffer.fromString(Alchelmy_Template_Root.renderRoot(v))(Node_Encoding.UTF8.value)))(function (v4) {
                              return Node_FS_Aff.writeFile(v3)(v4);
                          });
                      });
                  })))(function () {
                      return Control_Bind.bind(Effect_Aff.bindAff)(pageExists("NotFound"))(function (v3) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(!v3)(generateNewPage("NotFound")(Alchelmy_Template_Page.RouteToNothing.value)))(function () {
                              return Control_Bind.bind(Effect_Aff.bindAff)(pageExists("Top"))(function (v4) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(!v3)(generateNewPage("Top")(Alchelmy_Template_Page.RouteToTop.value)))(function () {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(glob("./src/" + (v + "/Page/*.elm")))(function (v5) {
                                          var pages = Data_Functor.map(Data_Functor.functorArray)(function (p) {
                                              return Node_Path.basenameWithoutExt(p)(".elm");
                                          })(v5);
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(Data_Array["null"](pages))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Exception["throw"]("Pege not found."))))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Generating ./src/" + (v + ("/Alchelmy.elm for " + (Data_String_Common.joinWith(", ")(pages) + "...")))))(function () {
                                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Buffer.fromString(Alchelmy_Template_Router.renderRouter(v)(pages))(Node_Encoding.UTF8.value)))(function (v6) {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Node_FS_Aff.writeFile("./src/" + (v + "/Alchelmy.elm"))(v6))(function () {
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Generating ./src/" + (v + "/alchelmy.js...")))(function () {
                                                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ "./src/", v ])("alchelmy.js")))(function (v7) {
                                                                  return Control_Bind.bind(Effect_Aff.bindAff)(Alchelmy_Template_Style.renderStyle(v)(pages))(function (v8) {
                                                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Buffer.fromString(v8)(Node_Encoding.UTF8.value)))(function (v9) {
                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Node_FS_Aff.writeFile(v7)(v9))(function () {
                                                                              return Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Done.");
                                                                          });
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var createApplication = function (application) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ "src" ])(application)))(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.exists(v))(function (v1) {
              if (v1) {
                  return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Directory " + (application + " already exists.")));
              };
              var v2 = Data_Functor.map(Data_Either.functorEither)(Data_Function.flip(Data_String_Regex.test)(application))(Data_String_Regex.regex("[A-Z][a-zA-Z0-9_]*")(Data_String_Regex_Flags.noFlags));
              if (v2 instanceof Data_Either.Left) {
                  return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Invalid Regexp"));
              };
              if (v2 instanceof Data_Either.Right && v2.value0) {
                  return ensureDir(v);
              };
              if (v2 instanceof Data_Either.Right && !v2.value0) {
                  return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error(application + " is not a valid package name."));
              };
              throw new Error("Failed pattern match at Alchelmy line 43, column 14 - line 46, column 95: " + [ v2.constructor.name ]);
          });
      });
  };
  var main = function __do() {
      var v = Node_Process.argv();
      var v1 = Data_Array.drop(2)(v);
      if (v1.length === 2 && v1[0] === "init") {
          return Effect_Aff.launchAff_(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(createApplication(v1[1]))(function () {
              return generateRouter(v);
          }))();
      };
      if (v1.length === 2 && v1[0] === "new") {
          var $78 = validatePageName(v1[1]);
          if ($78) {
              return Effect_Aff.launchAff_(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(generateNewPage(v1[1])(Alchelmy_Template_Page.RouteToPageName.value))(function () {
                  return generateRouter(v);
              }))();
          };
          Effect_Console.error("Invalid page name: " + (v1[1] + ". An page name must be an valid Elm module name."))();
          return Node_Process.exit(1)();
      };
      if (v1.length === 1 && v1[0] === "update") {
          return Effect_Aff.launchAff_(generateRouter(v))();
      };
      if (v1.length === 0) {
          return Effect_Class_Console.log(Effect_Class.monadEffectEffect)(usage)();
      };
      if (v1.length === 1 && v1[0] === "init") {
          return Effect_Class_Console.log(Effect_Class.monadEffectEffect)(usage)();
      };
      if (v1.length === 1 && v1[0] === "new") {
          return Effect_Class_Console.log(Effect_Class.monadEffectEffect)(usage)();
      };
      if (v1.length === 1 && v1[0] === "--help") {
          return Effect_Class_Console.log(Effect_Class.monadEffectEffect)(usage)();
      };
      if (v1.length === 1 && v1[0] === "-h") {
          return Effect_Class_Console.log(Effect_Class.monadEffectEffect)(usage)();
      };
      Effect_Console.error("[ERROR] Unknown sub command: " + Data_String_Common.joinWith(" ")(v1))();
      return Node_Process.exit(1)();
  };
  exports["glob"] = glob;
  exports["createApplication"] = createApplication;
  exports["ensureDir"] = ensureDir;
  exports["generateRouter"] = generateRouter;
  exports["getApplicationName"] = getApplicationName;
  exports["main"] = main;
  exports["usage"] = usage;
  exports["validatePageName"] = validatePageName;
  exports["pageExists"] = pageExists;
  exports["generateNewPage"] = generateNewPage;
  exports["globEffect"] = $foreign.globEffect;
})(PS["Alchelmy"] = PS["Alchelmy"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];                 
  var ComonadTrans = function (lower) {
      this.lower = lower;
  };
  var lower = function (dict) {
      return dict.lower;
  };
  exports["lower"] = lower;
  exports["ComonadTrans"] = ComonadTrans;
})(PS["Control.Comonad.Trans.Class"] = PS["Control.Comonad.Trans.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Trans_Class = PS["Control.Comonad.Trans.Class"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var EnvT = function (x) {
      return x;
  };
  var withEnvT = function (f) {
      return function (v) {
          return EnvT(new Data_Tuple.Tuple(f(v.value0), v.value1));
      };
  };
  var runEnvT = function (v) {
      return v;
  };
  var newtypeEnvT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, EnvT);
  var mapEnvT = function (f) {
      return function (v) {
          return EnvT(new Data_Tuple.Tuple(v.value0, f(v.value1)));
      };
  };
  var functorEnvT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return EnvT(new Data_Tuple.Tuple(v.value0, Data_Functor.map(dictFunctor)(f)(v.value1)));
          };
      });
  };
  var foldableEnvT = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (fn) {
              return function (v) {
                  return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(fn)(v.value1);
              };
          };
      }, function (fn) {
          return function (a) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(fn)(a)(v.value1);
              };
          };
      }, function (fn) {
          return function (a) {
              return function (v) {
                  return Data_Foldable.foldr(dictFoldable)(fn)(a)(v.value1);
              };
          };
      });
  };
  var traversableEnvT = function (dictTraversable) {
      return new Data_Traversable.Traversable(function () {
          return foldableEnvT(dictTraversable.Foldable1());
      }, function () {
          return functorEnvT(dictTraversable.Functor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor.map(Data_Functor.functorFn)(EnvT)(Data_Tuple.Tuple.create(v.value0)))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
          };
      }, function (dictApplicative) {
          return function (f) {
              return function (v) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor.map(Data_Functor.functorFn)(EnvT)(Data_Tuple.Tuple.create(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
              };
          };
      });
  };
  var extendEnvT = function (dictExtend) {
      return new Control_Extend.Extend(function () {
          return functorEnvT(dictExtend.Functor0());
      }, function (f) {
          return function (v) {
              return EnvT(new Data_Tuple.Tuple(v.value0, Data_Functor.map(dictExtend.Functor0())(f)(Control_Extend.extend(dictExtend)(function ($68) {
                  return EnvT(Data_Tuple.Tuple.create(v.value0)($68));
              })(v.value1))));
          };
      });
  };
  var comonadTransEnvT = new Control_Comonad_Trans_Class.ComonadTrans(function (dictComonad) {
      return function (v) {
          return v.value1;
      };
  });
  var comonadEnvT = function (dictComonad) {
      return new Control_Comonad.Comonad(function () {
          return extendEnvT(dictComonad.Extend0());
      }, function (v) {
          return Control_Comonad.extract(dictComonad)(v.value1);
      });
  };
  exports["EnvT"] = EnvT;
  exports["runEnvT"] = runEnvT;
  exports["withEnvT"] = withEnvT;
  exports["mapEnvT"] = mapEnvT;
  exports["newtypeEnvT"] = newtypeEnvT;
  exports["functorEnvT"] = functorEnvT;
  exports["extendEnvT"] = extendEnvT;
  exports["comonadEnvT"] = comonadEnvT;
  exports["comonadTransEnvT"] = comonadTransEnvT;
  exports["foldableEnvT"] = foldableEnvT;
  exports["traversableEnvT"] = traversableEnvT;
})(PS["Control.Comonad.Env.Trans"] = PS["Control.Comonad.Env.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Env_Trans = PS["Control.Comonad.Env.Trans"];
  var Data_Tuple = PS["Data.Tuple"];                 
  var ComonadAsk = function (Comonad0, ask) {
      this.Comonad0 = Comonad0;
      this.ask = ask;
  };
  var ComonadEnv = function (ComonadAsk0, local) {
      this.ComonadAsk0 = ComonadAsk0;
      this.local = local;
  };
  var local = function (dict) {
      return dict.local;
  };
  var comonadAskTuple = new ComonadAsk(function () {
      return Data_Tuple.comonadTuple;
  }, Data_Tuple.fst);
  var comonadEnvTuple = new ComonadEnv(function () {
      return comonadAskTuple;
  }, function (f) {
      return function (v) {
          return new Data_Tuple.Tuple(f(v.value0), v.value1);
      };
  });
  var comonadAskEnvT = function (dictComonad) {
      return new ComonadAsk(function () {
          return Control_Comonad_Env_Trans.comonadEnvT(dictComonad);
      }, function (v) {
          return Data_Tuple.fst(v);
      });
  };
  var comonadEnvEnvT = function (dictComonad) {
      return new ComonadEnv(function () {
          return comonadAskEnvT(dictComonad);
      }, function (f) {
          return function (v) {
              return new Data_Tuple.Tuple(f(v.value0), v.value1);
          };
      });
  };
  var ask = function (dict) {
      return dict.ask;
  };
  var asks = function (dictComonadEnv) {
      return function (f) {
          return function (x) {
              return f(ask(dictComonadEnv.ComonadAsk0())(x));
          };
      };
  };
  exports["ask"] = ask;
  exports["local"] = local;
  exports["ComonadAsk"] = ComonadAsk;
  exports["asks"] = asks;
  exports["ComonadEnv"] = ComonadEnv;
  exports["comonadAskTuple"] = comonadAskTuple;
  exports["comonadEnvTuple"] = comonadEnvTuple;
  exports["comonadAskEnvT"] = comonadAskEnvT;
  exports["comonadEnvEnvT"] = comonadEnvEnvT;
})(PS["Control.Comonad.Env.Class"] = PS["Control.Comonad.Env.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Comonad_Env_Class = PS["Control.Comonad.Env.Class"];
  var Control_Comonad_Env_Trans = PS["Control.Comonad.Env.Trans"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var withEnv = Control_Comonad_Env_Trans.withEnvT;
  var runEnv = function (v) {
      return Data_Functor.map(Data_Tuple.functorTuple)(Data_Newtype.unwrap(Data_Identity.newtypeIdentity))(v);
  };
  var mapEnv = Data_Functor.map(Control_Comonad_Env_Trans.functorEnvT(Data_Identity.functorIdentity));
  var env = function (e) {
      return function (a) {
          return Control_Comonad_Env_Trans.EnvT(Data_Tuple.Tuple.create(e)(a));
      };
  };
  exports["runEnv"] = runEnv;
  exports["withEnv"] = withEnv;
  exports["mapEnv"] = mapEnv;
  exports["env"] = env;
})(PS["Control.Comonad.Env"] = PS["Control.Comonad.Env"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Trans_Class = PS["Control.Comonad.Trans.Class"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var StoreT = function (x) {
      return x;
  };
  var runStoreT = function (v) {
      return v;
  };
  var newtypeStoreT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, StoreT);
  var functorStoreT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return StoreT(new Data_Tuple.Tuple(Data_Functor.map(dictFunctor)(function (h) {
                  return function ($28) {
                      return f(h($28));
                  };
              })(v.value0), v.value1));
          };
      });
  };
  var extendStoreT = function (dictExtend) {
      return new Control_Extend.Extend(function () {
          return functorStoreT(dictExtend.Functor0());
      }, function (f) {
          return function (v) {
              return StoreT(new Data_Tuple.Tuple(Control_Extend.extend(dictExtend)(function (w$prime) {
                  return function (s$prime) {
                      return f(StoreT(new Data_Tuple.Tuple(w$prime, s$prime)));
                  };
              })(v.value0), v.value1));
          };
      });
  };
  var comonadTransStoreT = new Control_Comonad_Trans_Class.ComonadTrans(function (dictComonad) {
      return function (v) {
          return Data_Functor.map((dictComonad.Extend0()).Functor0())(function (v1) {
              return v1(v.value1);
          })(v.value0);
      };
  });
  var comonadStoreT = function (dictComonad) {
      return new Control_Comonad.Comonad(function () {
          return extendStoreT(dictComonad.Extend0());
      }, function (v) {
          return Control_Comonad.extract(dictComonad)(v.value0)(v.value1);
      });
  };
  exports["StoreT"] = StoreT;
  exports["runStoreT"] = runStoreT;
  exports["newtypeStoreT"] = newtypeStoreT;
  exports["functorStoreT"] = functorStoreT;
  exports["extendStoreT"] = extendStoreT;
  exports["comonadStoreT"] = comonadStoreT;
  exports["comonadTransStoreT"] = comonadTransStoreT;
})(PS["Control.Comonad.Store.Trans"] = PS["Control.Comonad.Store.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Trans_Class = PS["Control.Comonad.Trans.Class"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var TracedT = function (x) {
      return x;
  };
  var runTracedT = function (v) {
      return v;
  };
  var newtypeTracedT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, TracedT);
  var functorTracedT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(function (g) {
                  return function (t) {
                      return f(g(t));
                  };
              })(v);
          };
      });
  };
  var extendTracedT = function (dictExtend) {
      return function (dictSemigroup) {
          return new Control_Extend.Extend(function () {
              return functorTracedT(dictExtend.Functor0());
          }, function (f) {
              return function (v) {
                  return Control_Extend.extend(dictExtend)(function (w$prime) {
                      return function (t) {
                          return f(Data_Functor.map(dictExtend.Functor0())(function (h) {
                              return function (t$prime) {
                                  return h(Data_Semigroup.append(dictSemigroup)(t)(t$prime));
                              };
                          })(w$prime));
                      };
                  })(v);
              };
          });
      };
  };
  var comonadTransTracedT = function (dictMonoid) {
      return new Control_Comonad_Trans_Class.ComonadTrans(function (dictComonad) {
          return function (v) {
              return Data_Functor.map((dictComonad.Extend0()).Functor0())(function (f) {
                  return f(Data_Monoid.mempty(dictMonoid));
              })(v);
          };
      });
  };
  var comonadTracedT = function (dictComonad) {
      return function (dictMonoid) {
          return new Control_Comonad.Comonad(function () {
              return extendTracedT(dictComonad.Extend0())(dictMonoid.Semigroup0());
          }, function (v) {
              return Control_Comonad.extract(dictComonad)(v)(Data_Monoid.mempty(dictMonoid));
          });
      };
  };
  exports["TracedT"] = TracedT;
  exports["runTracedT"] = runTracedT;
  exports["newtypeTracedT"] = newtypeTracedT;
  exports["functorTracedT"] = functorTracedT;
  exports["extendTracedT"] = extendTracedT;
  exports["comonadTracedT"] = comonadTracedT;
  exports["comonadTransTracedT"] = comonadTransTracedT;
})(PS["Control.Comonad.Traced.Trans"] = PS["Control.Comonad.Traced.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Env_Trans = PS["Control.Comonad.Env.Trans"];
  var Control_Comonad_Store_Trans = PS["Control.Comonad.Store.Trans"];
  var Control_Comonad_Traced_Trans = PS["Control.Comonad.Traced.Trans"];
  var Control_Comonad_Trans_Class = PS["Control.Comonad.Trans.Class"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var ComonadStore = function (Comonad0, peek, pos) {
      this.Comonad0 = Comonad0;
      this.peek = peek;
      this.pos = pos;
  };
  var pos = function (dict) {
      return dict.pos;
  };
  var peek = function (dict) {
      return dict.peek;
  };
  var peeks = function (dictComonadStore) {
      return function (f) {
          return function (x) {
              return peek(dictComonadStore)(f(pos(dictComonadStore)(x)))(x);
          };
      };
  };
  var seeks = function (dictComonadStore) {
      return function (f) {
          return function ($18) {
              return peeks(dictComonadStore)(f)(Control_Extend.duplicate((dictComonadStore.Comonad0()).Extend0())($18));
          };
      };
  };
  var seek = function (dictComonadStore) {
      return function (s) {
          return function ($19) {
              return peek(dictComonadStore)(s)(Control_Extend.duplicate((dictComonadStore.Comonad0()).Extend0())($19));
          };
      };
  };
  var experiment = function (dictComonadStore) {
      return function (dictFunctor) {
          return function (f) {
              return function (x) {
                  return Data_Functor.map(dictFunctor)(Data_Function.flip(peek(dictComonadStore))(x))(f(pos(dictComonadStore)(x)));
              };
          };
      };
  };
  var comonadStoreTracedT = function (dictComonadStore) {
      return function (dictMonoid) {
          return new ComonadStore(function () {
              return Control_Comonad_Traced_Trans.comonadTracedT(dictComonadStore.Comonad0())(dictMonoid);
          }, function (s) {
              return function ($20) {
                  return peek(dictComonadStore)(s)(Control_Comonad_Trans_Class.lower(Control_Comonad_Traced_Trans.comonadTransTracedT(dictMonoid))(dictComonadStore.Comonad0())($20));
              };
          }, function ($21) {
              return pos(dictComonadStore)(Control_Comonad_Trans_Class.lower(Control_Comonad_Traced_Trans.comonadTransTracedT(dictMonoid))(dictComonadStore.Comonad0())($21));
          });
      };
  };
  var comonadStoreStoreT = function (dictComonad) {
      return new ComonadStore(function () {
          return Control_Comonad_Store_Trans.comonadStoreT(dictComonad);
      }, function (s) {
          return function (v) {
              return Control_Comonad.extract(dictComonad)(v.value0)(s);
          };
      }, function (v) {
          return v.value1;
      });
  };
  var comonadStoreEnvT = function (dictComonadStore) {
      return new ComonadStore(function () {
          return Control_Comonad_Env_Trans.comonadEnvT(dictComonadStore.Comonad0());
      }, function (s) {
          return function ($22) {
              return peek(dictComonadStore)(s)(Control_Comonad_Trans_Class.lower(Control_Comonad_Env_Trans.comonadTransEnvT)(dictComonadStore.Comonad0())($22));
          };
      }, function ($23) {
          return pos(dictComonadStore)(Control_Comonad_Trans_Class.lower(Control_Comonad_Env_Trans.comonadTransEnvT)(dictComonadStore.Comonad0())($23));
      });
  };
  exports["peek"] = peek;
  exports["pos"] = pos;
  exports["ComonadStore"] = ComonadStore;
  exports["experiment"] = experiment;
  exports["peeks"] = peeks;
  exports["seek"] = seek;
  exports["seeks"] = seeks;
  exports["comonadStoreStoreT"] = comonadStoreStoreT;
  exports["comonadStoreEnvT"] = comonadStoreEnvT;
  exports["comonadStoreTracedT"] = comonadStoreTracedT;
})(PS["Control.Comonad.Store.Class"] = PS["Control.Comonad.Store.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Comonad_Store_Class = PS["Control.Comonad.Store.Class"];
  var Control_Comonad_Store_Trans = PS["Control.Comonad.Store.Trans"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var store = function (f) {
      return function (x) {
          return Control_Comonad_Store_Trans.StoreT(new Data_Tuple.Tuple(f, x));
      };
  };
  var runStore = function (v) {
      return Data_Tuple.swap(Data_Functor.map(Data_Tuple.functorTuple)(Data_Newtype.unwrap(Data_Identity.newtypeIdentity))(Data_Tuple.swap(v)));
  };
  exports["runStore"] = runStore;
  exports["store"] = store;
})(PS["Control.Comonad.Store"] = PS["Control.Comonad.Store"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Traced_Trans = PS["Control.Comonad.Traced.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var ComonadTraced = function (Comonad0, track) {
      this.Comonad0 = Comonad0;
      this.track = track;
  };
  var track = function (dict) {
      return dict.track;
  };
  var tracks = function (dictComonadTraced) {
      return function (f) {
          return function (w) {
              return track(dictComonadTraced)(f(Control_Comonad.extract(dictComonadTraced.Comonad0())(w)))(w);
          };
      };
  };
  var listens = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(function (g) {
                  return function (t) {
                      return new Data_Tuple.Tuple(g(t), f(t));
                  };
              })(v);
          };
      };
  };
  var listen = function (dictFunctor) {
      return function (v) {
          return Data_Functor.map(dictFunctor)(function (f) {
              return function (t) {
                  return new Data_Tuple.Tuple(f(t), t);
              };
          })(v);
      };
  };
  var comonadTracedTracedT = function (dictComonad) {
      return function (dictMonoid) {
          return new ComonadTraced(function () {
              return Control_Comonad_Traced_Trans.comonadTracedT(dictComonad)(dictMonoid);
          }, function (t) {
              return function (v) {
                  return Control_Comonad.extract(dictComonad)(v)(t);
              };
          });
      };
  };
  var censor = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(function (v1) {
                  return function ($18) {
                      return v1(f($18));
                  };
              })(v);
          };
      };
  };
  exports["track"] = track;
  exports["ComonadTraced"] = ComonadTraced;
  exports["tracks"] = tracks;
  exports["listen"] = listen;
  exports["listens"] = listens;
  exports["censor"] = censor;
  exports["comonadTracedTracedT"] = comonadTracedTracedT;
})(PS["Control.Comonad.Traced.Class"] = PS["Control.Comonad.Traced.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Comonad_Traced_Class = PS["Control.Comonad.Traced.Class"];
  var Control_Comonad_Traced_Trans = PS["Control.Comonad.Traced.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];                 
  var traced = function ($2) {
      return Control_Comonad_Traced_Trans.TracedT(Data_Identity.Identity($2));
  };
  var runTraced = function (v) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(v);
  };
  exports["runTraced"] = runTraced;
  exports["traced"] = traced;
})(PS["Control.Comonad.Traced"] = PS["Control.Comonad.Traced"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];                 
  var withCont = function (f) {
      return Control_Monad_Cont_Trans.withContT(function ($0) {
          return function ($1) {
              return Data_Identity.Identity(f(function ($2) {
                  return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($0($2));
              })($1));
          };
      });
  };
  var runCont = function (cc) {
      return function (k) {
          return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Cont_Trans.runContT(cc)(function ($3) {
              return Data_Identity.Identity(k($3));
          }));
      };
  };
  var mapCont = function (f) {
      return Control_Monad_Cont_Trans.mapContT(function ($4) {
          return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($4)));
      });
  };
  var cont = function (f) {
      return function (c) {
          return f(function ($5) {
              return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(c($5));
          });
      };
  };
  exports["cont"] = cont;
  exports["runCont"] = runCont;
})(PS["Control.Monad.Cont"] = PS["Control.Monad.Cont"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Prelude = PS["Prelude"];                 
  var MonadGen = function (Monad0, chooseBool, chooseFloat, chooseInt, resize, sized) {
      this.Monad0 = Monad0;
      this.chooseBool = chooseBool;
      this.chooseFloat = chooseFloat;
      this.chooseInt = chooseInt;
      this.resize = resize;
      this.sized = sized;
  };
  var sized = function (dict) {
      return dict.sized;
  };
  var resize = function (dict) {
      return dict.resize;
  };
  var chooseInt = function (dict) {
      return dict.chooseInt;
  };
  var chooseFloat = function (dict) {
      return dict.chooseFloat;
  };
  var chooseBool = function (dict) {
      return dict.chooseBool;
  };
  exports["chooseBool"] = chooseBool;
  exports["chooseFloat"] = chooseFloat;
  exports["chooseInt"] = chooseInt;
  exports["resize"] = resize;
  exports["sized"] = sized;
  exports["MonadGen"] = MonadGen;
})(PS["Control.Monad.Gen.Class"] = PS["Control.Monad.Gen.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Gen_Class = PS["Control.Monad.Gen.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var FreqSemigroup = function (x) {
      return x;
  };
  var AtIndex = function (x) {
      return x;
  };
  var unfoldable = function (dictMonadRec) {
      return function (dictMonadGen) {
          return function (dictUnfoldable) {
              return function (gen) {
                  var unfold = function (v) {
                      if (v instanceof Nil) {
                          return Data_Maybe.Nothing.value;
                      };
                      if (v instanceof Cons) {
                          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Gen line 101, column 12 - line 103, column 35: " + [ v.constructor.name ]);
                  };
                  var loopGen = function (v) {
                      if (v.value1 === 0) {
                          return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(v.value0));
                      };
                      return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(gen)(function (v1) {
                          return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(new Cons(v1, v.value0), v.value1 - 1 | 0)));
                      });
                  };
                  return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Unfoldable.unfoldr(dictUnfoldable)(unfold))(Control_Monad_Gen_Class.sized(dictMonadGen)(function ($61) {
                      return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(loopGen)(Data_Tuple.Tuple.create(Nil.value)($61));
                  }));
              };
          };
      };
  };
  var semigroupFreqSemigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (pos) {
              var v2 = v(pos);
              if (v2.value0 instanceof Data_Maybe.Just) {
                  return v1(v2.value0.value0);
              };
              return v2;
          };
      };
  });
  var semigroupAtIndex = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (i) {
              var $48 = i <= 0;
              if ($48) {
                  return v(i);
              };
              return v1(i - 1 | 0);
          };
      };
  });
  var getFreqVal = function (v) {
      return function ($62) {
          return Data_Tuple.snd(v($62));
      };
  };
  var getAtIndex = function (v) {
      return v;
  };
  var freqSemigroup = function (v) {
      return function (pos) {
          var $52 = pos >= v.value0;
          if ($52) {
              return new Data_Tuple.Tuple(new Data_Maybe.Just(pos - v.value0), v.value1);
          };
          return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, v.value1);
      };
  };
  var frequency = function (dictMonadGen) {
      return function (dictFoldable1) {
          return function (xs) {
              var total = Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeAdditive)(Data_Newtype.newtypeAdditive)(Data_Monoid_Additive.Additive)(Data_Foldable.foldMap(dictFoldable1.Foldable0())(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringNumber)))(Data_Tuple.fst)(xs);
              return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(total))(getFreqVal(Data_Semigroup_Foldable.foldMap1(dictFoldable1)(semigroupFreqSemigroup)(freqSemigroup)(xs)));
          };
      };
  };
  var filtered = function (dictMonadRec) {
      return function (dictMonadGen) {
          return function (gen) {
              var go = function (v) {
                  return Data_Functor.mapFlipped((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(gen)(function (a) {
                      if (a instanceof Data_Maybe.Nothing) {
                          return new Control_Monad_Rec_Class.Loop(Data_Unit.unit);
                      };
                      if (a instanceof Data_Maybe.Just) {
                          return new Control_Monad_Rec_Class.Done(a.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Gen line 117, column 24 - line 119, column 23: " + [ a.constructor.name ]);
                  });
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_Unit.unit);
          };
      };
  };
  var suchThat = function (dictMonadRec) {
      return function (dictMonadGen) {
          return function (gen) {
              return function (pred) {
                  return filtered(dictMonadRec)(dictMonadGen)(Data_Functor.mapFlipped((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(gen)(function (a) {
                      var $57 = pred(a);
                      if ($57) {
                          return new Data_Maybe.Just(a);
                      };
                      return Data_Maybe.Nothing.value;
                  }));
              };
          };
      };
  };
  var choose = function (dictMonadGen) {
      return function (genA) {
          return function (genB) {
              return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseBool(dictMonadGen))(function (v) {
                  if (v) {
                      return genA;
                  };
                  return genB;
              });
          };
      };
  };
  var atIndex = function ($63) {
      return AtIndex(Data_Function["const"]($63));
  };
  var fromIndex = function (dictFoldable1) {
      return function (i) {
          return function (xs) {
              return getAtIndex(Data_Semigroup_Foldable.foldMap1(dictFoldable1)(semigroupAtIndex)(atIndex)(xs))(i);
          };
      };
  };
  var elements = function (dictMonadGen) {
      return function (dictFoldable1) {
          return function (xs) {
              return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(Data_Foldable.length(dictFoldable1.Foldable0())(Data_Semiring.semiringInt)(xs) - 1 | 0))(function (v) {
                  return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(fromIndex(dictFoldable1)(v)(xs));
              });
          };
      };
  };
  var oneOf = function (dictMonadGen) {
      return function (dictFoldable1) {
          return function (xs) {
              return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(Data_Foldable.length(dictFoldable1.Foldable0())(Data_Semiring.semiringInt)(xs) - 1 | 0))(function (v) {
                  return fromIndex(dictFoldable1)(v)(xs);
              });
          };
      };
  };
  exports["choose"] = choose;
  exports["oneOf"] = oneOf;
  exports["frequency"] = frequency;
  exports["elements"] = elements;
  exports["unfoldable"] = unfoldable;
  exports["suchThat"] = suchThat;
  exports["filtered"] = filtered;
})(PS["Control.Monad.Gen"] = PS["Control.Monad.Gen"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Gen = PS["Control.Monad.Gen"];
  var Control_Monad_Gen_Class = PS["Control.Monad.Gen.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];                 
  var genTuple = function (dictApply) {
      return Control_Apply.lift2(dictApply)(Data_Tuple.Tuple.create);
  };
  var genNonEmpty = function (dictMonadRec) {
      return function (dictMonadGen) {
          return function (dictUnfoldable) {
              return function (gen) {
                  return Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_NonEmpty.NonEmpty.create)(gen))(Control_Monad_Gen_Class.resize(dictMonadGen)(function (v) {
                      return v - 1 | 0;
                  })(Control_Monad_Gen.unfoldable(dictMonadRec)(dictMonadGen)(dictUnfoldable)(gen)));
              };
          };
      };
  };
  var genMaybe$prime = function (dictMonadGen) {
      return function (bias) {
          return function (gen) {
              return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(1.0))(function (v) {
                  var $13 = v < bias;
                  if ($13) {
                      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Maybe.Just.create)(gen);
                  };
                  return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(Data_Maybe.Nothing.value);
              });
          };
      };
  };
  var genMaybe = function (dictMonadGen) {
      return genMaybe$prime(dictMonadGen)(0.75);
  };
  var genIdentity = function (dictFunctor) {
      return Data_Functor.map(dictFunctor)(Data_Identity.Identity);
  };
  var genEither$prime = function (dictMonadGen) {
      return function (bias) {
          return function (genA) {
              return function (genB) {
                  return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(1.0))(function (v) {
                      var $15 = v < bias;
                      if ($15) {
                          return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Left.create)(genA);
                      };
                      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(genB);
                  });
              };
          };
      };
  };
  var genEither = function (dictMonadGen) {
      return genEither$prime(dictMonadGen)(0.5);
  };
  exports["genEither"] = genEither;
  exports["genEither'"] = genEither$prime;
  exports["genIdentity"] = genIdentity;
  exports["genMaybe"] = genMaybe;
  exports["genMaybe'"] = genMaybe$prime;
  exports["genTuple"] = genTuple;
  exports["genNonEmpty"] = genNonEmpty;
})(PS["Control.Monad.Gen.Common"] = PS["Control.Monad.Gen.Common"] || {});
(function(exports) {
    "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Lazy"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var showLazy = function (dictShow) {
      return new Data_Show.Show(function (x) {
          return "(defer \\_ -> " + (Data_Show.show(dictShow)($foreign.force(x)) + ")");
      });
  };
  var semiringLazy = function (dictSemiring) {
      return new Data_Semiring.Semiring(function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_Semiring.add(dictSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_Semiring.mul(dictSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      }, $foreign.defer(function (v) {
          return Data_Semiring.one(dictSemiring);
      }), $foreign.defer(function (v) {
          return Data_Semiring.zero(dictSemiring);
      }));
  };
  var semigroupLazy = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_Semigroup.append(dictSemigroup)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var ringLazy = function (dictRing) {
      return new Data_Ring.Ring(function () {
          return semiringLazy(dictRing.Semiring0());
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_Ring.sub(dictRing)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var monoidLazy = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupLazy(dictMonoid.Semigroup0());
      }, $foreign.defer(function (v) {
          return Data_Monoid.mempty(dictMonoid);
      }));
  };
  var lazyLazy = new Control_Lazy.Lazy(function (f) {
      return $foreign.defer(function (v) {
          return $foreign.force(f(Data_Unit.unit));
      });
  });
  var functorLazy = new Data_Functor.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  var functorWithIndexLazy = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorLazy;
  }, function (f) {
      return Data_Functor.map(functorLazy)(f(Data_Unit.unit));
  });
  var invariantLazy = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorLazy));
  var foldableLazy = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (l) {
              return f($foreign.force(l));
          };
      };
  }, function (f) {
      return function (z) {
          return function (l) {
              return f(z)($foreign.force(l));
          };
      };
  }, function (f) {
      return function (z) {
          return function (l) {
              return f($foreign.force(l))(z);
          };
      };
  });
  var foldableWithIndexLazy = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableLazy;
  }, function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldMap(foldableLazy)(dictMonoid)(f(Data_Unit.unit));
      };
  }, function (f) {
      return Data_Foldable.foldl(foldableLazy)(f(Data_Unit.unit));
  }, function (f) {
      return Data_Foldable.foldr(foldableLazy)(f(Data_Unit.unit));
  });
  var traversableLazy = new Data_Traversable.Traversable(function () {
      return foldableLazy;
  }, function () {
      return functorLazy;
  }, function (dictApplicative) {
      return function (l) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($42) {
              return $foreign.defer(Data_Function["const"]($42));
          })($foreign.force(l));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (l) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($43) {
                  return $foreign.defer(Data_Function["const"]($43));
              })(f($foreign.force(l)));
          };
      };
  });
  var traversableWithIndexLazy = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexLazy;
  }, function () {
      return functorWithIndexLazy;
  }, function () {
      return traversableLazy;
  }, function (dictApplicative) {
      return function (f) {
          return Data_Traversable.traverse(traversableLazy)(dictApplicative)(f(Data_Unit.unit));
      };
  });
  var foldable1Lazy = new Data_Semigroup_Foldable.Foldable1(function () {
      return foldableLazy;
  }, function (dictSemigroup) {
      return Data_Semigroup_Foldable.fold1Default(foldable1Lazy)(dictSemigroup);
  }, function (dictSemigroup) {
      return function (f) {
          return function (l) {
              return f($foreign.force(l));
          };
      };
  });
  var traversable1Lazy = new Data_Semigroup_Traversable.Traversable1(function () {
      return foldable1Lazy;
  }, function () {
      return traversableLazy;
  }, function (dictApply) {
      return function (l) {
          return Data_Functor.map(dictApply.Functor0())(function ($44) {
              return $foreign.defer(Data_Function["const"]($44));
          })($foreign.force(l));
      };
  }, function (dictApply) {
      return function (f) {
          return function (l) {
              return Data_Functor.map(dictApply.Functor0())(function ($45) {
                  return $foreign.defer(Data_Function["const"]($45));
              })(f($foreign.force(l)));
          };
      };
  });
  var extendLazy = new Control_Extend.Extend(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return f(x);
          });
      };
  });
  var eqLazy = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              return Data_Eq.eq(dictEq)($foreign.force(x))($foreign.force(y));
          };
      });
  };
  var ordLazy = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqLazy(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              return Data_Ord.compare(dictOrd)($foreign.force(x))($foreign.force(y));
          };
      });
  };
  var eq1Lazy = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqLazy(dictEq));
  });
  var ord1Lazy = new Data_Ord.Ord1(function () {
      return eq1Lazy;
  }, function (dictOrd) {
      return Data_Ord.compare(ordLazy(dictOrd));
  });
  var comonadLazy = new Control_Comonad.Comonad(function () {
      return extendLazy;
  }, $foreign.force);
  var commutativeRingLazy = function (dictCommutativeRing) {
      return new Data_CommutativeRing.CommutativeRing(function () {
          return ringLazy(dictCommutativeRing.Ring0());
      });
  };
  var euclideanRingLazy = function (dictEuclideanRing) {
      return new Data_EuclideanRing.EuclideanRing(function () {
          return commutativeRingLazy(dictEuclideanRing.CommutativeRing0());
      }, function ($46) {
          return Data_EuclideanRing.degree(dictEuclideanRing)($foreign.force($46));
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_EuclideanRing.div(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
              });
          };
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_EuclideanRing.mod(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var boundedLazy = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordLazy(dictBounded.Ord0());
      }, $foreign.defer(function (v) {
          return Data_Bounded.bottom(dictBounded);
      }), $foreign.defer(function (v) {
          return Data_Bounded.top(dictBounded);
      }));
  };
  var applyLazy = new Control_Apply.Apply(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return $foreign.force(f)($foreign.force(x));
          });
      };
  });
  var bindLazy = new Control_Bind.Bind(function () {
      return applyLazy;
  }, function (l) {
      return function (f) {
          return $foreign.defer(function (v) {
              return $foreign.force(f($foreign.force(l)));
          });
      };
  });
  var heytingAlgebraLazy = function (dictHeytingAlgebra) {
      return new Data_HeytingAlgebra.HeytingAlgebra(function (a) {
          return function (b) {
              return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.conj(dictHeytingAlgebra))(a))(b);
          };
      }, function (a) {
          return function (b) {
              return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.disj(dictHeytingAlgebra))(a))(b);
          };
      }, $foreign.defer(function (v) {
          return Data_HeytingAlgebra.ff(dictHeytingAlgebra);
      }), function (a) {
          return function (b) {
              return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.implies(dictHeytingAlgebra))(a))(b);
          };
      }, function (a) {
          return Data_Functor.map(functorLazy)(Data_HeytingAlgebra.not(dictHeytingAlgebra))(a);
      }, $foreign.defer(function (v) {
          return Data_HeytingAlgebra.tt(dictHeytingAlgebra);
      }));
  };
  var booleanAlgebraLazy = function (dictBooleanAlgebra) {
      return new Data_BooleanAlgebra.BooleanAlgebra(function () {
          return heytingAlgebraLazy(dictBooleanAlgebra.HeytingAlgebra0());
      });
  };
  var applicativeLazy = new Control_Applicative.Applicative(function () {
      return applyLazy;
  }, function (a) {
      return $foreign.defer(function (v) {
          return a;
      });
  });
  var monadLazy = new Control_Monad.Monad(function () {
      return applicativeLazy;
  }, function () {
      return bindLazy;
  });
  exports["semiringLazy"] = semiringLazy;
  exports["ringLazy"] = ringLazy;
  exports["commutativeRingLazy"] = commutativeRingLazy;
  exports["euclideanRingLazy"] = euclideanRingLazy;
  exports["eqLazy"] = eqLazy;
  exports["eq1Lazy"] = eq1Lazy;
  exports["ordLazy"] = ordLazy;
  exports["ord1Lazy"] = ord1Lazy;
  exports["boundedLazy"] = boundedLazy;
  exports["semigroupLazy"] = semigroupLazy;
  exports["monoidLazy"] = monoidLazy;
  exports["heytingAlgebraLazy"] = heytingAlgebraLazy;
  exports["booleanAlgebraLazy"] = booleanAlgebraLazy;
  exports["functorLazy"] = functorLazy;
  exports["functorWithIndexLazy"] = functorWithIndexLazy;
  exports["foldableLazy"] = foldableLazy;
  exports["foldableWithIndexLazy"] = foldableWithIndexLazy;
  exports["foldable1Lazy"] = foldable1Lazy;
  exports["traversableLazy"] = traversableLazy;
  exports["traversableWithIndexLazy"] = traversableWithIndexLazy;
  exports["traversable1Lazy"] = traversable1Lazy;
  exports["invariantLazy"] = invariantLazy;
  exports["applyLazy"] = applyLazy;
  exports["applicativeLazy"] = applicativeLazy;
  exports["bindLazy"] = bindLazy;
  exports["monadLazy"] = monadLazy;
  exports["extendLazy"] = extendLazy;
  exports["comonadLazy"] = comonadLazy;
  exports["showLazy"] = showLazy;
  exports["lazyLazy"] = lazyLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var Yield = (function () {
      function Yield(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Yield.create = function (value0) {
          return function (value1) {
              return new Yield(value0, value1);
          };
      };
      return Yield;
  })();
  var Skip = (function () {
      function Skip(value0) {
          this.value0 = value0;
      };
      Skip.create = function (value0) {
          return new Skip(value0);
      };
      return Skip;
  })();
  var Done = (function () {
      function Done() {

      };
      Done.value = new Done();
      return Done;
  })();
  var ListT = function (x) {
      return x;
  };
  var wrapLazy = function (dictApplicative) {
      return function (v) {
          return ListT(Control_Applicative.pure(dictApplicative)(new Skip(v)));
      };
  };
  var wrapEffect = function (dictFunctor) {
      return function (v) {
          return ListT(Data_Functor.map(dictFunctor)(function ($187) {
              return Skip.create(Data_Lazy.defer(Data_Function["const"]($187)));
          })(v));
      };
  };
  var unfold = function (dictMonad) {
      return function (f) {
          return function (z) {
              var g = function (v) {
                  if (v instanceof Data_Maybe.Just) {
                      return new Yield(v.value0.value1, Data_Lazy.defer(function (v1) {
                          return unfold(dictMonad)(f)(v.value0.value0);
                      }));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 130, column 3 - line 130, column 60: " + [ v.constructor.name ]);
              };
              return ListT(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(g)(f(z)));
          };
      };
  };
  var uncons = function (dictMonad) {
      return function (v) {
          var g = function (v1) {
              if (v1 instanceof Yield) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Just.create(new Data_Tuple.Tuple(v1.value0, Data_Lazy.force(v1.value1))));
              };
              if (v1 instanceof Skip) {
                  return uncons(dictMonad)(Data_Lazy.force(v1.value0));
              };
              if (v1 instanceof Done) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 195, column 3 - line 195, column 50: " + [ v1.constructor.name ]);
          };
          return Control_Bind.bind(dictMonad.Bind1())(v)(g);
      };
  };
  var tail = function (dictMonad) {
      return function (l) {
          return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd))(uncons(dictMonad)(l));
      };
  };
  var stepMap = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return ListT(Data_Functor.map(dictFunctor)(f)(v));
          };
      };
  };
  var takeWhile = function (dictApplicative) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var $101 = f(v.value0);
                  if ($101) {
                      return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value1));
                  };
                  return Done.value;
              };
              if (v instanceof Skip) {
                  return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 154, column 3 - line 154, column 68: " + [ v.constructor.name ]);
          };
          return stepMap((dictApplicative.Apply0()).Functor0())(g);
      };
  };
  var scanl = function (dictMonad) {
      return function (f) {
          return function (b) {
              return function (l) {
                  var g = function (v) {
                      var h = function (v1) {
                          if (v1 instanceof Yield) {
                              var b$prime$prime = f(v.value0)(v1.value0);
                              return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(b$prime$prime, Data_Lazy.force(v1.value1)), v.value0));
                          };
                          if (v1 instanceof Skip) {
                              return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0, Data_Lazy.force(v1.value0)), v.value0));
                          };
                          if (v1 instanceof Done) {
                              return Data_Maybe.Nothing.value;
                          };
                          throw new Error("Failed pattern match at Control.Monad.List.Trans line 248, column 5 - line 248, column 78: " + [ v1.constructor.name ]);
                      };
                      return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(h)(v.value1);
                  };
                  return unfold(dictMonad)(g)(new Data_Tuple.Tuple(b, l));
              };
          };
      };
  };
  var prepend$prime = function (dictApplicative) {
      return function (h) {
          return function (t) {
              return ListT(Control_Applicative.pure(dictApplicative)(new Yield(h, t)));
          };
      };
  };
  var prepend = function (dictApplicative) {
      return function (h) {
          return function (t) {
              return prepend$prime(dictApplicative)(h)(Data_Lazy.defer(Data_Function["const"](t)));
          };
      };
  };
  var nil = function (dictApplicative) {
      return ListT(Control_Applicative.pure(dictApplicative)(Done.value));
  };
  var singleton = function (dictApplicative) {
      return function (a) {
          return prepend(dictApplicative)(a)(nil(dictApplicative));
      };
  };
  var take = function (dictApplicative) {
      return function (v) {
          return function (fa) {
              if (v === 0) {
                  return nil(dictApplicative);
              };
              var f = function (v1) {
                  if (v1 instanceof Yield) {
                      return new Yield(v1.value0, Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v - 1 | 0))(v1.value1));
                  };
                  if (v1 instanceof Skip) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v))(v1.value0));
                  };
                  if (v1 instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 147, column 3 - line 147, column 47: " + [ v1.constructor.name ]);
              };
              return stepMap((dictApplicative.Apply0()).Functor0())(f)(fa);
          };
      };
  };
  var zipWith$prime = function (dictMonad) {
      return function (f) {
          var g = function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(nil(dictMonad.Applicative0()));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(nil(dictMonad.Applicative0()));
                  };
                  if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                      return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Function.flip(prepend$prime(dictMonad.Applicative0()))(Data_Lazy.defer(function (v2) {
                          return zipWith$prime(dictMonad)(f)(v.value0.value1)(v1.value0.value1);
                      })))(f(v.value0.value0)(v1.value0.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 260, column 3 - line 260, column 25: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          var loop = function (fa) {
              return function (fb) {
                  return wrapEffect(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(fa))(function (v) {
                      return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(fb))(function (v1) {
                          return g(v)(v1);
                      });
                  }));
              };
          };
          return loop;
      };
  };
  var zipWith = function (dictMonad) {
      return function (f) {
          var g = function (a) {
              return function (b) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(f(a)(b));
              };
          };
          return zipWith$prime(dictMonad)(g);
      };
  };
  var newtypeListT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ListT);
  var mapMaybe = function (dictFunctor) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  return Data_Maybe.fromMaybe(Skip.create)(Data_Functor.map(Data_Maybe.functorMaybe)(Yield.create)(f(v.value0)))(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value1));
              };
              if (v instanceof Skip) {
                  return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 183, column 3 - line 183, column 72: " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      };
  };
  var iterate = function (dictMonad) {
      return function (f) {
          return function (a) {
              var g = function (x) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Maybe.Just(new Data_Tuple.Tuple(f(x), x)));
              };
              return unfold(dictMonad)(g)(a);
          };
      };
  };
  var repeat = function (dictMonad) {
      return iterate(dictMonad)(Control_Category.identity(Control_Category.categoryFn));
  };
  var head = function (dictMonad) {
      return function (l) {
          return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst))(uncons(dictMonad)(l));
      };
  };
  var functorListT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  return new Yield(f(v.value0), Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value1));
              };
              if (v instanceof Skip) {
                  return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 280, column 5 - line 280, column 48: " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      });
  };
  var fromEffect = function (dictApplicative) {
      return function (fa) {
          return ListT(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(Yield.create)(Data_Lazy.defer(function (v) {
              return nil(dictApplicative);
          })))(fa));
      };
  };
  var monadTransListT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return fromEffect(dictMonad.Applicative0());
  });
  var foldlRec$prime = function (dictMonadRec) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(b));
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(b)(v.value0.value0))(function (b$prime) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                                  a: b$prime,
                                  b: v.value0.value1
                              }));
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans line 221, column 5 - line 221, column 45: " + [ v.constructor.name ]);
                  };
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(uncons(dictMonadRec.Monad0())(l))(g);
              };
          };
          return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(loop);
      };
  };
  var runListTRec = function (dictMonadRec) {
      return foldlRec$prime(dictMonadRec)(function (v) {
          return function (v1) {
              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(Data_Unit.unit);
          };
      })(Data_Unit.unit);
  };
  var foldlRec = function (dictMonadRec) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(b));
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                              a: f(b)(v.value0.value0),
                              b: v.value0.value1
                          }));
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans line 239, column 7 - line 239, column 47: " + [ v.constructor.name ]);
                  };
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(uncons(dictMonadRec.Monad0())(l))(g);
              };
          };
          return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(loop);
      };
  };
  var foldl$prime = function (dictMonad) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(b);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(dictMonad.Bind1())(f(b)(v.value0.value0))(Data_Function.flip(loop)(v.value0.value1));
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans line 212, column 5 - line 212, column 35: " + [ v.constructor.name ]);
                  };
                  return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(l))(g);
              };
          };
          return loop;
      };
  };
  var runListT = function (dictMonad) {
      return foldl$prime(dictMonad)(function (v) {
          return function (v1) {
              return Control_Applicative.pure(dictMonad.Applicative0())(Data_Unit.unit);
          };
      })(Data_Unit.unit);
  };
  var foldl = function (dictMonad) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(b);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return loop(f(b)(v.value0.value0))(v.value0.value1);
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans line 229, column 5 - line 229, column 35: " + [ v.constructor.name ]);
                  };
                  return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(l))(g);
              };
          };
          return loop;
      };
  };
  var filter = function (dictFunctor) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value1);
                  var $154 = f(v.value0);
                  if ($154) {
                      return new Yield(v.value0, s$prime);
                  };
                  return new Skip(s$prime);
              };
              if (v instanceof Skip) {
                  var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value0);
                  return new Skip(s$prime);
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 176, column 3 - line 176, column 80: " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      };
  };
  var dropWhile = function (dictApplicative) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var $159 = f(v.value0);
                  if ($159) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value1));
                  };
                  return new Yield(v.value0, v.value1);
              };
              if (v instanceof Skip) {
                  return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 169, column 3 - line 169, column 70: " + [ v.constructor.name ]);
          };
          return stepMap((dictApplicative.Apply0()).Functor0())(g);
      };
  };
  var drop = function (dictApplicative) {
      return function (v) {
          return function (fa) {
              if (v === 0) {
                  return fa;
              };
              var f = function (v1) {
                  if (v1 instanceof Yield) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v - 1 | 0))(v1.value1));
                  };
                  if (v1 instanceof Skip) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v))(v1.value0));
                  };
                  if (v1 instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 162, column 3 - line 162, column 44: " + [ v1.constructor.name ]);
              };
              return stepMap((dictApplicative.Apply0()).Functor0())(f)(fa);
          };
      };
  };
  var cons = function (dictApplicative) {
      return function (lh) {
          return function (t) {
              return ListT(Control_Applicative.pure(dictApplicative)(new Yield(Data_Lazy.force(lh), t)));
          };
      };
  };
  var unfoldable1ListT = function (dictMonad) {
      return new Data_Unfoldable1.Unfoldable1(function (f) {
          return function (b) {
              var go = function (v) {
                  if (v.value1 instanceof Data_Maybe.Nothing) {
                      return singleton(dictMonad.Applicative0())(v.value0);
                  };
                  if (v.value1 instanceof Data_Maybe.Just) {
                      return cons(dictMonad.Applicative0())(Control_Applicative.pure(Data_Lazy.applicativeLazy)(v.value0))(Data_Lazy.defer(function (v1) {
                          return go(f(v.value1.value0));
                      }));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 294, column 12 - line 296, column 67: " + [ v.constructor.name ]);
              };
              return go(f(b));
          };
      });
  };
  var unfoldableListT = function (dictMonad) {
      return new Data_Unfoldable.Unfoldable(function () {
          return unfoldable1ListT(dictMonad);
      }, function (f) {
          return function (b) {
              var go = function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return nil(dictMonad.Applicative0());
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return cons(dictMonad.Applicative0())(Control_Applicative.pure(Data_Lazy.applicativeLazy)(v.value0.value0))(Data_Lazy.defer(function (v1) {
                          return go(f(v.value0.value1));
                      }));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 287, column 12 - line 289, column 67: " + [ v.constructor.name ]);
              };
              return go(f(b));
          };
      });
  };
  var semigroupListT = function (dictApplicative) {
      return new Data_Semigroup.Semigroup(concat(dictApplicative));
  };
  var concat = function (dictApplicative) {
      return function (x) {
          return function (y) {
              var f = function (v) {
                  if (v instanceof Yield) {
                      return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                          return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
                      })(v.value1));
                  };
                  if (v instanceof Skip) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                          return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
                      })(v.value0));
                  };
                  if (v instanceof Done) {
                      return new Skip(Data_Lazy.defer(Data_Function["const"](y)));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 106, column 3 - line 106, column 43: " + [ v.constructor.name ]);
              };
              return stepMap((dictApplicative.Apply0()).Functor0())(f)(x);
          };
      };
  };
  var monoidListT = function (dictApplicative) {
      return new Data_Monoid.Monoid(function () {
          return semigroupListT(dictApplicative);
      }, nil(dictApplicative));
  };
  var catMaybes = function (dictFunctor) {
      return mapMaybe(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
  };
  var monadListT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeListT(dictMonad);
      }, function () {
          return bindListT(dictMonad);
      });
  };
  var bindListT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyListT(dictMonad);
      }, function (fa) {
          return function (f) {
              var g = function (v) {
                  if (v instanceof Yield) {
                      var h = function (s$prime) {
                          return Data_Semigroup.append(semigroupListT(dictMonad.Applicative0()))(f(v.value0))(Control_Bind.bind(bindListT(dictMonad))(s$prime)(f));
                      };
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(h)(v.value1));
                  };
                  if (v instanceof Skip) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                          return Control_Bind.bind(bindListT(dictMonad))(v1)(f);
                      })(v.value0));
                  };
                  if (v instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 306, column 5 - line 308, column 31: " + [ v.constructor.name ]);
              };
              return stepMap(((dictMonad.Bind1()).Apply0()).Functor0())(g)(fa);
          };
      });
  };
  var applyListT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorListT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadListT(dictMonad)));
  };
  var applicativeListT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyListT(dictMonad);
      }, singleton(dictMonad.Applicative0()));
  };
  var monadEffectListT = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadListT(dictMonadEffect.Monad0());
      }, function ($188) {
          return Control_Monad_Trans_Class.lift(monadTransListT)(dictMonadEffect.Monad0())(Effect_Class.liftEffect(dictMonadEffect)($188));
      });
  };
  var altListT = function (dictApplicative) {
      return new Control_Alt.Alt(function () {
          return functorListT((dictApplicative.Apply0()).Functor0());
      }, concat(dictApplicative));
  };
  var plusListT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altListT(dictMonad.Applicative0());
      }, nil(dictMonad.Applicative0()));
  };
  var alternativeListT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeListT(dictMonad);
      }, function () {
          return plusListT(dictMonad);
      });
  };
  var monadZeroListT = function (dictMonad) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeListT(dictMonad);
      }, function () {
          return monadListT(dictMonad);
      });
  };
  var monadPlusListT = function (dictMonad) {
      return new Control_MonadPlus.MonadPlus(function () {
          return monadZeroListT(dictMonad);
      });
  };
  exports["ListT"] = ListT;
  exports["Yield"] = Yield;
  exports["Skip"] = Skip;
  exports["Done"] = Done;
  exports["catMaybes"] = catMaybes;
  exports["cons"] = cons;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["filter"] = filter;
  exports["foldl"] = foldl;
  exports["foldlRec"] = foldlRec;
  exports["foldl'"] = foldl$prime;
  exports["foldlRec'"] = foldlRec$prime;
  exports["fromEffect"] = fromEffect;
  exports["head"] = head;
  exports["iterate"] = iterate;
  exports["mapMaybe"] = mapMaybe;
  exports["nil"] = nil;
  exports["prepend"] = prepend;
  exports["prepend'"] = prepend$prime;
  exports["repeat"] = repeat;
  exports["runListT"] = runListT;
  exports["runListTRec"] = runListTRec;
  exports["scanl"] = scanl;
  exports["singleton"] = singleton;
  exports["tail"] = tail;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["uncons"] = uncons;
  exports["unfold"] = unfold;
  exports["wrapEffect"] = wrapEffect;
  exports["wrapLazy"] = wrapLazy;
  exports["zipWith"] = zipWith;
  exports["zipWith'"] = zipWith$prime;
  exports["newtypeListT"] = newtypeListT;
  exports["semigroupListT"] = semigroupListT;
  exports["monoidListT"] = monoidListT;
  exports["functorListT"] = functorListT;
  exports["unfoldableListT"] = unfoldableListT;
  exports["unfoldable1ListT"] = unfoldable1ListT;
  exports["applyListT"] = applyListT;
  exports["applicativeListT"] = applicativeListT;
  exports["bindListT"] = bindListT;
  exports["monadListT"] = monadListT;
  exports["monadTransListT"] = monadTransListT;
  exports["altListT"] = altListT;
  exports["plusListT"] = plusListT;
  exports["alternativeListT"] = alternativeListT;
  exports["monadZeroListT"] = monadZeroListT;
  exports["monadPlusListT"] = monadPlusListT;
  exports["monadEffectListT"] = monadEffectListT;
})(PS["Control.Monad.List.Trans"] = PS["Control.Monad.List.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var RWSResult = (function () {
      function RWSResult(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RWSResult.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RWSResult(value0, value1, value2);
              };
          };
      };
      return RWSResult;
  })();
  var RWST = function (x) {
      return x;
  };
  var withRWST = function (f) {
      return function (m) {
          return function (r) {
              return function (s) {
                  return Data_Tuple.uncurry(m)(f(r)(s));
              };
          };
      };
  };
  var runRWST = function (v) {
      return v;
  };
  var newtypeRWST = new Data_Newtype.Newtype(function (n) {
      return n;
  }, RWST);
  var monadTransRWST = function (dictMonoid) {
      return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
          return function (m) {
              return function (v) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                      });
                  };
              };
          };
      });
  };
  var mapRWST = function (f) {
      return function (v) {
          return function (r) {
              return function (s) {
                  return f(v(r)(s));
              };
          };
      };
  };
  var lazyRWST = new Control_Lazy.Lazy(function (f) {
      return function (r) {
          return function (s) {
              var v = f(Data_Unit.unit);
              return v(r)(s);
          };
      };
  });
  var functorRWST = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (r) {
                  return function (s) {
                      return Data_Functor.map(dictFunctor)(function (v1) {
                          return new RWSResult(v1.value0, f(v1.value1), v1.value2);
                      })(v(r)(s));
                  };
              };
          };
      });
  };
  var execRWST = function (dictMonad) {
      return function (v) {
          return function (r) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(r)(s))(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value2));
                  });
              };
          };
      };
  };
  var evalRWST = function (dictMonad) {
      return function (v) {
          return function (r) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(r)(s))(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value1, v1.value2));
                  });
              };
          };
      };
  };
  var applyRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Control_Apply.Apply(function () {
              return functorRWST((dictBind.Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return function (r) {
                      return function (s) {
                          return Control_Bind.bind(dictBind)(v(r)(s))(function (v2) {
                              return Data_Functor.mapFlipped((dictBind.Apply0()).Functor0())(v1(r)(v2.value0))(function (v3) {
                                  return new RWSResult(v3.value0, v2.value1(v3.value1), Data_Semigroup.append(dictMonoid.Semigroup0())(v2.value2)(v3.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var bindRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Control_Bind.Bind(function () {
              return applyRWST(dictBind)(dictMonoid);
          }, function (v) {
              return function (f) {
                  return function (r) {
                      return function (s) {
                          return Control_Bind.bind(dictBind)(v(r)(s))(function (v1) {
                              var v2 = f(v1.value1);
                              return Data_Functor.mapFlipped((dictBind.Apply0()).Functor0())(v2(r)(v1.value0))(function (v3) {
                                  return new RWSResult(v3.value0, v3.value1, Data_Semigroup.append(dictMonoid.Semigroup0())(v1.value2)(v3.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var applicativeRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Applicative.Applicative(function () {
              return applyRWST(dictMonad.Bind1())(dictMonoid);
          }, function (a) {
              return function (v) {
                  return function (s) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  var monadRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad.Monad(function () {
              return applicativeRWST(dictMonad)(dictMonoid);
          }, function () {
              return bindRWST(dictMonad.Bind1())(dictMonoid);
          });
      };
  };
  var monadAskRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Reader_Class.MonadAsk(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (r) {
              return function (s) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, r, Data_Monoid.mempty(dictMonoid)));
              };
          });
      };
  };
  var monadReaderRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Reader_Class.MonadReader(function () {
              return monadAskRWST(dictMonad)(dictMonoid);
          }, function (f) {
              return function (m) {
                  return function (r) {
                      return function (s) {
                          return m(f(r))(s);
                      };
                  };
              };
          });
      };
  };
  var monadEffectRWS = function (dictMonoid) {
      return function (dictMonadEffect) {
          return new Effect_Class.MonadEffect(function () {
              return monadRWST(dictMonadEffect.Monad0())(dictMonoid);
          }, function ($155) {
              return Control_Monad_Trans_Class.lift(monadTransRWST(dictMonoid))(dictMonadEffect.Monad0())(Effect_Class.liftEffect(dictMonadEffect)($155));
          });
      };
  };
  var monadRecRWST = function (dictMonadRec) {
      return function (dictMonoid) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadRWST(dictMonadRec.Monad0())(dictMonoid);
          }, function (k) {
              return function (a) {
                  var k$prime = function (r) {
                      return function (v) {
                          var v1 = k(v.value1);
                          return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v1(r)(v.value0))(function (v2) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                                  if (v2.value1 instanceof Control_Monad_Rec_Class.Loop) {
                                      return new Control_Monad_Rec_Class.Loop(new RWSResult(v2.value0, v2.value1.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value2)(v2.value2)));
                                  };
                                  if (v2.value1 instanceof Control_Monad_Rec_Class.Done) {
                                      return new Control_Monad_Rec_Class.Done(new RWSResult(v2.value0, v2.value1.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value2)(v2.value2)));
                                  };
                                  throw new Error("Failed pattern match at Control.Monad.RWS.Trans line 127, column 16 - line 129, column 68: " + [ v2.value1.constructor.name ]);
                              })());
                          });
                      };
                  };
                  return function (r) {
                      return function (s) {
                          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                      };
                  };
              };
          });
      };
  };
  var monadStateRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_State_Class.MonadState(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (f) {
              return function (v) {
                  return function (s) {
                      var v1 = f(s);
                      return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v1.value1, v1.value0, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  var monadTellRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Writer_Class.MonadTell(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (w) {
              return function (v) {
                  return function (s) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, Data_Unit.unit, w));
                  };
              };
          });
      };
  };
  var monadWriterRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadTellRWST(dictMonad)(dictMonoid);
          }, function (m) {
              return function (r) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, new Data_Tuple.Tuple(v.value1, v.value2), v.value2));
                      });
                  };
              };
          }, function (m) {
              return function (r) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, v.value1.value0, v.value1.value1(v.value2)));
                      });
                  };
              };
          });
      };
  };
  var monadThrowRWST = function (dictMonadThrow) {
      return function (dictMonoid) {
          return new Control_Monad_Error_Class.MonadThrow(function () {
              return monadRWST(dictMonadThrow.Monad0())(dictMonoid);
          }, function (e) {
              return Control_Monad_Trans_Class.lift(monadTransRWST(dictMonoid))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
          });
      };
  };
  var monadErrorRWST = function (dictMonadError) {
      return function (dictMonoid) {
          return new Control_Monad_Error_Class.MonadError(function () {
              return monadThrowRWST(dictMonadError.MonadThrow0())(dictMonoid);
          }, function (m) {
              return function (h) {
                  return RWST(function (r) {
                      return function (s) {
                          return Control_Monad_Error_Class.catchError(dictMonadError)(m(r)(s))(function (e) {
                              var v = h(e);
                              return v(r)(s);
                          });
                      };
                  });
              };
          });
      };
  };
  var altRWST = function (dictAlt) {
      return new Control_Alt.Alt(function () {
          return functorRWST(dictAlt.Functor0());
      }, function (v) {
          return function (v1) {
              return RWST(function (r) {
                  return function (s) {
                      return Control_Alt.alt(dictAlt)(v(r)(s))(v1(r)(s));
                  };
              });
          };
      });
  };
  var plusRWST = function (dictPlus) {
      return new Control_Plus.Plus(function () {
          return altRWST(dictPlus.Alt0());
      }, function (v) {
          return function (v1) {
              return Control_Plus.empty(dictPlus);
          };
      });
  };
  var alternativeRWST = function (dictMonoid) {
      return function (dictAlternative) {
          return function (dictMonad) {
              return new Control_Alternative.Alternative(function () {
                  return applicativeRWST(dictMonad)(dictMonoid);
              }, function () {
                  return plusRWST(dictAlternative.Plus1());
              });
          };
      };
  };
  exports["RWSResult"] = RWSResult;
  exports["RWST"] = RWST;
  exports["runRWST"] = runRWST;
  exports["evalRWST"] = evalRWST;
  exports["execRWST"] = execRWST;
  exports["mapRWST"] = mapRWST;
  exports["withRWST"] = withRWST;
  exports["newtypeRWST"] = newtypeRWST;
  exports["functorRWST"] = functorRWST;
  exports["applyRWST"] = applyRWST;
  exports["altRWST"] = altRWST;
  exports["alternativeRWST"] = alternativeRWST;
  exports["bindRWST"] = bindRWST;
  exports["applicativeRWST"] = applicativeRWST;
  exports["monadRWST"] = monadRWST;
  exports["monadTransRWST"] = monadTransRWST;
  exports["lazyRWST"] = lazyRWST;
  exports["monadEffectRWS"] = monadEffectRWS;
  exports["monadAskRWST"] = monadAskRWST;
  exports["monadReaderRWST"] = monadReaderRWST;
  exports["monadStateRWST"] = monadStateRWST;
  exports["monadTellRWST"] = monadTellRWST;
  exports["monadWriterRWST"] = monadWriterRWST;
  exports["monadThrowRWST"] = monadThrowRWST;
  exports["monadErrorRWST"] = monadErrorRWST;
  exports["monadRecRWST"] = monadRecRWST;
  exports["plusRWST"] = plusRWST;
})(PS["Control.Monad.RWS.Trans"] = PS["Control.Monad.RWS.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var withRWS = Control_Monad_RWS_Trans.withRWST;
  var rws = function (f) {
      return function (r) {
          return function (s) {
              return Control_Applicative.pure(Data_Identity.applicativeIdentity)(f(r)(s));
          };
      };
  };
  var runRWS = function (m) {
      return function (r) {
          return function (s) {
              var v = m(r)(s);
              return v;
          };
      };
  };
  var mapRWS = function (f) {
      return Control_Monad_RWS_Trans.mapRWST(function ($3) {
          return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($3)));
      });
  };
  var execRWS = function (m) {
      return function (r) {
          return function (s) {
              return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_RWS_Trans.execRWST(Data_Identity.monadIdentity)(m)(r)(s));
          };
      };
  };
  var evalRWS = function (m) {
      return function (r) {
          return function (s) {
              return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_RWS_Trans.evalRWST(Data_Identity.monadIdentity)(m)(r)(s));
          };
      };
  };
  exports["rws"] = rws;
  exports["runRWS"] = runRWS;
  exports["evalRWS"] = evalRWS;
  exports["execRWS"] = execRWS;
  exports["mapRWS"] = mapRWS;
  exports["withRWS"] = withRWS;
})(PS["Control.Monad.RWS"] = PS["Control.Monad.RWS"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];                 
  var withReader = Control_Monad_Reader_Trans.withReaderT;
  var runReader = function (v) {
      return function ($2) {
          return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(v($2));
      };
  };
  var mapReader = function (f) {
      return Control_Monad_Reader_Trans.mapReaderT(function ($3) {
          return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($3)));
      });
  };
  exports["runReader"] = runReader;
  exports["mapReader"] = mapReader;
  exports["withReader"] = withReader;
})(PS["Control.Monad.Reader"] = PS["Control.Monad.Reader"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var StateT = function (x) {
      return x;
  };
  var withStateT = function (f) {
      return function (v) {
          return function ($107) {
              return v(f($107));
          };
      };
  };
  var runStateT = function (v) {
      return v;
  };
  var newtypeStateT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, StateT);
  var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (s) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v, s));
              });
          };
      };
  });
  var mapStateT = function (f) {
      return function (v) {
          return function ($108) {
              return f(v($108));
          };
      };
  };
  var lazyStateT = new Control_Lazy.Lazy(function (f) {
      return function (s) {
          var v = f(Data_Unit.unit);
          return v(s);
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var execStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v(s));
          };
      };
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadAskStateT = function (dictMonadAsk) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadStateT(dictMonadAsk.Monad0());
      }, Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
  };
  var monadReaderStateT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadAskStateT(dictMonadReader.MonadAsk0());
      }, function ($109) {
          return mapStateT(Control_Monad_Reader_Class.local(dictMonadReader)($109));
      });
  };
  var monadContStateT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadStateT(dictMonadCont.Monad0());
      }, function (f) {
          return function (s) {
              return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  var v = f(function (a) {
                      return function (s$prime) {
                          return c(new Data_Tuple.Tuple(a, s$prime));
                      };
                  });
                  return v(s);
              });
          };
      });
  };
  var monadEffectState = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadStateT(dictMonadEffect.Monad0());
      }, function ($110) {
          return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadEffect.Monad0())(Effect_Class.liftEffect(dictMonadEffect)($110));
      });
  };
  var monadRecStateT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadStateT(dictMonadRec.Monad0());
      }, function (f) {
          return function (a) {
              var f$prime = function (v) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())((function () {
                      var v1 = f(v.value0);
                      return v1;
                  })()(v.value1))(function (v1) {
                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                          if (v1.value0 instanceof Control_Monad_Rec_Class.Loop) {
                              return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                          };
                          if (v1.value0 instanceof Control_Monad_Rec_Class.Done) {
                              return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                          };
                          throw new Error("Failed pattern match at Control.Monad.State.Trans line 87, column 16 - line 89, column 40: " + [ v1.value0.constructor.name ]);
                      })());
                  });
              };
              return function (s) {
                  return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, s));
              };
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($111) {
              return Control_Applicative.pure(dictMonad.Applicative0())(f($111));
          });
      });
  };
  var monadTellStateT = function (dictMonadTell) {
      return new Control_Monad_Writer_Class.MonadTell(function () {
          return monadStateT(dictMonadTell.Monad0());
      }, function ($112) {
          return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadTell.Monad0())(Control_Monad_Writer_Class.tell(dictMonadTell)($112));
      });
  };
  var monadWriterStateT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadTellStateT(dictMonadWriter.MonadTell0());
      }, function (m) {
          return function (s) {
              return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m(s)))(function (v) {
                  return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
              });
          };
      }, function (m) {
          return function (s) {
              return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m(s))(function (v) {
                  return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
              }));
          };
      });
  };
  var monadThrowStateT = function (dictMonadThrow) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadStateT(dictMonadThrow.Monad0());
      }, function (e) {
          return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
      });
  };
  var monadErrorStateT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadThrowStateT(dictMonadError.MonadThrow0());
      }, function (v) {
          return function (h) {
              return function (s) {
                  return Control_Monad_Error_Class.catchError(dictMonadError)(v(s))(function (e) {
                      var v1 = h(e);
                      return v1(s);
                  });
              };
          };
      });
  };
  var altStateT = function (dictMonad) {
      return function (dictAlt) {
          return new Control_Alt.Alt(function () {
              return functorStateT(dictAlt.Functor0());
          }, function (v) {
              return function (v1) {
                  return function (s) {
                      return Control_Alt.alt(dictAlt)(v(s))(v1(s));
                  };
              };
          });
      };
  };
  var plusStateT = function (dictMonad) {
      return function (dictPlus) {
          return new Control_Plus.Plus(function () {
              return altStateT(dictMonad)(dictPlus.Alt0());
          }, function (v) {
              return Control_Plus.empty(dictPlus);
          });
      };
  };
  var alternativeStateT = function (dictMonad) {
      return function (dictAlternative) {
          return new Control_Alternative.Alternative(function () {
              return applicativeStateT(dictMonad);
          }, function () {
              return plusStateT(dictMonad)(dictAlternative.Plus1());
          });
      };
  };
  var monadZeroStateT = function (dictMonadZero) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeStateT(dictMonadZero.Monad0())(dictMonadZero.Alternative1());
      }, function () {
          return monadStateT(dictMonadZero.Monad0());
      });
  };
  var monadPlusStateT = function (dictMonadPlus) {
      return new Control_MonadPlus.MonadPlus(function () {
          return monadZeroStateT(dictMonadPlus.MonadZero0());
      });
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["evalStateT"] = evalStateT;
  exports["execStateT"] = execStateT;
  exports["mapStateT"] = mapStateT;
  exports["withStateT"] = withStateT;
  exports["newtypeStateT"] = newtypeStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["altStateT"] = altStateT;
  exports["plusStateT"] = plusStateT;
  exports["alternativeStateT"] = alternativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadRecStateT"] = monadRecStateT;
  exports["monadZeroStateT"] = monadZeroStateT;
  exports["monadPlusStateT"] = monadPlusStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["lazyStateT"] = lazyStateT;
  exports["monadEffectState"] = monadEffectState;
  exports["monadContStateT"] = monadContStateT;
  exports["monadThrowStateT"] = monadThrowStateT;
  exports["monadErrorStateT"] = monadErrorStateT;
  exports["monadAskStateT"] = monadAskStateT;
  exports["monadReaderStateT"] = monadReaderStateT;
  exports["monadStateStateT"] = monadStateStateT;
  exports["monadTellStateT"] = monadTellStateT;
  exports["monadWriterStateT"] = monadWriterStateT;
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var withState = Control_Monad_State_Trans.withStateT;
  var runState = function (v) {
      return function ($16) {
          return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(v($16));
      };
  };
  var mapState = function (f) {
      return Control_Monad_State_Trans.mapStateT(function ($17) {
          return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($17)));
      });
  };
  var execState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value1;
      };
  };
  var evalState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value0;
      };
  };
  exports["runState"] = runState;
  exports["evalState"] = evalState;
  exports["execState"] = execState;
  exports["mapState"] = mapState;
  exports["withState"] = withState;
})(PS["Control.Monad.State"] = PS["Control.Monad.State"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var writer = function ($0) {
      return Control_Monad_Writer_Trans.WriterT(Control_Applicative.pure(Data_Identity.applicativeIdentity)($0));
  };
  var runWriter = function ($1) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Writer_Trans.runWriterT($1));
  };
  var mapWriter = function (f) {
      return Control_Monad_Writer_Trans.mapWriterT(function ($2) {
          return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($2)));
      });
  };
  var execWriter = function (m) {
      return Data_Tuple.snd(runWriter(m));
  };
  exports["writer"] = writer;
  exports["runWriter"] = runWriter;
  exports["execWriter"] = execWriter;
  exports["mapWriter"] = mapWriter;
})(PS["Control.Monad.Writer"] = PS["Control.Monad.Writer"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Ring = PS["Data.Ring"];
  var Prelude = PS["Prelude"];                 
  var tail = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(1)(Data_Array.length(xs))(xs);
      };
  };
  var last = function (dictPartial) {
      return function (xs) {
          return xs[Data_Array.length(xs) - 1 | 0];
      };
  };
  var init = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(0)(Data_Array.length(xs) - 1 | 0)(xs);
      };
  };
  var head = function (dictPartial) {
      return function (xs) {
          return xs[0];
      };
  };
  exports["head"] = head;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["init"] = init;
})(PS["Data.Array.Partial"] = PS["Data.Array.Partial"] || {});
(function(exports) {
    "use strict";

  exports.peekImpl = function (i) {
    return function (xs) {
      return function () {
        return xs[i];
      };
    };
  };

  exports.pokeImpl = function (i) {
    return function (a) {
      return function (xs) {
        return function () {
          xs[i] = a;
          return {};
        };
      };
    };
  };
})(PS["Data.Array.ST.Partial"] = PS["Data.Array.ST.Partial"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Array.ST.Partial"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Unit = PS["Data.Unit"];                 
  var poke = function (dictPartial) {
      return $foreign.pokeImpl;
  };
  var peek = function (dictPartial) {
      return $foreign.peekImpl;
  };
  exports["peek"] = peek;
  exports["poke"] = poke;
})(PS["Data.Array.ST.Partial"] = PS["Data.Array.ST.Partial"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Join = function (x) {
      return x;
  };
  var showJoin = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Join " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var ordJoin = function (dictOrd) {
      return dictOrd;
  };
  var newtypeJoin = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Join);
  var eqJoin = function (dictEq) {
      return dictEq;
  };
  var bifunctorJoin = function (dictBifunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Bifunctor.bimap(dictBifunctor)(f)(f)(v);
          };
      });
  };
  var biapplyJoin = function (dictBiapply) {
      return new Control_Apply.Apply(function () {
          return bifunctorJoin(dictBiapply.Bifunctor0());
      }, function (v) {
          return function (v1) {
              return Control_Biapply.biapply(dictBiapply)(v)(v1);
          };
      });
  };
  var biapplicativeJoin = function (dictBiapplicative) {
      return new Control_Applicative.Applicative(function () {
          return biapplyJoin(dictBiapplicative.Biapply0());
      }, function (a) {
          return Control_Biapplicative.bipure(dictBiapplicative)(a)(a);
      });
  };
  exports["Join"] = Join;
  exports["newtypeJoin"] = newtypeJoin;
  exports["eqJoin"] = eqJoin;
  exports["ordJoin"] = ordJoin;
  exports["showJoin"] = showJoin;
  exports["bifunctorJoin"] = bifunctorJoin;
  exports["biapplyJoin"] = biapplyJoin;
  exports["biapplicativeJoin"] = biapplicativeJoin;
})(PS["Data.Bifunctor.Join"] = PS["Data.Bifunctor.Join"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Enum = PS["Data.Enum"];
  var Data_Maybe = PS["Data.Maybe"];                 
  var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
  exports["toCharCode"] = toCharCode;
  exports["fromCharCode"] = fromCharCode;
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_Gen = PS["Control.Monad.Gen"];
  var Control_Monad_Gen_Class = PS["Control.Monad.Gen.Class"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Prelude = PS["Prelude"];                 
  var genUnicodeChar = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(65536));
  };
  var genDigitChar = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(48)(57));
  };
  var genAsciiChar$prime = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(127));
  };
  var genAsciiChar = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(32)(127));
  };
  var genAlphaUppercase = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(65)(90));
  };
  var genAlphaLowercase = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(97)(122));
  };
  var genAlpha = function (dictMonadGen) {
      return Control_Monad_Gen.oneOf(dictMonadGen)(Data_NonEmpty.foldable1NonEmpty(Data_Foldable.foldableArray))(new Data_NonEmpty.NonEmpty(genAlphaLowercase(dictMonadGen), [ genAlphaUppercase(dictMonadGen) ]));
  };
  exports["genUnicodeChar"] = genUnicodeChar;
  exports["genAsciiChar"] = genAsciiChar;
  exports["genAsciiChar'"] = genAsciiChar$prime;
  exports["genDigitChar"] = genDigitChar;
  exports["genAlpha"] = genAlpha;
  exports["genAlphaLowercase"] = genAlphaLowercase;
  exports["genAlphaUppercase"] = genAlphaUppercase;
})(PS["Data.Char.Gen"] = PS["Data.Char.Gen"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Void = PS["Data.Void"];
  var Prelude = PS["Prelude"];                 
  var Contravariant = function (cmap) {
      this.cmap = cmap;
  };
  var cmap = function (dict) {
      return dict.cmap;
  };
  var cmapFlipped = function (dictContravariant) {
      return function (x) {
          return function (f) {
              return cmap(dictContravariant)(f)(x);
          };
      };
  };
  var coerce = function (dictContravariant) {
      return function (dictFunctor) {
          return function (a) {
              return Data_Functor.map(dictFunctor)(Data_Void.absurd)(cmap(dictContravariant)(Data_Void.absurd)(a));
          };
      };
  };
  var imapC = function (dictContravariant) {
      return function (v) {
          return function (f) {
              return cmap(dictContravariant)(f);
          };
      };
  };
  exports["cmap"] = cmap;
  exports["Contravariant"] = Contravariant;
  exports["cmapFlipped"] = cmapFlipped;
  exports["coerce"] = coerce;
  exports["imapC"] = imapC;
})(PS["Data.Functor.Contravariant"] = PS["Data.Functor.Contravariant"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var Comparison = function (x) {
      return x;
  };
  var semigroupComparison = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return Data_Semigroup.append(Data_Semigroup.semigroupFn(Data_Semigroup.semigroupFn(Data_Ordering.semigroupOrdering)))(v)(v1);
      };
  });
  var newtypeComparison = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Comparison);
  var monoidComparison = new Data_Monoid.Monoid(function () {
      return semigroupComparison;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var defaultComparison = function (dictOrd) {
      return Data_Ord.compare(dictOrd);
  };
  var contravariantComparison = new Data_Functor_Contravariant.Contravariant(function (f) {
      return function (v) {
          return Data_Function.on(v)(f);
      };
  });
  exports["Comparison"] = Comparison;
  exports["defaultComparison"] = defaultComparison;
  exports["newtypeComparison"] = newtypeComparison;
  exports["contravariantComparison"] = contravariantComparison;
  exports["semigroupComparison"] = semigroupComparison;
  exports["monoidComparison"] = monoidComparison;
})(PS["Data.Comparison"] = PS["Data.Comparison"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];                 
  var Const = function (x) {
      return x;
  };
  var showConst = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Const " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringConst = function (dictSemiring) {
      return dictSemiring;
  };
  var semigroupoidConst = new Control_Semigroupoid.Semigroupoid(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var semigroupConst = function (dictSemigroup) {
      return dictSemigroup;
  };
  var ringConst = function (dictRing) {
      return dictRing;
  };
  var ordConst = function (dictOrd) {
      return dictOrd;
  };
  var newtypeConst = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Const);
  var monoidConst = function (dictMonoid) {
      return dictMonoid;
  };
  var heytingAlgebraConst = function (dictHeytingAlgebra) {
      return dictHeytingAlgebra;
  };
  var functorConst = new Data_Functor.Functor(function (f) {
      return function (m) {
          return m;
      };
  });
  var invariantConst = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorConst));
  var foldableConst = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (v) {
          return function (v1) {
              return Data_Monoid.mempty(dictMonoid);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              return z;
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              return z;
          };
      };
  });
  var traversableConst = new Data_Traversable.Traversable(function () {
      return foldableConst;
  }, function () {
      return functorConst;
  }, function (dictApplicative) {
      return function (v) {
          return Control_Applicative.pure(dictApplicative)(v);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              return Control_Applicative.pure(dictApplicative)(v1);
          };
      };
  });
  var euclideanRingConst = function (dictEuclideanRing) {
      return dictEuclideanRing;
  };
  var eqConst = function (dictEq) {
      return dictEq;
  };
  var eq1Const = function (dictEq) {
      return new Data_Eq.Eq1(function (dictEq1) {
          return Data_Eq.eq(eqConst(dictEq));
      });
  };
  var ord1Const = function (dictOrd) {
      return new Data_Ord.Ord1(function () {
          return eq1Const(dictOrd.Eq0());
      }, function (dictOrd1) {
          return Data_Ord.compare(ordConst(dictOrd));
      });
  };
  var contravariantConst = new Data_Functor_Contravariant.Contravariant(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var commutativeRingConst = function (dictCommutativeRing) {
      return dictCommutativeRing;
  };
  var boundedConst = function (dictBounded) {
      return dictBounded;
  };
  var booleanAlgebraConst = function (dictBooleanAlgebra) {
      return dictBooleanAlgebra;
  };
  var applyConst = function (dictSemigroup) {
      return new Control_Apply.Apply(function () {
          return functorConst;
      }, function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v)(v1);
          };
      });
  };
  var applicativeConst = function (dictMonoid) {
      return new Control_Applicative.Applicative(function () {
          return applyConst(dictMonoid.Semigroup0());
      }, function (v) {
          return Data_Monoid.mempty(dictMonoid);
      });
  };
  exports["Const"] = Const;
  exports["newtypeConst"] = newtypeConst;
  exports["eqConst"] = eqConst;
  exports["eq1Const"] = eq1Const;
  exports["ordConst"] = ordConst;
  exports["ord1Const"] = ord1Const;
  exports["boundedConst"] = boundedConst;
  exports["showConst"] = showConst;
  exports["semigroupoidConst"] = semigroupoidConst;
  exports["semigroupConst"] = semigroupConst;
  exports["monoidConst"] = monoidConst;
  exports["semiringConst"] = semiringConst;
  exports["ringConst"] = ringConst;
  exports["euclideanRingConst"] = euclideanRingConst;
  exports["commutativeRingConst"] = commutativeRingConst;
  exports["heytingAlgebraConst"] = heytingAlgebraConst;
  exports["booleanAlgebraConst"] = booleanAlgebraConst;
  exports["functorConst"] = functorConst;
  exports["invariantConst"] = invariantConst;
  exports["contravariantConst"] = contravariantConst;
  exports["applyConst"] = applyConst;
  exports["applicativeConst"] = applicativeConst;
  exports["foldableConst"] = foldableConst;
  exports["traversableConst"] = traversableConst;
})(PS["Data.Const"] = PS["Data.Const"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Gen = PS["Control.Monad.Gen"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var genBoundedEnum = function (dictMonadGen) {
      return function (dictBoundedEnum) {
          var v = Data_Enum.succ(dictBoundedEnum.Enum1())(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
          if (v instanceof Data_Maybe.Just) {
              var possibilities = Data_Enum.enumFromTo(dictBoundedEnum.Enum1())(Data_Unfoldable1.unfoldable1Array)(v.value0)(Data_Bounded.top(dictBoundedEnum.Bounded0()));
              return Control_Monad_Gen.elements(dictMonadGen)(Data_NonEmpty.foldable1NonEmpty(Data_Foldable.foldableArray))(new Data_NonEmpty.NonEmpty(Data_Bounded.bottom(dictBoundedEnum.Bounded0()), possibilities));
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
          };
          throw new Error("Failed pattern match at Data.Enum.Gen line 13, column 3 - line 18, column 12: " + [ v.constructor.name ]);
      };
  };
  exports["genBoundedEnum"] = genBoundedEnum;
})(PS["Data.Enum.Gen"] = PS["Data.Enum.Gen"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_Gen = PS["Control.Monad.Gen"];
  var Control_Monad_Gen_Class = PS["Control.Monad.Gen.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Enum_Gen = PS["Data.Enum.Gen"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var genYear = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(function ($5) {
          return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumYear)($5));
      })(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(1900)(2100));
  };
  var genWeekday = function (dictMonadGen) {
      return Data_Enum_Gen.genBoundedEnum(dictMonadGen)(Data_Date_Component.boundedEnumWeekday);
  };
  var genMonth = function (dictMonadGen) {
      return Data_Enum_Gen.genBoundedEnum(dictMonadGen)(Data_Date_Component.boundedEnumMonth);
  };
  var genDay = function (dictMonadGen) {
      return Data_Enum_Gen.genBoundedEnum(dictMonadGen)(Data_Date_Component.boundedEnumDay);
  };
  exports["genYear"] = genYear;
  exports["genMonth"] = genMonth;
  exports["genDay"] = genDay;
  exports["genWeekday"] = genWeekday;
})(PS["Data.Date.Component.Gen"] = PS["Data.Date.Component.Gen"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Gen = PS["Control.Monad.Gen"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Component_Gen = PS["Data.Date.Component.Gen"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];                 
  var genDate = function (dictMonadGen) {
      return Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Date.canonicalDate)(Data_Date_Component_Gen.genYear(dictMonadGen)))(Data_Date_Component_Gen.genMonth(dictMonadGen)))(Data_Date_Component_Gen.genDay(dictMonadGen));
  };
  exports["genDate"] = genDate;
})(PS["Data.Date.Gen"] = PS["Data.Date.Gen"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_Gen = PS["Control.Monad.Gen"];
  var Data_Enum_Gen = PS["Data.Enum.Gen"];
  var Data_Time_Component = PS["Data.Time.Component"];                 
  var genSecond = function (dictMonadGen) {
      return Data_Enum_Gen.genBoundedEnum(dictMonadGen)(Data_Time_Component.boundedEnumSecond);
  };
  var genMinute = function (dictMonadGen) {
      return Data_Enum_Gen.genBoundedEnum(dictMonadGen)(Data_Time_Component.boundedEnumMinute);
  };
  var genMillisecond = function (dictMonadGen) {
      return Data_Enum_Gen.genBoundedEnum(dictMonadGen)(Data_Time_Component.boundedEnumMillisecond);
  };
  var genHour = function (dictMonadGen) {
      return Data_Enum_Gen.genBoundedEnum(dictMonadGen)(Data_Time_Component.boundedEnumHour);
  };
  exports["genHour"] = genHour;
  exports["genMinute"] = genMinute;
  exports["genSecond"] = genSecond;
  exports["genMillisecond"] = genMillisecond;
})(PS["Data.Time.Component.Gen"] = PS["Data.Time.Component.Gen"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Gen = PS["Control.Monad.Gen"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Time = PS["Data.Time"];
  var Data_Time_Component_Gen = PS["Data.Time.Component.Gen"];
  var Prelude = PS["Prelude"];                 
  var genTime = function (dictMonadGen) {
      return Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Time.Time.create)(Data_Time_Component_Gen.genHour(dictMonadGen)))(Data_Time_Component_Gen.genMinute(dictMonadGen)))(Data_Time_Component_Gen.genSecond(dictMonadGen)))(Data_Time_Component_Gen.genMillisecond(dictMonadGen));
  };
  exports["genTime"] = genTime;
})(PS["Data.Time.Gen"] = PS["Data.Time.Gen"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Gen = PS["Control.Monad.Gen"];
  var Data_Date_Gen = PS["Data.Date.Gen"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Time_Gen = PS["Data.Time.Gen"];
  var Prelude = PS["Prelude"];                 
  var genDateTime = function (dictMonadGen) {
      return Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_DateTime.DateTime.create)(Data_Date_Gen.genDate(dictMonadGen)))(Data_Time_Gen.genTime(dictMonadGen));
  };
  exports["genDateTime"] = genDateTime;
})(PS["Data.DateTime.Gen"] = PS["Data.DateTime.Gen"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Comparison = PS["Data.Comparison"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var Equivalence = function (x) {
      return x;
  };
  var semigroupEquivalence = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (a) {
              return function (b) {
                  return v(a)(b) && v1(a)(b);
              };
          };
      };
  });
  var newtypeEquivalence = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Equivalence);
  var monoidEquivalence = new Data_Monoid.Monoid(function () {
      return semigroupEquivalence;
  }, function (v) {
      return function (v1) {
          return true;
      };
  });
  var defaultEquivalence = function (dictEq) {
      return Data_Eq.eq(dictEq);
  };
  var contravariantEquivalence = new Data_Functor_Contravariant.Contravariant(function (f) {
      return function (v) {
          return Data_Function.on(v)(f);
      };
  });
  var comparisonEquivalence = function (v) {
      return function (a) {
          return function (b) {
              return Data_Eq.eq(Data_Ordering.eqOrdering)(v(a)(b))(Data_Ordering.EQ.value);
          };
      };
  };
  exports["Equivalence"] = Equivalence;
  exports["defaultEquivalence"] = defaultEquivalence;
  exports["comparisonEquivalence"] = comparisonEquivalence;
  exports["newtypeEquivalence"] = newtypeEquivalence;
  exports["contravariantEquivalence"] = contravariantEquivalence;
  exports["semigroupEquivalence"] = semigroupEquivalence;
  exports["monoidEquivalence"] = monoidEquivalence;
})(PS["Data.Equivalence"] = PS["Data.Equivalence"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var Op = function (x) {
      return x;
  };
  var semigroupoidOp = new Control_Semigroupoid.Semigroupoid(function (v) {
      return function (v1) {
          return function ($12) {
              return v1(v($12));
          };
      };
  });
  var semigroupOp = function (dictSemigroup) {
      return Data_Semigroup.semigroupFn(dictSemigroup);
  };
  var newtypeOp = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Op);
  var monoidOp = function (dictMonoid) {
      return Data_Monoid.monoidFn(dictMonoid);
  };
  var contravariantOp = new Data_Functor_Contravariant.Contravariant(function (f) {
      return function (v) {
          return function ($13) {
              return v(f($13));
          };
      };
  });
  var categoryOp = new Control_Category.Category(function () {
      return semigroupoidOp;
  }, Control_Category.identity(Control_Category.categoryFn));
  exports["Op"] = Op;
  exports["newtypeOp"] = newtypeOp;
  exports["semigroupOp"] = semigroupOp;
  exports["monoidOp"] = monoidOp;
  exports["semigroupoidOp"] = semigroupoidOp;
  exports["categoryOp"] = categoryOp;
  exports["contravariantOp"] = contravariantOp;
})(PS["Data.Op"] = PS["Data.Op"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];                 
  var Predicate = function (x) {
      return x;
  };
  var newtypePredicate = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Predicate);
  var heytingAlgebraPredicate = Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean);
  var contravariantPredicate = new Data_Functor_Contravariant.Contravariant(function (f) {
      return function (v) {
          return function ($6) {
              return v(f($6));
          };
      };
  });
  var booleanAlgebraPredicate = Data_BooleanAlgebra.booleanAlgebraFn(Data_BooleanAlgebra.booleanAlgebraBoolean);
  exports["Predicate"] = Predicate;
  exports["newtypePredicate"] = newtypePredicate;
  exports["heytingAlgebraPredicate"] = heytingAlgebraPredicate;
  exports["booleanAlgebraPredicate"] = booleanAlgebraPredicate;
  exports["contravariantPredicate"] = contravariantPredicate;
})(PS["Data.Predicate"] = PS["Data.Predicate"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Comparison = PS["Data.Comparison"];
  var Data_Equivalence = PS["Data.Equivalence"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Op = PS["Data.Op"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Predicate = PS["Data.Predicate"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var Divide = function (Contravariant0, divide) {
      this.Contravariant0 = Contravariant0;
      this.divide = divide;
  };
  var dividePredicate = new Divide(function () {
      return Data_Predicate.contravariantPredicate;
  }, function (f) {
      return function (v) {
          return function (v1) {
              return function (a) {
                  var v2 = f(a);
                  return v(v2.value0) && v1(v2.value1);
              };
          };
      };
  });
  var divideOp = function (dictSemigroup) {
      return new Divide(function () {
          return Data_Op.contravariantOp;
      }, function (f) {
          return function (v) {
              return function (v1) {
                  return function (a) {
                      var v2 = f(a);
                      return Data_Semigroup.append(dictSemigroup)(v(v2.value0))(v1(v2.value1));
                  };
              };
          };
      });
  };
  var divideEquivalence = new Divide(function () {
      return Data_Equivalence.contravariantEquivalence;
  }, function (f) {
      return function (v) {
          return function (v1) {
              return function (a) {
                  return function (b) {
                      var v2 = f(a);
                      var v3 = f(b);
                      return v(v2.value0)(v3.value0) && v1(v2.value1)(v3.value1);
                  };
              };
          };
      };
  });
  var divideComparison = new Divide(function () {
      return Data_Comparison.contravariantComparison;
  }, function (f) {
      return function (v) {
          return function (v1) {
              return function (a) {
                  return function (b) {
                      var v2 = f(a);
                      var v3 = f(b);
                      return Data_Semigroup.append(Data_Ordering.semigroupOrdering)(v(v2.value0)(v3.value0))(v1(v2.value1)(v3.value1));
                  };
              };
          };
      };
  });
  var divide = function (dict) {
      return dict.divide;
  };
  var divided = function (dictDivide) {
      return divide(dictDivide)(Control_Category.identity(Control_Category.categoryFn));
  };
  exports["divide"] = divide;
  exports["Divide"] = Divide;
  exports["divided"] = divided;
  exports["divideComparison"] = divideComparison;
  exports["divideEquivalence"] = divideEquivalence;
  exports["dividePredicate"] = dividePredicate;
  exports["divideOp"] = divideOp;
})(PS["Data.Divide"] = PS["Data.Divide"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Comparison = PS["Data.Comparison"];
  var Data_Divide = PS["Data.Divide"];
  var Data_Either = PS["Data.Either"];
  var Data_Equivalence = PS["Data.Equivalence"];
  var Data_Op = PS["Data.Op"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Predicate = PS["Data.Predicate"];
  var Prelude = PS["Prelude"];                 
  var Decide = function (Divide0, choose) {
      this.Divide0 = Divide0;
      this.choose = choose;
  };
  var choosePredicate = new Decide(function () {
      return Data_Divide.dividePredicate;
  }, function (f) {
      return function (v) {
          return function (v1) {
              return function ($52) {
                  return Data_Either.either(v)(v1)(f($52));
              };
          };
      };
  });
  var chooseOp = function (dictSemigroup) {
      return new Decide(function () {
          return Data_Divide.divideOp(dictSemigroup);
      }, function (f) {
          return function (v) {
              return function (v1) {
                  return function ($53) {
                      return Data_Either.either(v)(v1)(f($53));
                  };
              };
          };
      });
  };
  var chooseEquivalence = new Decide(function () {
      return Data_Divide.divideEquivalence;
  }, function (f) {
      return function (v) {
          return function (v1) {
              return function (a) {
                  return function (b) {
                      var v2 = f(a);
                      if (v2 instanceof Data_Either.Left) {
                          var v3 = f(b);
                          if (v3 instanceof Data_Either.Left) {
                              return v(v2.value0)(v3.value0);
                          };
                          if (v3 instanceof Data_Either.Right) {
                              return false;
                          };
                          throw new Error("Failed pattern match at Data.Decide line 27, column 15 - line 29, column 23: " + [ v3.constructor.name ]);
                      };
                      if (v2 instanceof Data_Either.Right) {
                          var v3 = f(b);
                          if (v3 instanceof Data_Either.Left) {
                              return false;
                          };
                          if (v3 instanceof Data_Either.Right) {
                              return v1(v2.value0)(v3.value0);
                          };
                          throw new Error("Failed pattern match at Data.Decide line 30, column 16 - line 32, column 23: " + [ v3.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Decide line 26, column 66 - line 32, column 23: " + [ v2.constructor.name ]);
                  };
              };
          };
      };
  });
  var chooseComparison = new Decide(function () {
      return Data_Divide.divideComparison;
  }, function (f) {
      return function (v) {
          return function (v1) {
              return function (a) {
                  return function (b) {
                      var v2 = f(a);
                      if (v2 instanceof Data_Either.Left) {
                          var v3 = f(b);
                          if (v3 instanceof Data_Either.Left) {
                              return v(v2.value0)(v3.value0);
                          };
                          if (v3 instanceof Data_Either.Right) {
                              return Data_Ordering.LT.value;
                          };
                          throw new Error("Failed pattern match at Data.Decide line 18, column 15 - line 20, column 20: " + [ v3.constructor.name ]);
                      };
                      if (v2 instanceof Data_Either.Right) {
                          var v3 = f(b);
                          if (v3 instanceof Data_Either.Left) {
                              return Data_Ordering.GT.value;
                          };
                          if (v3 instanceof Data_Either.Right) {
                              return v1(v2.value0)(v3.value0);
                          };
                          throw new Error("Failed pattern match at Data.Decide line 21, column 16 - line 23, column 23: " + [ v3.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Decide line 17, column 63 - line 23, column 23: " + [ v2.constructor.name ]);
                  };
              };
          };
      };
  });
  var choose = function (dict) {
      return dict.choose;
  };
  var chosen = function (dictDecide) {
      return choose(dictDecide)(Control_Category.identity(Control_Category.categoryFn));
  };
  exports["choose"] = choose;
  exports["Decide"] = Decide;
  exports["chosen"] = chosen;
  exports["chooseComparison"] = chooseComparison;
  exports["chooseEquivalence"] = chooseEquivalence;
  exports["choosePredicate"] = choosePredicate;
  exports["chooseOp"] = chooseOp;
})(PS["Data.Decide"] = PS["Data.Decide"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Comparison = PS["Data.Comparison"];
  var Data_Divide = PS["Data.Divide"];
  var Data_Equivalence = PS["Data.Equivalence"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Op = PS["Data.Op"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Predicate = PS["Data.Predicate"];
  var Prelude = PS["Prelude"];                 
  var Divisible = function (Divide0, conquer) {
      this.Divide0 = Divide0;
      this.conquer = conquer;
  };
  var divisiblePredicate = new Divisible(function () {
      return Data_Divide.dividePredicate;
  }, Data_Function["const"](true));
  var divisibleOp = function (dictMonoid) {
      return new Divisible(function () {
          return Data_Divide.divideOp(dictMonoid.Semigroup0());
      }, Data_Op.Op(Data_Function["const"](Data_Monoid.mempty(dictMonoid))));
  };
  var divisibleEquivalence = new Divisible(function () {
      return Data_Divide.divideEquivalence;
  }, Data_Equivalence.Equivalence(function (v) {
      return function (v1) {
          return true;
      };
  }));
  var divisibleComparison = new Divisible(function () {
      return Data_Divide.divideComparison;
  }, Data_Comparison.Comparison(function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  }));
  var conquer = function (dict) {
      return dict.conquer;
  };
  exports["conquer"] = conquer;
  exports["Divisible"] = Divisible;
  exports["divisibleComparison"] = divisibleComparison;
  exports["divisibleEquivalence"] = divisibleEquivalence;
  exports["divisiblePredicate"] = divisiblePredicate;
  exports["divisibleOp"] = divisibleOp;
})(PS["Data.Divisible"] = PS["Data.Divisible"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Comparison = PS["Data.Comparison"];
  var Data_Decide = PS["Data.Decide"];
  var Data_Divisible = PS["Data.Divisible"];
  var Data_Equivalence = PS["Data.Equivalence"];
  var Data_Op = PS["Data.Op"];
  var Data_Predicate = PS["Data.Predicate"];
  var Data_Void = PS["Data.Void"];
  var Prelude = PS["Prelude"];                 
  var Decidable = function (Decide0, Divisible1, lose) {
      this.Decide0 = Decide0;
      this.Divisible1 = Divisible1;
      this.lose = lose;
  };
  var lose = function (dict) {
      return dict.lose;
  };
  var lost = function (dictDecidable) {
      return lose(dictDecidable)(Control_Category.identity(Control_Category.categoryFn));
  };
  var decidablePredicate = new Decidable(function () {
      return Data_Decide.choosePredicate;
  }, function () {
      return Data_Divisible.divisiblePredicate;
  }, function (f) {
      return function (a) {
          return Data_Void.absurd(f(a));
      };
  });
  var decidableOp = function (dictMonoid) {
      return new Decidable(function () {
          return Data_Decide.chooseOp(dictMonoid.Semigroup0());
      }, function () {
          return Data_Divisible.divisibleOp(dictMonoid);
      }, function (f) {
          return function (a) {
              return Data_Void.absurd(f(a));
          };
      });
  };
  var decidableEquivalence = new Decidable(function () {
      return Data_Decide.chooseEquivalence;
  }, function () {
      return Data_Divisible.divisibleEquivalence;
  }, function (f) {
      return function (a) {
          return Data_Void.absurd(f(a));
      };
  });
  var decidableComparison = new Decidable(function () {
      return Data_Decide.chooseComparison;
  }, function () {
      return Data_Divisible.divisibleComparison;
  }, function (f) {
      return function (a) {
          return function (v) {
              return Data_Void.absurd(f(a));
          };
      };
  });
  exports["lose"] = lose;
  exports["Decidable"] = Decidable;
  exports["lost"] = lost;
  exports["decidableComparison"] = decidableComparison;
  exports["decidableEquivalence"] = decidableEquivalence;
  exports["decidablePredicate"] = decidablePredicate;
  exports["decidableOp"] = decidableOp;
})(PS["Data.Decidable"] = PS["Data.Decidable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];                 
  var Inject = function (inj, prj) {
      this.inj = inj;
      this.prj = prj;
  };
  var prj = function (dict) {
      return dict.prj;
  };
  var injectReflexive = new Inject(Control_Category.identity(Control_Category.categoryFn), Data_Maybe.Just.create);
  var injectLeft = new Inject(Data_Either.Left.create, Data_Either.either(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value)));
  var inj = function (dict) {
      return dict.inj;
  };
  var injectRight = function (dictInject) {
      return new Inject(function ($1) {
          return Data_Either.Right.create(inj(dictInject)($1));
      }, Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(prj(dictInject)));
  };
  exports["inj"] = inj;
  exports["prj"] = prj;
  exports["Inject"] = Inject;
  exports["injectLeft"] = injectLeft;
  exports["injectRight"] = injectRight;
  exports["injectReflexive"] = injectReflexive;
})(PS["Data.Either.Inject"] = PS["Data.Either.Inject"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Void = PS["Data.Void"];                 
  var in9 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v)))))))));
  };
  var in8 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v))))))));
  };
  var in7 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v)))))));
  };
  var in6 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v))))));
  };
  var in5 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v)))));
  };
  var in4 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v))));
  };
  var in3 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v)));
  };
  var in2 = function (v) {
      return new Data_Either.Right(new Data_Either.Left(v));
  };
  var in10 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v))))))))));
  };
  var in1 = Data_Either.Left.create;
  var either9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (y) {
                                          if (y instanceof Data_Either.Left) {
                                              return a(y.value0);
                                          };
                                          if (y instanceof Data_Either.Right) {
                                              if (y.value0 instanceof Data_Either.Left) {
                                                  return b(y.value0.value0);
                                              };
                                              if (y.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0 instanceof Data_Either.Left) {
                                                      return c(y.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return d(y.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return e(y.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return f(y.value0.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                          return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                      };
                                                                      if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                              return i(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                          };
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                              return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                          };
                                                                          throw new Error("Failed pattern match at Data.Either.Nested line 236, column 29 - line 238, column 40: " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                      };
                                                                      throw new Error("Failed pattern match at Data.Either.Nested line 234, column 27 - line 238, column 40: " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Either.Nested line 232, column 25 - line 238, column 40: " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Either.Nested line 230, column 23 - line 238, column 40: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Either.Nested line 228, column 21 - line 238, column 40: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Either.Nested line 226, column 19 - line 238, column 40: " + [ y.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested line 224, column 17 - line 238, column 40: " + [ y.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested line 222, column 15 - line 238, column 40: " + [ y.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested line 220, column 31 - line 238, column 40: " + [ y.constructor.name ]);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (y) {
                                      if (y instanceof Data_Either.Left) {
                                          return a(y.value0);
                                      };
                                      if (y instanceof Data_Either.Right) {
                                          if (y.value0 instanceof Data_Either.Left) {
                                              return b(y.value0.value0);
                                          };
                                          if (y.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0 instanceof Data_Either.Left) {
                                                  return c(y.value0.value0.value0);
                                              };
                                              if (y.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return d(y.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return e(y.value0.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return f(y.value0.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Either.Nested line 215, column 27 - line 217, column 38: " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Either.Nested line 213, column 25 - line 217, column 38: " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Either.Nested line 211, column 23 - line 217, column 38: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Either.Nested line 209, column 21 - line 217, column 38: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested line 207, column 19 - line 217, column 38: " + [ y.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested line 205, column 17 - line 217, column 38: " + [ y.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested line 203, column 15 - line 217, column 38: " + [ y.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Either.Nested line 201, column 29 - line 217, column 38: " + [ y.constructor.name ]);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (y) {
                                  if (y instanceof Data_Either.Left) {
                                      return a(y.value0);
                                  };
                                  if (y instanceof Data_Either.Right) {
                                      if (y.value0 instanceof Data_Either.Left) {
                                          return b(y.value0.value0);
                                      };
                                      if (y.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0 instanceof Data_Either.Left) {
                                              return c(y.value0.value0.value0);
                                          };
                                          if (y.value0.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                  return d(y.value0.value0.value0.value0);
                                              };
                                              if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return e(y.value0.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return f(y.value0.value0.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0.value0);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Either.Nested line 196, column 25 - line 198, column 36: " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Either.Nested line 194, column 23 - line 198, column 36: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested line 192, column 21 - line 198, column 36: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested line 190, column 19 - line 198, column 36: " + [ y.value0.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested line 188, column 17 - line 198, column 36: " + [ y.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Either.Nested line 186, column 15 - line 198, column 36: " + [ y.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Either.Nested line 184, column 27 - line 198, column 36: " + [ y.constructor.name ]);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (y) {
                              if (y instanceof Data_Either.Left) {
                                  return a(y.value0);
                              };
                              if (y instanceof Data_Either.Right) {
                                  if (y.value0 instanceof Data_Either.Left) {
                                      return b(y.value0.value0);
                                  };
                                  if (y.value0 instanceof Data_Either.Right) {
                                      if (y.value0.value0 instanceof Data_Either.Left) {
                                          return c(y.value0.value0.value0);
                                      };
                                      if (y.value0.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                              return d(y.value0.value0.value0.value0);
                                          };
                                          if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                  return e(y.value0.value0.value0.value0.value0);
                                              };
                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return f(y.value0.value0.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                      return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested line 179, column 23 - line 181, column 34: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested line 177, column 21 - line 181, column 34: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested line 175, column 19 - line 181, column 34: " + [ y.value0.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Either.Nested line 173, column 17 - line 181, column 34: " + [ y.value0.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Either.Nested line 171, column 15 - line 181, column 34: " + [ y.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Either.Nested line 169, column 25 - line 181, column 34: " + [ y.constructor.name ]);
                          };
                      };
                  };
              };
          };
      };
  };
  var either5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (y) {
                          if (y instanceof Data_Either.Left) {
                              return a(y.value0);
                          };
                          if (y instanceof Data_Either.Right) {
                              if (y.value0 instanceof Data_Either.Left) {
                                  return b(y.value0.value0);
                              };
                              if (y.value0 instanceof Data_Either.Right) {
                                  if (y.value0.value0 instanceof Data_Either.Left) {
                                      return c(y.value0.value0.value0);
                                  };
                                  if (y.value0.value0 instanceof Data_Either.Right) {
                                      if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                          return d(y.value0.value0.value0.value0);
                                      };
                                      if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                              return e(y.value0.value0.value0.value0.value0);
                                          };
                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                              return Data_Void.absurd(y.value0.value0.value0.value0.value0);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested line 164, column 21 - line 166, column 32: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Either.Nested line 162, column 19 - line 166, column 32: " + [ y.value0.value0.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Either.Nested line 160, column 17 - line 166, column 32: " + [ y.value0.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Either.Nested line 158, column 15 - line 166, column 32: " + [ y.value0.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Either.Nested line 156, column 23 - line 166, column 32: " + [ y.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var either4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (y) {
                      if (y instanceof Data_Either.Left) {
                          return a(y.value0);
                      };
                      if (y instanceof Data_Either.Right) {
                          if (y.value0 instanceof Data_Either.Left) {
                              return b(y.value0.value0);
                          };
                          if (y.value0 instanceof Data_Either.Right) {
                              if (y.value0.value0 instanceof Data_Either.Left) {
                                  return c(y.value0.value0.value0);
                              };
                              if (y.value0.value0 instanceof Data_Either.Right) {
                                  if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                      return d(y.value0.value0.value0.value0);
                                  };
                                  if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                      return Data_Void.absurd(y.value0.value0.value0.value0);
                                  };
                                  throw new Error("Failed pattern match at Data.Either.Nested line 151, column 19 - line 153, column 30: " + [ y.value0.value0.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Either.Nested line 149, column 17 - line 153, column 30: " + [ y.value0.value0.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Either.Nested line 147, column 15 - line 153, column 30: " + [ y.value0.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Either.Nested line 145, column 21 - line 153, column 30: " + [ y.constructor.name ]);
                  };
              };
          };
      };
  };
  var either3 = function (a) {
      return function (b) {
          return function (c) {
              return function (y) {
                  if (y instanceof Data_Either.Left) {
                      return a(y.value0);
                  };
                  if (y instanceof Data_Either.Right) {
                      if (y.value0 instanceof Data_Either.Left) {
                          return b(y.value0.value0);
                      };
                      if (y.value0 instanceof Data_Either.Right) {
                          if (y.value0.value0 instanceof Data_Either.Left) {
                              return c(y.value0.value0.value0);
                          };
                          if (y.value0.value0 instanceof Data_Either.Right) {
                              return Data_Void.absurd(y.value0.value0.value0);
                          };
                          throw new Error("Failed pattern match at Data.Either.Nested line 140, column 17 - line 142, column 28: " + [ y.value0.value0.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Either.Nested line 138, column 15 - line 142, column 28: " + [ y.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Either.Nested line 136, column 19 - line 142, column 28: " + [ y.constructor.name ]);
              };
          };
      };
  };
  var either2 = function (a) {
      return function (b) {
          return function (y) {
              if (y instanceof Data_Either.Left) {
                  return a(y.value0);
              };
              if (y instanceof Data_Either.Right) {
                  if (y.value0 instanceof Data_Either.Left) {
                      return b(y.value0.value0);
                  };
                  if (y.value0 instanceof Data_Either.Right) {
                      return Data_Void.absurd(y.value0.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either.Nested line 131, column 15 - line 133, column 26: " + [ y.value0.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Either.Nested line 129, column 17 - line 133, column 26: " + [ y.constructor.name ]);
          };
      };
  };
  var either10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (j) {
                                          return function (y) {
                                              if (y instanceof Data_Either.Left) {
                                                  return a(y.value0);
                                              };
                                              if (y instanceof Data_Either.Right) {
                                                  if (y.value0 instanceof Data_Either.Left) {
                                                      return b(y.value0.value0);
                                                  };
                                                  if (y.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0 instanceof Data_Either.Left) {
                                                          return c(y.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return d(y.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return e(y.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return f(y.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                          return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                                      };
                                                                      if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                              return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                          };
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                              if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                                  return i(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                              };
                                                                              if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                                  if (y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                                      return j(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                                  };
                                                                                  if (y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                                      return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                                  };
                                                                                  throw new Error("Failed pattern match at Data.Either.Nested line 259, column 31 - line 261, column 41: " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                              };
                                                                              throw new Error("Failed pattern match at Data.Either.Nested line 257, column 29 - line 261, column 41: " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                          };
                                                                          throw new Error("Failed pattern match at Data.Either.Nested line 255, column 27 - line 261, column 41: " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                      };
                                                                      throw new Error("Failed pattern match at Data.Either.Nested line 253, column 25 - line 261, column 41: " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Either.Nested line 251, column 23 - line 261, column 41: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Either.Nested line 249, column 21 - line 261, column 41: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Either.Nested line 247, column 19 - line 261, column 41: " + [ y.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Either.Nested line 245, column 17 - line 261, column 41: " + [ y.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested line 243, column 15 - line 261, column 41: " + [ y.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested line 241, column 34 - line 261, column 41: " + [ y.constructor.name ]);
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either1 = function (y) {
      if (y instanceof Data_Either.Left) {
          return y.value0;
      };
      if (y instanceof Data_Either.Right) {
          return Data_Void.absurd(y.value0);
      };
      throw new Error("Failed pattern match at Data.Either.Nested line 124, column 13 - line 126, column 24: " + [ y.constructor.name ]);
  };
  var at9 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left)))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at8 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at7 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left)))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at6 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))) {
                  return f(y.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at5 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0 instanceof Data_Either.Left)))) {
                  return f(y.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at4 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0 instanceof Data_Either.Left))) {
                  return f(y.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at3 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && y.value0.value0 instanceof Data_Either.Left)) {
                  return f(y.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at2 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && y.value0 instanceof Data_Either.Left) {
                  return f(y.value0.value0);
              };
              return b;
          };
      };
  };
  var at10 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at1 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Left) {
                  return f(y.value0);
              };
              return b;
          };
      };
  };
  exports["in1"] = in1;
  exports["in2"] = in2;
  exports["in3"] = in3;
  exports["in4"] = in4;
  exports["in5"] = in5;
  exports["in6"] = in6;
  exports["in7"] = in7;
  exports["in8"] = in8;
  exports["in9"] = in9;
  exports["in10"] = in10;
  exports["at1"] = at1;
  exports["at2"] = at2;
  exports["at3"] = at3;
  exports["at4"] = at4;
  exports["at5"] = at5;
  exports["at6"] = at6;
  exports["at7"] = at7;
  exports["at8"] = at8;
  exports["at9"] = at9;
  exports["at10"] = at10;
  exports["either1"] = either1;
  exports["either2"] = either2;
  exports["either3"] = either3;
  exports["either4"] = either4;
  exports["either5"] = either5;
  exports["either6"] = either6;
  exports["either7"] = either7;
  exports["either8"] = either8;
  exports["either9"] = either9;
  exports["either10"] = either10;
})(PS["Data.Either.Nested"] = PS["Data.Either.Nested"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];                 
  var Field = function (DivisionRing1, EuclideanRing0) {
      this.DivisionRing1 = DivisionRing1;
      this.EuclideanRing0 = EuclideanRing0;
  };
  var field = function (dictEuclideanRing) {
      return function (dictDivisionRing) {
          return new Field(function () {
              return dictDivisionRing;
          }, function () {
              return dictEuclideanRing;
          });
      };
  };
  exports["Field"] = Field;
  exports["field"] = field;
})(PS["Data.Field"] = PS["Data.Field"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Prelude = PS["Prelude"];                 
  var Coproduct = function (x) {
      return x;
  };
  var showCoproduct = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              if (v instanceof Data_Either.Left) {
                  return "(left " + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Data_Either.Right) {
                  return "(right " + (Data_Show.show(dictShow1)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Functor.Coproduct line 67, column 1 - line 67, column 77: " + [ v.constructor.name ]);
          });
      };
  };
  var right = function (ga) {
      return new Data_Either.Right(ga);
  };
  var newtypeCoproduct = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Coproduct);
  var left = function (fa) {
      return new Data_Either.Left(fa);
  };
  var functorCoproduct = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function (v) {
                  return Data_Bifunctor.bimap(Data_Either.bifunctorEither)(Data_Functor.map(dictFunctor)(f))(Data_Functor.map(dictFunctor1)(f))(v);
              };
          });
      };
  };
  var functorWithIndexCoproduct = function (dictFunctorWithIndex) {
      return function (dictFunctorWithIndex1) {
          return new Data_FunctorWithIndex.FunctorWithIndex(function () {
              return functorCoproduct(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
          }, function (f) {
              return function (v) {
                  return Data_Bifunctor.bimap(Data_Either.bifunctorEither)(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function ($82) {
                      return f(Data_Either.Left.create($82));
                  }))(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex1)(function ($83) {
                      return f(Data_Either.Right.create($83));
                  }))(v);
              };
          });
      };
  };
  var eq1Coproduct = function (dictEq1) {
      return function (dictEq11) {
          return new Data_Eq.Eq1(function (dictEq) {
              return function (v) {
                  return function (v1) {
                      if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                          return Data_Eq.eq1(dictEq1)(dictEq)(v.value0)(v1.value0);
                      };
                      if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                          return Data_Eq.eq1(dictEq11)(dictEq)(v.value0)(v1.value0);
                      };
                      return false;
                  };
              };
          });
      };
  };
  var eqCoproduct = function (dictEq1) {
      return function (dictEq11) {
          return function (dictEq) {
              return new Data_Eq.Eq(Data_Eq.eq1(eq1Coproduct(dictEq1)(dictEq11))(dictEq));
          };
      };
  };
  var ord1Coproduct = function (dictOrd1) {
      return function (dictOrd11) {
          return new Data_Ord.Ord1(function () {
              return eq1Coproduct(dictOrd1.Eq10())(dictOrd11.Eq10());
          }, function (dictOrd) {
              return function (v) {
                  return function (v1) {
                      if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                          return Data_Ord.compare1(dictOrd1)(dictOrd)(v.value0)(v1.value0);
                      };
                      if (v instanceof Data_Either.Left) {
                          return Data_Ordering.LT.value;
                      };
                      if (v1 instanceof Data_Either.Left) {
                          return Data_Ordering.GT.value;
                      };
                      if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                          return Data_Ord.compare1(dictOrd11)(dictOrd)(v.value0)(v1.value0);
                      };
                      throw new Error("Failed pattern match at Data.Functor.Coproduct line 61, column 5 - line 65, column 43: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
          });
      };
  };
  var ordCoproduct = function (dictOrd1) {
      return function (dictOrd11) {
          return function (dictOrd) {
              return new Data_Ord.Ord(function () {
                  return eqCoproduct(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
              }, Data_Ord.compare1(ord1Coproduct(dictOrd1)(dictOrd11))(dictOrd));
          };
      };
  };
  var coproduct = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Data_Either.Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Data_Either.Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Functor.Coproduct line 31, column 1 - line 31, column 78: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var extendCoproduct = function (dictExtend) {
      return function (dictExtend1) {
          return new Control_Extend.Extend(function () {
              return functorCoproduct(dictExtend.Functor0())(dictExtend1.Functor0());
          }, function (f) {
              return function ($84) {
                  return Coproduct(coproduct(function ($85) {
                      return Data_Either.Left.create(Control_Extend.extend(dictExtend)(function ($86) {
                          return f(Coproduct(Data_Either.Left.create($86)));
                      })($85));
                  })(function ($87) {
                      return Data_Either.Right.create(Control_Extend.extend(dictExtend1)(function ($88) {
                          return f(Coproduct(Data_Either.Right.create($88)));
                      })($87));
                  })($84));
              };
          });
      };
  };
  var foldableCoproduct = function (dictFoldable) {
      return function (dictFoldable1) {
          return new Data_Foldable.Foldable(function (dictMonoid) {
              return function (f) {
                  return coproduct(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f))(Data_Foldable.foldMap(dictFoldable1)(dictMonoid)(f));
              };
          }, function (f) {
              return function (z) {
                  return coproduct(Data_Foldable.foldl(dictFoldable)(f)(z))(Data_Foldable.foldl(dictFoldable1)(f)(z));
              };
          }, function (f) {
              return function (z) {
                  return coproduct(Data_Foldable.foldr(dictFoldable)(f)(z))(Data_Foldable.foldr(dictFoldable1)(f)(z));
              };
          });
      };
  };
  var foldableWithIndexCoproduct = function (dictFoldableWithIndex) {
      return function (dictFoldableWithIndex1) {
          return new Data_FoldableWithIndex.FoldableWithIndex(function () {
              return foldableCoproduct(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
          }, function (dictMonoid) {
              return function (f) {
                  return coproduct(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function ($89) {
                      return f(Data_Either.Left.create($89));
                  }))(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid)(function ($90) {
                      return f(Data_Either.Right.create($90));
                  }));
              };
          }, function (f) {
              return function (z) {
                  return coproduct(Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function ($91) {
                      return f(Data_Either.Left.create($91));
                  })(z))(Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex1)(function ($92) {
                      return f(Data_Either.Right.create($92));
                  })(z));
              };
          }, function (f) {
              return function (z) {
                  return coproduct(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function ($93) {
                      return f(Data_Either.Left.create($93));
                  })(z))(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex1)(function ($94) {
                      return f(Data_Either.Right.create($94));
                  })(z));
              };
          });
      };
  };
  var traversableCoproduct = function (dictTraversable) {
      return function (dictTraversable1) {
          return new Data_Traversable.Traversable(function () {
              return foldableCoproduct(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
          }, function () {
              return functorCoproduct(dictTraversable.Functor0())(dictTraversable1.Functor0());
          }, function (dictApplicative) {
              return coproduct(function ($95) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($96) {
                      return Coproduct(Data_Either.Left.create($96));
                  })(Data_Traversable.sequence(dictTraversable)(dictApplicative)($95));
              })(function ($97) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($98) {
                      return Coproduct(Data_Either.Right.create($98));
                  })(Data_Traversable.sequence(dictTraversable1)(dictApplicative)($97));
              });
          }, function (dictApplicative) {
              return function (f) {
                  return coproduct(function ($99) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($100) {
                          return Coproduct(Data_Either.Left.create($100));
                      })(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)($99));
                  })(function ($101) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($102) {
                          return Coproduct(Data_Either.Right.create($102));
                      })(Data_Traversable.traverse(dictTraversable1)(dictApplicative)(f)($101));
                  });
              };
          });
      };
  };
  var traversableWithIndexCoproduct = function (dictTraversableWithIndex) {
      return function (dictTraversableWithIndex1) {
          return new Data_TraversableWithIndex.TraversableWithIndex(function () {
              return foldableWithIndexCoproduct(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
          }, function () {
              return functorWithIndexCoproduct(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
          }, function () {
              return traversableCoproduct(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
          }, function (dictApplicative) {
              return function (f) {
                  return coproduct(function ($103) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($104) {
                          return Coproduct(Data_Either.Left.create($104));
                      })(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function ($105) {
                          return f(Data_Either.Left.create($105));
                      })($103));
                  })(function ($106) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($107) {
                          return Coproduct(Data_Either.Right.create($107));
                      })(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex1)(dictApplicative)(function ($108) {
                          return f(Data_Either.Right.create($108));
                      })($106));
                  });
              };
          });
      };
  };
  var comonadCoproduct = function (dictComonad) {
      return function (dictComonad1) {
          return new Control_Comonad.Comonad(function () {
              return extendCoproduct(dictComonad.Extend0())(dictComonad1.Extend0());
          }, coproduct(Control_Comonad.extract(dictComonad))(Control_Comonad.extract(dictComonad1)));
      };
  };
  var bihoistCoproduct = function (natF) {
      return function (natG) {
          return function (v) {
              return Data_Bifunctor.bimap(Data_Either.bifunctorEither)(natF)(natG)(v);
          };
      };
  };
  exports["Coproduct"] = Coproduct;
  exports["left"] = left;
  exports["right"] = right;
  exports["coproduct"] = coproduct;
  exports["bihoistCoproduct"] = bihoistCoproduct;
  exports["newtypeCoproduct"] = newtypeCoproduct;
  exports["eqCoproduct"] = eqCoproduct;
  exports["eq1Coproduct"] = eq1Coproduct;
  exports["ordCoproduct"] = ordCoproduct;
  exports["ord1Coproduct"] = ord1Coproduct;
  exports["showCoproduct"] = showCoproduct;
  exports["functorCoproduct"] = functorCoproduct;
  exports["functorWithIndexCoproduct"] = functorWithIndexCoproduct;
  exports["extendCoproduct"] = extendCoproduct;
  exports["comonadCoproduct"] = comonadCoproduct;
  exports["foldableCoproduct"] = foldableCoproduct;
  exports["foldableWithIndexCoproduct"] = foldableWithIndexCoproduct;
  exports["traversableCoproduct"] = traversableCoproduct;
  exports["traversableWithIndexCoproduct"] = traversableWithIndexCoproduct;
})(PS["Data.Functor.Coproduct"] = PS["Data.Functor.Coproduct"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor_Coproduct = PS["Data.Functor.Coproduct"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];                 
  var Inject = function (inj, prj) {
      this.inj = inj;
      this.prj = prj;
  };
  var prj = function (dict) {
      return dict.prj;
  };
  var injectReflexive = new Inject(Control_Category.identity(Control_Category.categoryFn), Data_Maybe.Just.create);
  var injectLeft = new Inject(function ($1) {
      return Data_Functor_Coproduct.Coproduct(Data_Either.Left.create($1));
  }, Data_Functor_Coproduct.coproduct(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value)));
  var inj = function (dict) {
      return dict.inj;
  };
  var injectRight = function (dictInject) {
      return new Inject(function ($2) {
          return Data_Functor_Coproduct.Coproduct(Data_Either.Right.create(inj(dictInject)($2)));
      }, Data_Functor_Coproduct.coproduct(Data_Function["const"](Data_Maybe.Nothing.value))(prj(dictInject)));
  };
  exports["inj"] = inj;
  exports["prj"] = prj;
  exports["Inject"] = Inject;
  exports["injectLeft"] = injectLeft;
  exports["injectRight"] = injectRight;
  exports["injectReflexive"] = injectReflexive;
})(PS["Data.Functor.Coproduct.Inject"] = PS["Data.Functor.Coproduct.Inject"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Const = PS["Data.Const"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor_Coproduct = PS["Data.Functor.Coproduct"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Void = PS["Data.Void"];
  var Prelude = PS["Prelude"];                 
  var in9 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v)))))))));
  };
  var in8 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v))))))));
  };
  var in7 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v)))))));
  };
  var in6 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v))))));
  };
  var in5 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v)))));
  };
  var in4 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v))));
  };
  var in3 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v)));
  };
  var in2 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v));
  };
  var in10 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v))))))))));
  };
  var in1 = Data_Functor_Coproduct.left;
  var coproduct9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (y) {
                                          if (y instanceof Data_Either.Left) {
                                              return a(y.value0);
                                          };
                                          if (y instanceof Data_Either.Right) {
                                              if (y.value0 instanceof Data_Either.Left) {
                                                  return b(y.value0.value0);
                                              };
                                              if (y.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0 instanceof Data_Either.Left) {
                                                      return c(y.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return d(y.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return e(y.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return f(y.value0.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                          return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                      };
                                                                      if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                              return i(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                          };
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                              return Data_Void.absurd(Data_Newtype.unwrap(Data_Const.newtypeConst)(y.value0.value0.value0.value0.value0.value0.value0.value0.value0));
                                                                          };
                                                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 228, column 41 - line 230, column 61: " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                      };
                                                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 226, column 39 - line 230, column 61: " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 224, column 37 - line 230, column 61: " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 222, column 35 - line 230, column 61: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 220, column 33 - line 230, column 61: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 218, column 31 - line 230, column 61: " + [ y.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 216, column 29 - line 230, column 61: " + [ y.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 214, column 27 - line 230, column 61: " + [ y.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 212, column 34 - line 230, column 61: " + [ y.constructor.name ]);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var coproduct8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (y) {
                                      if (y instanceof Data_Either.Left) {
                                          return a(y.value0);
                                      };
                                      if (y instanceof Data_Either.Right) {
                                          if (y.value0 instanceof Data_Either.Left) {
                                              return b(y.value0.value0);
                                          };
                                          if (y.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0 instanceof Data_Either.Left) {
                                                  return c(y.value0.value0.value0);
                                              };
                                              if (y.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return d(y.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return e(y.value0.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return f(y.value0.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      return Data_Void.absurd(Data_Newtype.unwrap(Data_Const.newtypeConst)(y.value0.value0.value0.value0.value0.value0.value0.value0));
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 207, column 39 - line 209, column 59: " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 205, column 37 - line 209, column 59: " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 203, column 35 - line 209, column 59: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 201, column 33 - line 209, column 59: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 199, column 31 - line 209, column 59: " + [ y.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 197, column 29 - line 209, column 59: " + [ y.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 195, column 27 - line 209, column 59: " + [ y.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 193, column 32 - line 209, column 59: " + [ y.constructor.name ]);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var coproduct7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (y) {
                                  if (y instanceof Data_Either.Left) {
                                      return a(y.value0);
                                  };
                                  if (y instanceof Data_Either.Right) {
                                      if (y.value0 instanceof Data_Either.Left) {
                                          return b(y.value0.value0);
                                      };
                                      if (y.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0 instanceof Data_Either.Left) {
                                              return c(y.value0.value0.value0);
                                          };
                                          if (y.value0.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                  return d(y.value0.value0.value0.value0);
                                              };
                                              if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return e(y.value0.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return f(y.value0.value0.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              return Data_Void.absurd(Data_Newtype.unwrap(Data_Const.newtypeConst)(y.value0.value0.value0.value0.value0.value0.value0));
                                                          };
                                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 188, column 37 - line 190, column 57: " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 186, column 35 - line 190, column 57: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 184, column 33 - line 190, column 57: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 182, column 31 - line 190, column 57: " + [ y.value0.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 180, column 29 - line 190, column 57: " + [ y.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 178, column 27 - line 190, column 57: " + [ y.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 176, column 30 - line 190, column 57: " + [ y.constructor.name ]);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var coproduct6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (y) {
                              if (y instanceof Data_Either.Left) {
                                  return a(y.value0);
                              };
                              if (y instanceof Data_Either.Right) {
                                  if (y.value0 instanceof Data_Either.Left) {
                                      return b(y.value0.value0);
                                  };
                                  if (y.value0 instanceof Data_Either.Right) {
                                      if (y.value0.value0 instanceof Data_Either.Left) {
                                          return c(y.value0.value0.value0);
                                      };
                                      if (y.value0.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                              return d(y.value0.value0.value0.value0);
                                          };
                                          if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                  return e(y.value0.value0.value0.value0.value0);
                                              };
                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return f(y.value0.value0.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                      return Data_Void.absurd(Data_Newtype.unwrap(Data_Const.newtypeConst)(y.value0.value0.value0.value0.value0.value0));
                                                  };
                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 171, column 35 - line 173, column 55: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 169, column 33 - line 173, column 55: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 167, column 31 - line 173, column 55: " + [ y.value0.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 165, column 29 - line 173, column 55: " + [ y.value0.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 163, column 27 - line 173, column 55: " + [ y.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 161, column 28 - line 173, column 55: " + [ y.constructor.name ]);
                          };
                      };
                  };
              };
          };
      };
  };
  var coproduct5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (y) {
                          if (y instanceof Data_Either.Left) {
                              return a(y.value0);
                          };
                          if (y instanceof Data_Either.Right) {
                              if (y.value0 instanceof Data_Either.Left) {
                                  return b(y.value0.value0);
                              };
                              if (y.value0 instanceof Data_Either.Right) {
                                  if (y.value0.value0 instanceof Data_Either.Left) {
                                      return c(y.value0.value0.value0);
                                  };
                                  if (y.value0.value0 instanceof Data_Either.Right) {
                                      if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                          return d(y.value0.value0.value0.value0);
                                      };
                                      if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                              return e(y.value0.value0.value0.value0.value0);
                                          };
                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                              return Data_Void.absurd(Data_Newtype.unwrap(Data_Const.newtypeConst)(y.value0.value0.value0.value0.value0));
                                          };
                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 156, column 33 - line 158, column 53: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 154, column 31 - line 158, column 53: " + [ y.value0.value0.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 152, column 29 - line 158, column 53: " + [ y.value0.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 150, column 27 - line 158, column 53: " + [ y.value0.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 148, column 26 - line 158, column 53: " + [ y.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var coproduct4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (y) {
                      if (y instanceof Data_Either.Left) {
                          return a(y.value0);
                      };
                      if (y instanceof Data_Either.Right) {
                          if (y.value0 instanceof Data_Either.Left) {
                              return b(y.value0.value0);
                          };
                          if (y.value0 instanceof Data_Either.Right) {
                              if (y.value0.value0 instanceof Data_Either.Left) {
                                  return c(y.value0.value0.value0);
                              };
                              if (y.value0.value0 instanceof Data_Either.Right) {
                                  if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                      return d(y.value0.value0.value0.value0);
                                  };
                                  if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                      return Data_Void.absurd(Data_Newtype.unwrap(Data_Const.newtypeConst)(y.value0.value0.value0.value0));
                                  };
                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 143, column 31 - line 145, column 51: " + [ y.value0.value0.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 141, column 29 - line 145, column 51: " + [ y.value0.value0.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 139, column 27 - line 145, column 51: " + [ y.value0.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 137, column 24 - line 145, column 51: " + [ y.constructor.name ]);
                  };
              };
          };
      };
  };
  var coproduct3 = function (a) {
      return function (b) {
          return function (c) {
              return function (y) {
                  if (y instanceof Data_Either.Left) {
                      return a(y.value0);
                  };
                  if (y instanceof Data_Either.Right) {
                      if (y.value0 instanceof Data_Either.Left) {
                          return b(y.value0.value0);
                      };
                      if (y.value0 instanceof Data_Either.Right) {
                          if (y.value0.value0 instanceof Data_Either.Left) {
                              return c(y.value0.value0.value0);
                          };
                          if (y.value0.value0 instanceof Data_Either.Right) {
                              return Data_Void.absurd(Data_Newtype.unwrap(Data_Const.newtypeConst)(y.value0.value0.value0));
                          };
                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 132, column 29 - line 134, column 49: " + [ y.value0.value0.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 130, column 27 - line 134, column 49: " + [ y.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 128, column 22 - line 134, column 49: " + [ y.constructor.name ]);
              };
          };
      };
  };
  var coproduct2 = function (a) {
      return function (b) {
          return function (y) {
              if (y instanceof Data_Either.Left) {
                  return a(y.value0);
              };
              if (y instanceof Data_Either.Right) {
                  if (y.value0 instanceof Data_Either.Left) {
                      return b(y.value0.value0);
                  };
                  if (y.value0 instanceof Data_Either.Right) {
                      return Data_Void.absurd(Data_Newtype.unwrap(Data_Const.newtypeConst)(y.value0.value0));
                  };
                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 123, column 27 - line 125, column 47: " + [ y.value0.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 121, column 20 - line 125, column 47: " + [ y.constructor.name ]);
          };
      };
  };
  var coproduct10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (j) {
                                          return function (y) {
                                              if (y instanceof Data_Either.Left) {
                                                  return a(y.value0);
                                              };
                                              if (y instanceof Data_Either.Right) {
                                                  if (y.value0 instanceof Data_Either.Left) {
                                                      return b(y.value0.value0);
                                                  };
                                                  if (y.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0 instanceof Data_Either.Left) {
                                                          return c(y.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return d(y.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return e(y.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return f(y.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                          return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                                      };
                                                                      if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                              return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                          };
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                              if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                                  return i(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                              };
                                                                              if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                                  if (y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                                      return j(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                                  };
                                                                                  if (y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                                      return Data_Void.absurd(Data_Newtype.unwrap(Data_Const.newtypeConst)(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0));
                                                                                  };
                                                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 251, column 43 - line 253, column 64: " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                              };
                                                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 249, column 41 - line 253, column 64: " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                          };
                                                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 247, column 39 - line 253, column 64: " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                      };
                                                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 245, column 37 - line 253, column 64: " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 243, column 35 - line 253, column 64: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 241, column 33 - line 253, column 64: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 239, column 31 - line 253, column 64: " + [ y.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 237, column 29 - line 253, column 64: " + [ y.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 235, column 27 - line 253, column 64: " + [ y.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 233, column 37 - line 253, column 64: " + [ y.constructor.name ]);
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var coproduct1 = function (y) {
      if (y instanceof Data_Either.Left) {
          return y.value0;
      };
      if (y instanceof Data_Either.Right) {
          return Data_Void.absurd(Data_Newtype.unwrap(Data_Const.newtypeConst)(y.value0));
      };
      throw new Error("Failed pattern match at Data.Functor.Coproduct.Nested line 116, column 16 - line 118, column 45: " + [ y.constructor.name ]);
  };
  var at9 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left)))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at8 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at7 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left)))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at6 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))) {
                  return f(y.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at5 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0 instanceof Data_Either.Left)))) {
                  return f(y.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at4 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0 instanceof Data_Either.Left))) {
                  return f(y.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at3 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && y.value0.value0 instanceof Data_Either.Left)) {
                  return f(y.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at2 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && y.value0 instanceof Data_Either.Left) {
                  return f(y.value0.value0);
              };
              return b;
          };
      };
  };
  var at10 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at1 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Left) {
                  return f(y.value0);
              };
              return b;
          };
      };
  };
  exports["in1"] = in1;
  exports["in2"] = in2;
  exports["in3"] = in3;
  exports["in4"] = in4;
  exports["in5"] = in5;
  exports["in6"] = in6;
  exports["in7"] = in7;
  exports["in8"] = in8;
  exports["in9"] = in9;
  exports["in10"] = in10;
  exports["at1"] = at1;
  exports["at2"] = at2;
  exports["at3"] = at3;
  exports["at4"] = at4;
  exports["at5"] = at5;
  exports["at6"] = at6;
  exports["at7"] = at7;
  exports["at8"] = at8;
  exports["at9"] = at9;
  exports["at10"] = at10;
  exports["coproduct1"] = coproduct1;
  exports["coproduct2"] = coproduct2;
  exports["coproduct3"] = coproduct3;
  exports["coproduct4"] = coproduct4;
  exports["coproduct5"] = coproduct5;
  exports["coproduct6"] = coproduct6;
  exports["coproduct7"] = coproduct7;
  exports["coproduct8"] = coproduct8;
  exports["coproduct9"] = coproduct9;
  exports["coproduct10"] = coproduct10;
})(PS["Data.Functor.Coproduct.Nested"] = PS["Data.Functor.Coproduct.Nested"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var Product = function (x) {
      return x;
  };
  var showProduct = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var product = function (fa) {
      return function (ga) {
          return new Data_Tuple.Tuple(fa, ga);
      };
  };
  var newtypeProduct = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Product);
  var functorProduct = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function (v) {
                  return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(Data_Functor.map(dictFunctor)(f))(Data_Functor.map(dictFunctor1)(f))(v);
              };
          });
      };
  };
  var functorWithIndexProduct = function (dictFunctorWithIndex) {
      return function (dictFunctorWithIndex1) {
          return new Data_FunctorWithIndex.FunctorWithIndex(function () {
              return functorProduct(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
          }, function (f) {
              return function (v) {
                  return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function ($136) {
                      return f(Data_Either.Left.create($136));
                  }))(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex1)(function ($137) {
                      return f(Data_Either.Right.create($137));
                  }))(v);
              };
          });
      };
  };
  var foldableProduct = function (dictFoldable) {
      return function (dictFoldable1) {
          return new Data_Foldable.Foldable(function (dictMonoid) {
              return function (f) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value0))(Data_Foldable.foldMap(dictFoldable1)(dictMonoid)(f)(v.value1));
                  };
              };
          }, function (f) {
              return function (z) {
                  return function (v) {
                      return Data_Foldable.foldl(dictFoldable1)(f)(Data_Foldable.foldl(dictFoldable)(f)(z)(v.value0))(v.value1);
                  };
              };
          }, function (f) {
              return function (z) {
                  return function (v) {
                      return Data_Foldable.foldr(dictFoldable)(f)(Data_Foldable.foldr(dictFoldable1)(f)(z)(v.value1))(v.value0);
                  };
              };
          });
      };
  };
  var foldableWithIndexProduct = function (dictFoldableWithIndex) {
      return function (dictFoldableWithIndex1) {
          return new Data_FoldableWithIndex.FoldableWithIndex(function () {
              return foldableProduct(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
          }, function (dictMonoid) {
              return function (f) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function ($138) {
                          return f(Data_Either.Left.create($138));
                      })(v.value0))(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid)(function ($139) {
                          return f(Data_Either.Right.create($139));
                      })(v.value1));
                  };
              };
          }, function (f) {
              return function (z) {
                  return function (v) {
                      return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex1)(function ($140) {
                          return f(Data_Either.Right.create($140));
                      })(Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function ($141) {
                          return f(Data_Either.Left.create($141));
                      })(z)(v.value0))(v.value1);
                  };
              };
          }, function (f) {
              return function (z) {
                  return function (v) {
                      return Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function ($142) {
                          return f(Data_Either.Left.create($142));
                      })(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex1)(function ($143) {
                          return f(Data_Either.Right.create($143));
                      })(z)(v.value1))(v.value0);
                  };
              };
          });
      };
  };
  var traversableProduct = function (dictTraversable) {
      return function (dictTraversable1) {
          return new Data_Traversable.Traversable(function () {
              return foldableProduct(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
          }, function () {
              return functorProduct(dictTraversable.Functor0())(dictTraversable1.Functor0());
          }, function (dictApplicative) {
              return function (v) {
                  return Control_Apply.lift2(dictApplicative.Apply0())(product)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value0))(Data_Traversable.sequence(dictTraversable1)(dictApplicative)(v.value1));
              };
          }, function (dictApplicative) {
              return function (f) {
                  return function (v) {
                      return Control_Apply.lift2(dictApplicative.Apply0())(product)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value0))(Data_Traversable.traverse(dictTraversable1)(dictApplicative)(f)(v.value1));
                  };
              };
          });
      };
  };
  var traversableWithIndexProduct = function (dictTraversableWithIndex) {
      return function (dictTraversableWithIndex1) {
          return new Data_TraversableWithIndex.TraversableWithIndex(function () {
              return foldableWithIndexProduct(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
          }, function () {
              return functorWithIndexProduct(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
          }, function () {
              return traversableProduct(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
          }, function (dictApplicative) {
              return function (f) {
                  return function (v) {
                      return Control_Apply.lift2(dictApplicative.Apply0())(product)(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function ($144) {
                          return f(Data_Either.Left.create($144));
                      })(v.value0))(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex1)(dictApplicative)(function ($145) {
                          return f(Data_Either.Right.create($145));
                      })(v.value1));
                  };
              };
          });
      };
  };
  var eq1Product = function (dictEq1) {
      return function (dictEq11) {
          return new Data_Eq.Eq1(function (dictEq) {
              return function (v) {
                  return function (v1) {
                      return Data_Eq.eq1(dictEq1)(dictEq)(v.value0)(v1.value0) && Data_Eq.eq1(dictEq11)(dictEq)(v.value1)(v1.value1);
                  };
              };
          });
      };
  };
  var eqProduct = function (dictEq1) {
      return function (dictEq11) {
          return function (dictEq) {
              return new Data_Eq.Eq(Data_Eq.eq1(eq1Product(dictEq1)(dictEq11))(dictEq));
          };
      };
  };
  var ord1Product = function (dictOrd1) {
      return function (dictOrd11) {
          return new Data_Ord.Ord1(function () {
              return eq1Product(dictOrd1.Eq10())(dictOrd11.Eq10());
          }, function (dictOrd) {
              return function (v) {
                  return function (v1) {
                      var v2 = Data_Ord.compare1(dictOrd1)(dictOrd)(v.value0)(v1.value0);
                      if (v2 instanceof Data_Ordering.EQ) {
                          return Data_Ord.compare1(dictOrd11)(dictOrd)(v.value1)(v1.value1);
                      };
                      return v2;
                  };
              };
          });
      };
  };
  var ordProduct = function (dictOrd1) {
      return function (dictOrd11) {
          return function (dictOrd) {
              return new Data_Ord.Ord(function () {
                  return eqProduct(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
              }, Data_Ord.compare1(ord1Product(dictOrd1)(dictOrd11))(dictOrd));
          };
      };
  };
  var bihoistProduct = function (natF) {
      return function (natG) {
          return function (v) {
              return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(natF)(natG)(v);
          };
      };
  };
  var applyProduct = function (dictApply) {
      return function (dictApply1) {
          return new Control_Apply.Apply(function () {
              return functorProduct(dictApply.Functor0())(dictApply1.Functor0());
          }, function (v) {
              return function (v1) {
                  return product(Control_Apply.apply(dictApply)(v.value0)(v1.value0))(Control_Apply.apply(dictApply1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var bindProduct = function (dictBind) {
      return function (dictBind1) {
          return new Control_Bind.Bind(function () {
              return applyProduct(dictBind.Apply0())(dictBind1.Apply0());
          }, function (v) {
              return function (f) {
                  return product(Control_Bind.bind(dictBind)(v.value0)(function ($146) {
                      return Data_Tuple.fst(Data_Newtype.unwrap(newtypeProduct)(f($146)));
                  }))(Control_Bind.bind(dictBind1)(v.value1)(function ($147) {
                      return Data_Tuple.snd(Data_Newtype.unwrap(newtypeProduct)(f($147)));
                  }));
              };
          });
      };
  };
  var applicativeProduct = function (dictApplicative) {
      return function (dictApplicative1) {
          return new Control_Applicative.Applicative(function () {
              return applyProduct(dictApplicative.Apply0())(dictApplicative1.Apply0());
          }, function (a) {
              return product(Control_Applicative.pure(dictApplicative)(a))(Control_Applicative.pure(dictApplicative1)(a));
          });
      };
  };
  var monadProduct = function (dictMonad) {
      return function (dictMonad1) {
          return new Control_Monad.Monad(function () {
              return applicativeProduct(dictMonad.Applicative0())(dictMonad1.Applicative0());
          }, function () {
              return bindProduct(dictMonad.Bind1())(dictMonad1.Bind1());
          });
      };
  };
  exports["Product"] = Product;
  exports["product"] = product;
  exports["bihoistProduct"] = bihoistProduct;
  exports["newtypeProduct"] = newtypeProduct;
  exports["eqProduct"] = eqProduct;
  exports["eq1Product"] = eq1Product;
  exports["ordProduct"] = ordProduct;
  exports["ord1Product"] = ord1Product;
  exports["showProduct"] = showProduct;
  exports["functorProduct"] = functorProduct;
  exports["foldableProduct"] = foldableProduct;
  exports["traversableProduct"] = traversableProduct;
  exports["functorWithIndexProduct"] = functorWithIndexProduct;
  exports["foldableWithIndexProduct"] = foldableWithIndexProduct;
  exports["traversableWithIndexProduct"] = traversableWithIndexProduct;
  exports["applyProduct"] = applyProduct;
  exports["applicativeProduct"] = applicativeProduct;
  exports["bindProduct"] = bindProduct;
  exports["monadProduct"] = monadProduct;
})(PS["Data.Functor.Product"] = PS["Data.Functor.Product"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Const = PS["Data.Const"];
  var Data_Functor_Product = PS["Data.Functor.Product"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var product9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Functor_Product.product(c)(Data_Functor_Product.product(d)(Data_Functor_Product.product(e)(Data_Functor_Product.product(f)(Data_Functor_Product.product(g)(Data_Functor_Product.product(h)(Data_Functor_Product.product(i)(Data_Unit.unit)))))))));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var product8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Functor_Product.product(c)(Data_Functor_Product.product(d)(Data_Functor_Product.product(e)(Data_Functor_Product.product(f)(Data_Functor_Product.product(g)(Data_Functor_Product.product(h)(Data_Unit.unit))))))));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var product7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Functor_Product.product(c)(Data_Functor_Product.product(d)(Data_Functor_Product.product(e)(Data_Functor_Product.product(f)(Data_Functor_Product.product(g)(Data_Unit.unit)))))));
                          };
                      };
                  };
              };
          };
      };
  };
  var product6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Functor_Product.product(c)(Data_Functor_Product.product(d)(Data_Functor_Product.product(e)(Data_Functor_Product.product(f)(Data_Unit.unit))))));
                      };
                  };
              };
          };
      };
  };
  var product5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Functor_Product.product(c)(Data_Functor_Product.product(d)(Data_Functor_Product.product(e)(Data_Unit.unit)))));
                  };
              };
          };
      };
  };
  var product4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Functor_Product.product(c)(Data_Functor_Product.product(d)(Data_Unit.unit))));
              };
          };
      };
  };
  var product3 = function (a) {
      return function (b) {
          return function (c) {
              return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Functor_Product.product(c)(Data_Unit.unit)));
          };
      };
  };
  var product2 = function (a) {
      return function (b) {
          return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Unit.unit));
      };
  };
  var product10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (j) {
                                          return Data_Functor_Product.product(a)(Data_Functor_Product.product(b)(Data_Functor_Product.product(c)(Data_Functor_Product.product(d)(Data_Functor_Product.product(e)(Data_Functor_Product.product(f)(Data_Functor_Product.product(g)(Data_Functor_Product.product(h)(Data_Functor_Product.product(i)(Data_Functor_Product.product(j)(Data_Unit.unit))))))))));
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var product1 = function (a) {
      return Data_Functor_Product.product(a)(Data_Unit.unit);
  };
  var get9 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get8 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get7 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value0;
  };
  var get6 = function (v) {
      return v.value1.value1.value1.value1.value1.value0;
  };
  var get5 = function (v) {
      return v.value1.value1.value1.value1.value0;
  };
  var get4 = function (v) {
      return v.value1.value1.value1.value0;
  };
  var get3 = function (v) {
      return v.value1.value1.value0;
  };
  var get2 = function (v) {
      return v.value1.value0;
  };
  var get10 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get1 = function (v) {
      return v.value0;
  };
  exports["product1"] = product1;
  exports["product2"] = product2;
  exports["product3"] = product3;
  exports["product4"] = product4;
  exports["product5"] = product5;
  exports["product6"] = product6;
  exports["product7"] = product7;
  exports["product8"] = product8;
  exports["product9"] = product9;
  exports["product10"] = product10;
  exports["get1"] = get1;
  exports["get2"] = get2;
  exports["get3"] = get3;
  exports["get4"] = get4;
  exports["get5"] = get5;
  exports["get6"] = get6;
  exports["get7"] = get7;
  exports["get8"] = get8;
  exports["get9"] = get9;
  exports["get10"] = get10;
})(PS["Data.Functor.Product.Nested"] = PS["Data.Functor.Product.Nested"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var List = function (x) {
      return x;
  };
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var nil = List(Data_Lazy.defer(function (v) {
      return Nil.value;
  }));
  var newtypeNonEmptyList = new Data_Newtype.Newtype(function (n) {
      return n;
  }, NonEmptyList);
  var newtypeList = new Data_Newtype.Newtype(function (n) {
      return n;
  }, List);
  var step = function ($215) {
      return Data_Lazy.force(Data_Newtype.unwrap(newtypeList)($215));
  };
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return step(ys);
              };
              if (v instanceof Cons) {
                  return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
              };
              throw new Error("Failed pattern match at Data.List.Lazy.Types line 98, column 5 - line 98, column 21: " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return "Nil";
              };
              if (v instanceof Cons) {
                  return "(Cons " + (Data_Show.show(dictShow)(v.value0) + (" " + (go(step(v.value1)) + ")")));
              };
              throw new Error("Failed pattern match at Data.List.Lazy.Types line 64, column 5 - line 65, column 5: " + [ v.constructor.name ]);
          };
          return "fromStrict (" + (go(step(xs)) + ")");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_Lazy.showLazy(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow))))(v) + ")");
      });
  };
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, nil);
  var lazyList = new Control_Lazy.Lazy(function (f) {
      return List(Data_Lazy.defer(function ($216) {
          return step(f($216));
      }));
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return new Cons(f(v.value0), Data_Functor.map(functorList)(f)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy.Types line 107, column 5 - line 107, column 17: " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
      };
  });
  var functorNonEmptyList = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(Data_NonEmpty.functorNonEmpty(functorList))(f))(v);
      };
  });
  var eq1List = new Data_Eq.Eq1(function (dictEq) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      var $tco_var_v = $copy_v;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v, v1) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              $tco_done = true;
                              return true;
                          };
                          if (v instanceof Cons && (v1 instanceof Cons && Data_Eq.eq(dictEq)(v.value0)(v1.value0))) {
                              $tco_var_v = step(v.value1);
                              $copy_v1 = step(v1.value1);
                              return;
                          };
                          $tco_done = true;
                          return false;
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return go(step(xs))(step(ys));
          };
      };
  });
  var eqList = function (dictEq) {
      return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
  };
  var eqNonEmptyList = function (dictEq) {
      return Data_Lazy.eqLazy(Data_NonEmpty.eqNonEmpty(eq1List)(dictEq));
  };
  var ord1List = new Data_Ord.Ord1(function () {
      return eq1List;
  }, function (dictOrd) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      var $tco_var_v = $copy_v;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v, v1) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.EQ.value;
                          };
                          if (v instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.LT.value;
                          };
                          if (v1 instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.GT.value;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_var_v = step(v.value1);
                                  $copy_v1 = step(v1.value1);
                                  return;
                              };
                              $tco_done = true;
                              return v2;
                          };
                          throw new Error("Failed pattern match at Data.List.Lazy.Types line 84, column 5 - line 84, column 20: " + [ v.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return go(step(xs))(step(ys));
          };
      };
  });
  var ordList = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqList(dictOrd.Eq0());
      }, Data_Ord.compare1(ord1List)(dictOrd));
  };
  var ordNonEmptyList = function (dictOrd) {
      return Data_Lazy.ordLazy(Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd));
  };
  var cons = function (x) {
      return function (xs) {
          return List(Data_Lazy.defer(function (v) {
              return new Cons(x, xs);
          }));
      };
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (b) {
              return function (a) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (op) {
      var go = function ($copy_b) {
          return function ($copy_xs) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, xs) {
                  var v = step(xs);
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = op(b)(v.value0);
                      $copy_xs = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types line 122, column 7 - line 124, column 40: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_xs);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (op) {
      return function (z) {
          return function (xs) {
              var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
          };
      };
  });
  var extendList = new Control_Extend.Extend(function () {
      return functorList;
  }, function (f) {
      return function (l) {
          var go = function (a) {
              return function (v) {
                  var acc$prime = cons(a)(v.acc);
                  return {
                      val: cons(f(acc$prime))(v.val),
                      acc: acc$prime
                  };
              };
          };
          var v = step(l);
          if (v instanceof Nil) {
              return nil;
          };
          if (v instanceof Cons) {
              return cons(f(l))((Data_Foldable.foldr(foldableList)(go)({
                  val: nil,
                  acc: nil
              })(v.value1)).val);
          };
          throw new Error("Failed pattern match at Data.List.Lazy.Types line 194, column 5 - line 197, column 55: " + [ v.constructor.name ]);
      };
  });
  var extendNonEmptyList = new Control_Extend.Extend(function () {
      return functorNonEmptyList;
  }, function (f) {
      return function (v) {
          var go = function (a) {
              return function (v1) {
                  return {
                      val: cons(f(Data_Lazy.defer(function (v2) {
                          return new Data_NonEmpty.NonEmpty(a, v1.acc);
                      })))(v1.val),
                      acc: cons(a)(v1.acc)
                  };
              };
          };
          var v1 = Data_Lazy.force(v);
          return NonEmptyList(Data_Lazy.defer(function (v2) {
              return new Data_NonEmpty.NonEmpty(f(v), (Data_Foldable.foldr(foldableList)(go)({
                  val: nil,
                  acc: nil
              })(v1.value1)).val);
          }));
      };
  });
  var foldableNonEmptyList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return Data_Foldable.foldMap(Data_NonEmpty.foldableNonEmpty(foldableList))(dictMonoid)(f)(Data_Lazy.force(v));
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_Foldable.foldl(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_Foldable.foldr(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
          };
      };
  });
  var foldableWithIndexList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableList;
  }, function (dictMonoid) {
      return function (f) {
          return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
              return function (acc) {
                  return function ($217) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(i)($217));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      return function (acc) {
          return function ($218) {
              return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v) {
                  return function (a) {
                      return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
                  };
              })(new Data_Tuple.Tuple(0, acc))($218));
          };
      };
  }, function (f) {
      return function (b) {
          return function (xs) {
              var v = (function () {
                  var rev = Data_Foldable.foldl(foldableList)(function (v1) {
                      return function (a) {
                          return new Data_Tuple.Tuple(v1.value0 + 1 | 0, cons(a)(v1.value1));
                      };
                  });
                  return rev(new Data_Tuple.Tuple(0, nil))(xs);
              })();
              return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v1) {
                  return function (a) {
                      return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
                  };
              })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
          };
      };
  });
  var foldableWithIndexNonEmptyList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableNonEmptyList;
  }, function (dictMonoid) {
      return function (f) {
          return function (v) {
              return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)(function ($219) {
                  return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($219));
              })(Data_Lazy.force(v));
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function ($220) {
                  return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($220));
              })(b)(Data_Lazy.force(v));
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function ($221) {
                  return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($221));
              })(b)(Data_Lazy.force(v));
          };
      };
  });
  var functorWithIndexList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorList;
  }, function (f) {
      return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
          return function (x) {
              return function (acc) {
                  return cons(f(i)(x))(acc);
              };
          };
      })(nil);
  });
  var functorWithIndexNonEmptyList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorNonEmptyList;
  }, function (f) {
      return function (v) {
          return NonEmptyList(Data_Lazy.defer(function (v1) {
              return Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))(function ($222) {
                  return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($222));
              })(Data_Lazy.force(v));
          }));
      };
  });
  var toList = function (v) {
      return Control_Lazy.defer(lazyList)(function (v1) {
          var v2 = Data_Lazy.force(v);
          return cons(v2.value0)(v2.value1);
      });
  };
  var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
      return function (as$prime) {
          var v1 = Data_Lazy.force(v);
          return Data_Lazy.defer(function (v2) {
              return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(toList(as$prime)));
          });
      };
  });
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return Data_Foldable.foldr(foldableList)(function (a) {
              return function (b) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(f(a)))(b);
              };
          })(Control_Applicative.pure(dictApplicative)(nil));
      };
  });
  var traversableNonEmptyList = new Data_Traversable.Traversable(function () {
      return foldableNonEmptyList;
  }, function () {
      return functorNonEmptyList;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (xxs) {
              return NonEmptyList(Data_Lazy.defer(function (v1) {
                  return xxs;
              }));
          })(Data_Traversable.sequence(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(Data_Lazy.force(v)));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (xxs) {
                  return NonEmptyList(Data_Lazy.defer(function (v1) {
                      return xxs;
                  }));
              })(Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(f)(Data_Lazy.force(v)));
          };
      };
  });
  var traversableWithIndexList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexList;
  }, function () {
      return functorWithIndexList;
  }, function () {
      return traversableList;
  }, function (dictApplicative) {
      return function (f) {
          return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
              return function (a) {
                  return function (b) {
                      return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(f(i)(a)))(b);
                  };
              };
          })(Control_Applicative.pure(dictApplicative)(nil));
      };
  });
  var traversableWithIndexNonEmptyList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexNonEmptyList;
  }, function () {
      return functorWithIndexNonEmptyList;
  }, function () {
      return traversableNonEmptyList;
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (xxs) {
                  return NonEmptyList(Data_Lazy.defer(function (v1) {
                      return xxs;
                  }));
              })(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)(function ($223) {
                  return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($223));
              })(Data_Lazy.force(v)));
          };
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1((function () {
      var go = function (f) {
          return function (b) {
              return Control_Lazy.defer(lazyList)(function (v) {
                  var v1 = f(b);
                  if (v1.value1 instanceof Data_Maybe.Just) {
                      return cons(v1.value0)(go(f)(v1.value1.value0));
                  };
                  if (v1.value1 instanceof Data_Maybe.Nothing) {
                      return cons(v1.value0)(nil);
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types line 146, column 28 - line 148, column 33: " + [ v1.constructor.name ]);
              });
          };
      };
      return go;
  })());
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, (function () {
      var go = function (f) {
          return function (b) {
              return Control_Lazy.defer(lazyList)(function (v) {
                  var v1 = f(b);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return nil;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return cons(v1.value0.value0)(go(f)(v1.value0.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types line 152, column 28 - line 154, column 39: " + [ v1.constructor.name ]);
              });
          };
      };
      return go;
  })());
  var unfoldable1NonEmptyList = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          return NonEmptyList(Data_Lazy.defer(function (v) {
              return Data_Unfoldable1.unfoldr1(Data_NonEmpty.unfoldable1NonEmpty(unfoldableList))(f)(b);
          }));
      };
  });
  var comonadNonEmptyList = new Control_Comonad.Comonad(function () {
      return extendNonEmptyList;
  }, function (v) {
      return Data_NonEmpty.head(Data_Lazy.force(v));
  });
  var monadList = new Control_Monad.Monad(function () {
      return applicativeList;
  }, function () {
      return bindList;
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, function (xs) {
      return function (f) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return step(Data_Semigroup.append(semigroupList)(f(v.value0))(Control_Bind.bind(bindList)(v.value1)(f)));
              };
              throw new Error("Failed pattern match at Data.List.Lazy.Types line 175, column 5 - line 175, column 17: " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, Control_Monad.ap(monadList));
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return cons(a)(nil);
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          var v2 = Data_Lazy.force(v1);
          var v3 = Data_Lazy.force(v);
          return Data_Lazy.defer(function (v4) {
              return new Data_NonEmpty.NonEmpty(v3.value0(v2.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v3.value1)(cons(v2.value0)(nil)))(Control_Apply.apply(applyList)(cons(v3.value0)(v3.value1))(v2.value1)));
          });
      };
  });
  var bindNonEmptyList = new Control_Bind.Bind(function () {
      return applyNonEmptyList;
  }, function (v) {
      return function (f) {
          var v1 = Data_Lazy.force(v);
          var v2 = Data_Lazy.force(Data_Newtype.unwrap(newtypeNonEmptyList)(f(v1.value0)));
          return Data_Lazy.defer(function (v3) {
              return new Data_NonEmpty.NonEmpty(v2.value0, Data_Semigroup.append(semigroupList)(v2.value1)(Control_Bind.bind(bindList)(v1.value1)(function ($224) {
                  return toList(f($224));
              })));
          });
      };
  });
  var altNonEmptyList = new Control_Alt.Alt(function () {
      return functorNonEmptyList;
  }, Data_Semigroup.append(semigroupNonEmptyList));
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, nil);
  var alternativeList = new Control_Alternative.Alternative(function () {
      return applicativeList;
  }, function () {
      return plusList;
  });
  var monadZeroList = new Control_MonadZero.MonadZero(function () {
      return alternativeList;
  }, function () {
      return monadList;
  });
  var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
      return monadZeroList;
  });
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, function (a) {
      return Data_Lazy.defer(function (v) {
          return Data_NonEmpty.singleton(plusList)(a);
      });
  });
  var monadNonEmptyList = new Control_Monad.Monad(function () {
      return applicativeNonEmptyList;
  }, function () {
      return bindNonEmptyList;
  });
  exports["List"] = List;
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["step"] = step;
  exports["nil"] = nil;
  exports["cons"] = cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["toList"] = toList;
  exports["newtypeList"] = newtypeList;
  exports["showList"] = showList;
  exports["eqList"] = eqList;
  exports["eq1List"] = eq1List;
  exports["ordList"] = ordList;
  exports["ord1List"] = ord1List;
  exports["lazyList"] = lazyList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["functorWithIndexList"] = functorWithIndexList;
  exports["foldableList"] = foldableList;
  exports["foldableWithIndexList"] = foldableWithIndexList;
  exports["unfoldable1List"] = unfoldable1List;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["traversableWithIndexList"] = traversableWithIndexList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["monadList"] = monadList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["alternativeList"] = alternativeList;
  exports["monadZeroList"] = monadZeroList;
  exports["monadPlusList"] = monadPlusList;
  exports["extendList"] = extendList;
  exports["newtypeNonEmptyList"] = newtypeNonEmptyList;
  exports["eqNonEmptyList"] = eqNonEmptyList;
  exports["ordNonEmptyList"] = ordNonEmptyList;
  exports["showNonEmptyList"] = showNonEmptyList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applyNonEmptyList"] = applyNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["bindNonEmptyList"] = bindNonEmptyList;
  exports["monadNonEmptyList"] = monadNonEmptyList;
  exports["altNonEmptyList"] = altNonEmptyList;
  exports["extendNonEmptyList"] = extendNonEmptyList;
  exports["comonadNonEmptyList"] = comonadNonEmptyList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
  exports["traversableNonEmptyList"] = traversableNonEmptyList;
  exports["unfoldable1NonEmptyList"] = unfoldable1NonEmptyList;
  exports["functorWithIndexNonEmptyList"] = functorWithIndexNonEmptyList;
  exports["foldableWithIndexNonEmptyList"] = foldableWithIndexNonEmptyList;
  exports["traversableWithIndexNonEmptyList"] = traversableWithIndexNonEmptyList;
})(PS["Data.List.Lazy.Types"] = PS["Data.List.Lazy.Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];                 
  var Pattern = function (x) {
      return x;
  };
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (v) {
                  return function (v1) {
                      if (v instanceof Data_List_Lazy_Types.Nil) {
                          return Data_List_Lazy_Types.Nil.value;
                      };
                      if (v1 instanceof Data_List_Lazy_Types.Nil) {
                          return Data_List_Lazy_Types.Nil.value;
                      };
                      if (v instanceof Data_List_Lazy_Types.Cons && v1 instanceof Data_List_Lazy_Types.Cons) {
                          return new Data_List_Lazy_Types.Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 692, column 3 - line 692, column 35: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Control_Apply.apply(Data_Lazy.applyLazy)(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs)))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(ys));
          };
      };
  };
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_List_Lazy_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var updateAt = function (n) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_List_Lazy_Types.Nil) {
                          return Data_List_Lazy_Types.Nil.value;
                      };
                      if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                          return new Data_List_Lazy_Types.Cons(x, v1.value1);
                      };
                      if (v1 instanceof Data_List_Lazy_Types.Cons) {
                          return new Data_List_Lazy_Types.Cons(v1.value0, updateAt(v - 1 | 0)(x)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 366, column 3 - line 366, column 17: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
          };
      };
  };
  var unzip = Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(function (v) {
      return function (v1) {
          return new Data_Tuple.Tuple(Data_List_Lazy_Types.cons(v.value0)(v1.value0), Data_List_Lazy_Types.cons(v.value1)(v1.value1));
      };
  })(new Data_Tuple.Tuple(Data_List_Lazy_Types.nil, Data_List_Lazy_Types.nil));
  var uncons = function (xs) {
      var v = Data_List_Lazy_Types.step(xs);
      if (v instanceof Data_List_Lazy_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Lazy_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List.Lazy line 284, column 13 - line 286, column 44: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var takeWhile = function (p) {
      var go = function (v) {
          if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
              return new Data_List_Lazy_Types.Cons(v.value0, takeWhile(p)(v.value1));
          };
          return Data_List_Lazy_Types.Nil.value;
      };
      return function ($245) {
          return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($245)));
      };
  };
  var take = function (n) {
      var go = function (v) {
          return function (v1) {
              if (v1 instanceof Data_List_Lazy_Types.Nil) {
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v1 instanceof Data_List_Lazy_Types.Cons) {
                  return new Data_List_Lazy_Types.Cons(v1.value0, take(v - 1 | 0)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 516, column 3 - line 516, column 32: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      var $123 = n <= 0;
      if ($123) {
          return Data_Function["const"](Data_List_Lazy_Types.nil);
      };
      return function ($246) {
          return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($246)));
      };
  };
  var tail = function (xs) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.tail;
      })(uncons(xs));
  };
  var stripPrefix = function (dictEq) {
      return function (v) {
          return function (s) {
              var go = function (prefix) {
                  return function (input) {
                      var v1 = Data_List_Lazy_Types.step(prefix);
                      if (v1 instanceof Data_List_Lazy_Types.Nil) {
                          return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
                      };
                      if (v1 instanceof Data_List_Lazy_Types.Cons) {
                          var v2 = Data_List_Lazy_Types.step(input);
                          if (v2 instanceof Data_List_Lazy_Types.Cons && Data_Eq.eq(dictEq)(v1.value0)(v2.value0)) {
                              return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
                                  a: v1.value1,
                                  b: v2.value1
                              }));
                          };
                          return Data_Maybe.Nothing.value;
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 498, column 21 - line 502, column 19: " + [ v1.constructor.name ]);
                  };
              };
              return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
          };
      };
  };
  var span = function (p) {
      return function (xs) {
          var v = uncons(xs);
          if (v instanceof Data_Maybe.Just && p(v.value0.head)) {
              var v1 = span(p)(v.value0.tail);
              return {
                  init: Data_List_Lazy_Types.cons(v.value0.head)(v1.init),
                  rest: v1.rest
              };
          };
          return {
              init: Data_List_Lazy_Types.nil,
              rest: xs
          };
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.cons(x)(Data_List_Lazy_Types.nil))(xs);
      };
  };
  var singleton = function (a) {
      return Data_List_Lazy_Types.cons(a)(Data_List_Lazy_Types.nil);
  };
  var showPattern = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Pattern " + (Data_Show.show(Data_List_Lazy_Types.showList(dictShow))(v) + ")");
      });
  };
  var reverse = function (xs) {
      return Control_Lazy.defer(Data_List_Lazy_Types.lazyList)(function (v) {
          return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(Data_List_Lazy_Types.cons))(Data_List_Lazy_Types.nil)(xs);
      });
  };
  var replicateM = function (dictMonad) {
      return function (n) {
          return function (m) {
              if (n < 1) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
              };
              if (Data_Boolean.otherwise) {
                  return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                      return Control_Bind.bind(dictMonad.Bind1())(replicateM(dictMonad)(n - 1 | 0)(m))(function (v1) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.cons(v)(v1));
                      });
                  });
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 160, column 1 - line 160, column 62: " + [ n.constructor.name, m.constructor.name ]);
          };
      };
  };
  var repeat = function (x) {
      return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
          return Data_List_Lazy_Types.cons(x)(xs);
      });
  };
  var replicate = function (i) {
      return function (xs) {
          return take(i)(repeat(xs));
      };
  };
  var range = function (start) {
      return function (end) {
          if (start > end) {
              var g = function (x) {
                  if (x >= end) {
                      return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x - 1 | 0));
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 147, column 13 - line 148, column 38: " + [ x.constructor.name ]);
              };
              return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(g)(start);
          };
          if (Data_Boolean.otherwise) {
              var f = function (x) {
                  if (x <= end) {
                      return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x + 1 | 0));
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 152, column 5 - line 153, column 30: " + [ x.constructor.name ]);
              };
              return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(f)(start);
          };
          throw new Error("Failed pattern match at Data.List.Lazy line 144, column 1 - line 144, column 32: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var partition = function (f) {
      var go = function (x) {
          return function (v) {
              var $150 = f(x);
              if ($150) {
                  return {
                      yes: Data_List_Lazy_Types.cons(x)(v.yes),
                      no: v.no
                  };
              };
              return {
                  yes: v.yes,
                  no: Data_List_Lazy_Types.cons(x)(v.no)
              };
          };
      };
      return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(go)({
          yes: Data_List_Lazy_Types.nil,
          no: Data_List_Lazy_Types.nil
      });
  };
  var $$null = function ($247) {
      return Data_Maybe.isNothing(uncons($247));
  };
  var newtypePattern = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Pattern);
  var mapMaybe = function (f) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Lazy_Types.Nil) {
                  $tco_done = true;
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v instanceof Data_List_Lazy_Types.Cons) {
                  var v1 = f(v.value0);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      $copy_v = Data_List_Lazy_Types.step(v.value1);
                      return;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      $tco_done = true;
                      return new Data_List_Lazy_Types.Cons(v1.value0, mapMaybe(f)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 459, column 5 - line 461, column 39: " + [ v1.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 457, column 3 - line 457, column 15: " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($248) {
          return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($248)));
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Lazy_Types.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Lazy_Types.nil));
          };
      };
  };
  var length = Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(function (l) {
      return function (v) {
          return l + 1 | 0;
      };
  })(0);
  var last = (function () {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Lazy_Types.Cons) {
                  if ($$null(v.value1)) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (Data_Boolean.otherwise) {
                      $copy_v = Data_List_Lazy_Types.step(v.value1);
                      return;
                  };
              };
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($249) {
          return go(Data_List_Lazy_Types.step($249));
      };
  })();
  var iterate = function (f) {
      return function (x) {
          return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
              return Data_List_Lazy_Types.cons(x)(Data_Functor.map(Data_List_Lazy_Types.functorList)(f)(xs));
          });
      };
  };
  var insertAt = function (v) {
      return function (x) {
          return function (xs) {
              if (v === 0) {
                  return Data_List_Lazy_Types.cons(x)(xs);
              };
              var go = function (v1) {
                  if (v1 instanceof Data_List_Lazy_Types.Nil) {
                      return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
                  };
                  if (v1 instanceof Data_List_Lazy_Types.Cons) {
                      return new Data_List_Lazy_Types.Cons(v1.value0, insertAt(v - 1 | 0)(x)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 339, column 3 - line 339, column 22: " + [ v1.constructor.name ]);
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
          };
      };
  };
  var init = (function () {
      var go = function (v) {
          if (v instanceof Data_List_Lazy_Types.Cons) {
              if ($$null(v.value1)) {
                  return new Data_Maybe.Just(Data_List_Lazy_Types.nil);
              };
              if (Data_Boolean.otherwise) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(Data_List_Lazy_Types.cons(v.value0))(go(Data_List_Lazy_Types.step(v.value1)));
              };
          };
          return Data_Maybe.Nothing.value;
      };
      return function ($250) {
          return go(Data_List_Lazy_Types.step($250));
      };
  })();
  var index = function (xs) {
      var go = function ($copy_v) {
          return function ($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                  if (v instanceof Data_List_Lazy_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Lazy_Types.Cons && v1 === 0) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Data_List_Lazy_Types.Cons) {
                      $tco_var_v = Data_List_Lazy_Types.step(v.value1);
                      $copy_v1 = v1 - 1 | 0;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 298, column 3 - line 298, column 21: " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Lazy_Types.step(xs));
  };
  var head = function (xs) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.head;
      })(uncons(xs));
  };
  var transpose = function (xs) {
      var v = uncons(xs);
      if (v instanceof Data_Maybe.Nothing) {
          return xs;
      };
      if (v instanceof Data_Maybe.Just) {
          var v1 = uncons(v.value0.head);
          if (v1 instanceof Data_Maybe.Nothing) {
              return transpose(v.value0.tail);
          };
          if (v1 instanceof Data_Maybe.Just) {
              return Data_List_Lazy_Types.cons(Data_List_Lazy_Types.cons(v1.value0.head)(mapMaybe(head)(v.value0.tail)))(transpose(Data_List_Lazy_Types.cons(v1.value0.tail)(mapMaybe(tail)(v.value0.tail))));
          };
          throw new Error("Failed pattern match at Data.List.Lazy line 733, column 7 - line 737, column 72: " + [ v1.constructor.name ]);
      };
      throw new Error("Failed pattern match at Data.List.Lazy line 729, column 3 - line 737, column 72: " + [ v.constructor.name ]);
  };
  var groupBy = function (eq) {
      var go = function (v) {
          if (v instanceof Data_List_Lazy_Types.Nil) {
              return Data_List_Lazy_Types.Nil.value;
          };
          if (v instanceof Data_List_Lazy_Types.Cons) {
              var v1 = span(eq(v.value0))(v.value1);
              return new Data_List_Lazy_Types.Cons(Data_Lazy.defer(function (v2) {
                  return new Data_NonEmpty.NonEmpty(v.value0, v1.init);
              }), groupBy(eq)(v1.rest));
          };
          throw new Error("Failed pattern match at Data.List.Lazy line 587, column 3 - line 587, column 15: " + [ v.constructor.name ]);
      };
      return function ($251) {
          return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($251)));
      };
  };
  var group = function (dictEq) {
      return groupBy(Data_Eq.eq(dictEq));
  };
  var fromStep = function ($252) {
      return Data_List_Lazy_Types.List(Control_Applicative.pure(Data_Lazy.applicativeLazy)($252));
  };
  var insertBy = function (cmp) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Data_List_Lazy_Types.Nil) {
                      return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
                  };
                  if (v instanceof Data_List_Lazy_Types.Cons) {
                      var v1 = cmp(x)(v.value0);
                      if (v1 instanceof Data_Ordering.GT) {
                          return new Data_List_Lazy_Types.Cons(v.value0, insertBy(cmp)(x)(v.value1));
                      };
                      return new Data_List_Lazy_Types.Cons(x, fromStep(v));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 234, column 3 - line 234, column 22: " + [ v.constructor.name ]);
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.nil);
  };
  var foldrLazy = function (dictLazy) {
      return function (op) {
          return function (z) {
              var go = function (xs) {
                  var v = Data_List_Lazy_Types.step(xs);
                  if (v instanceof Data_List_Lazy_Types.Cons) {
                      return Control_Lazy.defer(dictLazy)(function (v1) {
                          return op(v.value0)(go(v.value1));
                      });
                  };
                  if (v instanceof Data_List_Lazy_Types.Nil) {
                      return z;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 755, column 13 - line 757, column 14: " + [ v.constructor.name ]);
              };
              return go;
          };
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return function (xs) {
                  var v = uncons(xs);
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(a);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(dictMonad.Bind1())(f(a)(v.value0.head))(function (a$prime) {
                          return foldM(dictMonad)(f)(a$prime)(v.value0.tail);
                      });
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 746, column 5 - line 749, column 54: " + [ v.constructor.name ]);
              };
          };
      };
  };
  var findIndex = function (fn) {
      var go = function (n) {
          return function (list) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(uncons(list))(function (v) {
                  var $203 = fn(v.head);
                  if ($203) {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(n);
                  };
                  return go(n + 1 | 0)(v.tail);
              });
          };
      };
      return go(0);
  };
  var findLastIndex = function (fn) {
      return function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
              return (length(xs) - 1 | 0) - v | 0;
          })(findIndex(fn)(reverse(xs)));
      };
  };
  var filterM = function (dictMonad) {
      return function (p) {
          return function (list) {
              var v = uncons(list);
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Bind.bind(dictMonad.Bind1())(p(v.value0.head))(function (v1) {
                      return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(p)(v.value0.tail))(function (v2) {
                          return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                              if (v1) {
                                  return Data_List_Lazy_Types.cons(v.value0.head)(v2);
                              };
                              return v2;
                          })());
                      });
                  });
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 442, column 5 - line 447, column 48: " + [ v.constructor.name ]);
          };
      };
  };
  var filter = function (p) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Lazy_Types.Nil) {
                  $tco_done = true;
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v instanceof Data_List_Lazy_Types.Cons) {
                  if (p(v.value0)) {
                      $tco_done = true;
                      return new Data_List_Lazy_Types.Cons(v.value0, filter(p)(v.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      $copy_v = Data_List_Lazy_Types.step(v.value1);
                      return;
                  };
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 427, column 3 - line 427, column 15: " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($253) {
          return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($253)));
      };
  };
  var intersectBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return filter(function (x) {
                  return Data_Foldable.any(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(eq(x))(ys);
              })(xs);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var nubBy = function (eq) {
      var go = function (v) {
          if (v instanceof Data_List_Lazy_Types.Nil) {
              return Data_List_Lazy_Types.Nil.value;
          };
          if (v instanceof Data_List_Lazy_Types.Cons) {
              return new Data_List_Lazy_Types.Cons(v.value0, nubBy(eq)(filter(function (y) {
                  return !eq(v.value0)(y);
              })(v.value1)));
          };
          throw new Error("Failed pattern match at Data.List.Lazy line 620, column 3 - line 620, column 15: " + [ v.constructor.name ]);
      };
      return function ($254) {
          return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($254)));
      };
  };
  var nub = function (dictEq) {
      return nubBy(Data_Eq.eq(dictEq));
  };
  var eqPattern = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              return Data_Eq.eq(Data_List_Lazy_Types.eqList(dictEq))(x)(y);
          };
      });
  };
  var ordPattern = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqPattern(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              return Data_Ord.compare(Data_List_Lazy_Types.ordList(dictOrd))(x)(y);
          };
      });
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
                  $copy_v = Data_List_Lazy_Types.step(v.value1);
                  return;
              };
              $tco_done = true;
              return fromStep(v);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($255) {
          return go(Data_List_Lazy_Types.step($255));
      };
  };
  var drop = function (n) {
      var go = function ($copy_v) {
          return function ($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                  if (v === 0) {
                      $tco_done = true;
                      return v1;
                  };
                  if (v1 instanceof Data_List_Lazy_Types.Nil) {
                      $tco_done = true;
                      return Data_List_Lazy_Types.Nil.value;
                  };
                  if (v1 instanceof Data_List_Lazy_Types.Cons) {
                      $tco_var_v = v - 1 | 0;
                      $copy_v1 = Data_List_Lazy_Types.step(v1.value1);
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 535, column 3 - line 535, column 15: " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
              };
              return $tco_result;
          };
      };
      return function ($256) {
          return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($256)));
      };
  };
  var slice = function (start) {
      return function (end) {
          return function (xs) {
              return take(end - start | 0)(drop(start)(xs));
          };
      };
  };
  var deleteBy = function (eq) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Data_List_Lazy_Types.Nil) {
                      return Data_List_Lazy_Types.Nil.value;
                  };
                  if (v instanceof Data_List_Lazy_Types.Cons) {
                      if (eq(x)(v.value0)) {
                          return Data_List_Lazy_Types.step(v.value1);
                      };
                      if (Data_Boolean.otherwise) {
                          return new Data_List_Lazy_Types.Cons(v.value0, deleteBy(eq)(x)(v.value1));
                      };
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 649, column 3 - line 649, column 15: " + [ v.constructor.name ]);
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  var deleteAt = function (n) {
      return function (xs) {
          var go = function (v) {
              return function (v1) {
                  if (v1 instanceof Data_List_Lazy_Types.Nil) {
                      return Data_List_Lazy_Types.Nil.value;
                  };
                  if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                      return Data_List_Lazy_Types.step(v1.value1);
                  };
                  if (v1 instanceof Data_List_Lazy_Types.Cons) {
                      return new Data_List_Lazy_Types.Cons(v1.value0, deleteAt(v - 1 | 0)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 352, column 3 - line 352, column 17: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
  };
  var cycle = function (xs) {
      return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (ys) {
          return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(ys);
      });
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Lazy_Types.bindList));
  var concat = function (v) {
      return Control_Bind.bind(Data_List_Lazy_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  var alterAt = function (n) {
      return function (f) {
          return function (xs) {
              var go = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_List_Lazy_Types.Nil) {
                          return Data_List_Lazy_Types.Nil.value;
                      };
                      if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                          var v2 = f(v1.value0);
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return Data_List_Lazy_Types.step(v1.value1);
                          };
                          if (v2 instanceof Data_Maybe.Just) {
                              return new Data_List_Lazy_Types.Cons(v2.value0, v1.value1);
                          };
                          throw new Error("Failed pattern match at Data.List.Lazy line 393, column 22 - line 395, column 26: " + [ v2.constructor.name ]);
                      };
                      if (v1 instanceof Data_List_Lazy_Types.Cons) {
                          return new Data_List_Lazy_Types.Cons(v1.value0, alterAt(v - 1 | 0)(f)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 392, column 3 - line 392, column 17: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
          };
      };
  };
  var modifyAt = function (n) {
      return function (f) {
          return alterAt(n)(function ($257) {
              return Data_Maybe.Just.create(f($257));
          });
      };
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["range"] = range;
  exports["replicate"] = replicate;
  exports["replicateM"] = replicateM;
  exports["some"] = some;
  exports["many"] = many;
  exports["repeat"] = repeat;
  exports["iterate"] = iterate;
  exports["cycle"] = cycle;
  exports["null"] = $$null;
  exports["length"] = length;
  exports["snoc"] = snoc;
  exports["insert"] = insert;
  exports["insertBy"] = insertBy;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["elemIndex"] = elemIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["insertAt"] = insertAt;
  exports["deleteAt"] = deleteAt;
  exports["updateAt"] = updateAt;
  exports["modifyAt"] = modifyAt;
  exports["alterAt"] = alterAt;
  exports["reverse"] = reverse;
  exports["concat"] = concat;
  exports["concatMap"] = concatMap;
  exports["filter"] = filter;
  exports["filterM"] = filterM;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["Pattern"] = Pattern;
  exports["stripPrefix"] = stripPrefix;
  exports["slice"] = slice;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["span"] = span;
  exports["group"] = group;
  exports["groupBy"] = groupBy;
  exports["partition"] = partition;
  exports["nub"] = nub;
  exports["nubBy"] = nubBy;
  exports["union"] = union;
  exports["unionBy"] = unionBy;
  exports["delete"] = $$delete;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["intersect"] = intersect;
  exports["intersectBy"] = intersectBy;
  exports["zipWith"] = zipWith;
  exports["zipWithA"] = zipWithA;
  exports["zip"] = zip;
  exports["unzip"] = unzip;
  exports["transpose"] = transpose;
  exports["foldM"] = foldM;
  exports["foldrLazy"] = foldrLazy;
  exports["eqPattern"] = eqPattern;
  exports["ordPattern"] = ordPattern;
  exports["newtypePattern"] = newtypePattern;
  exports["showPattern"] = showPattern;
})(PS["Data.List.Lazy"] = PS["Data.List.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal line 602, column 1 - line 602, column 40: " + [ v.constructor.name ]);
  };
  var size = function (v) {
      if (v instanceof Leaf) {
          return 0;
      };
      if (v instanceof Two) {
          return (1 + size(v.value0) | 0) + size(v.value3) | 0;
      };
      if (v instanceof Three) {
          return ((2 + size(v.value0) | 0) + size(v.value3) | 0) + size(v.value6) | 0;
      };
      throw new Error("Failed pattern match at Data.Map.Internal line 634, column 1 - line 634, column 35: " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 567, column 18 - line 576, column 71: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 566, column 3 - line 566, column 19: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);
  var toUnfoldableUnordered = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, v.value1))));
                      };
                      if (v.value0 instanceof Three) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(v.value0.value6, v.value1))))));
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 588, column 18 - line 593, column 77: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 587, column 3 - line 587, column 19: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var showTree = function (dictShow) {
      return function (dictShow1) {
          return function (v) {
              if (v instanceof Leaf) {
                  return "Leaf";
              };
              if (v instanceof Two) {
                  return "Two (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + ")")))))));
              };
              if (v instanceof Three) {
                  return "Three (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + (") (" + (Data_Show.show(dictShow)(v.value4) + (") (" + (Data_Show.show(dictShow1)(v.value5) + (") (" + (showTree(dictShow)(dictShow1)(v.value6) + ")")))))))))))));
              };
              throw new Error("Failed pattern match at Data.Map.Internal line 150, column 1 - line 150, column 62: " + [ v.constructor.name ]);
          };
      };
  };
  var showMap = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (m) {
              return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1)))(toAscArray(m)) + ")");
          });
      };
  };
  var lookupLE = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function (v) {
              if (v instanceof Leaf) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Two) {
                  var v2 = comp(k)(v.value1);
                  if (v2 instanceof Data_Ordering.EQ) {
                      return new Data_Maybe.Just({
                          key: v.value1,
                          value: v.value2
                      });
                  };
                  if (v2 instanceof Data_Ordering.GT) {
                      return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                          key: v.value1,
                          value: v.value2
                      })(go(v.value3)));
                  };
                  if (v2 instanceof Data_Ordering.LT) {
                      return go(v.value0);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 222, column 33 - line 225, column 20: " + [ v2.constructor.name ]);
              };
              if (v instanceof Three) {
                  var v3 = comp(k)(v.value4);
                  if (v3 instanceof Data_Ordering.EQ) {
                      return new Data_Maybe.Just({
                          key: v.value4,
                          value: v.value5
                      });
                  };
                  if (v3 instanceof Data_Ordering.GT) {
                      return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                          key: v.value4,
                          value: v.value5
                      })(go(v.value6)));
                  };
                  if (v3 instanceof Data_Ordering.LT) {
                      return go(new Two(v.value0, v.value1, v.value2, v.value3));
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 226, column 45 - line 229, column 36: " + [ v3.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Map.Internal line 221, column 5 - line 221, column 22: " + [ v.constructor.name ]);
          };
          return go;
      };
  };
  var lookupGE = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function (v) {
              if (v instanceof Leaf) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Two) {
                  var v2 = comp(k)(v.value1);
                  if (v2 instanceof Data_Ordering.EQ) {
                      return new Data_Maybe.Just({
                          key: v.value1,
                          value: v.value2
                      });
                  };
                  if (v2 instanceof Data_Ordering.LT) {
                      return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                          key: v.value1,
                          value: v.value2
                      })(go(v.value0)));
                  };
                  if (v2 instanceof Data_Ordering.GT) {
                      return go(v.value3);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 256, column 33 - line 259, column 21: " + [ v2.constructor.name ]);
              };
              if (v instanceof Three) {
                  var v3 = comp(k)(v.value1);
                  if (v3 instanceof Data_Ordering.EQ) {
                      return new Data_Maybe.Just({
                          key: v.value1,
                          value: v.value2
                      });
                  };
                  if (v3 instanceof Data_Ordering.LT) {
                      return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                          key: v.value1,
                          value: v.value2
                      })(go(v.value0)));
                  };
                  if (v3 instanceof Data_Ordering.GT) {
                      return go(new Two(v.value3, v.value4, v.value5, v.value6));
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 260, column 45 - line 263, column 37: " + [ v3.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Map.Internal line 255, column 5 - line 255, column 22: " + [ v.constructor.name ]);
          };
          return go;
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 197, column 5 - line 197, column 22: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal line 596, column 1 - line 596, column 38: " + [ v.constructor.name ]);
  };
  var isSubmap = function (dictOrd) {
      return function (dictEq) {
          return function (m1) {
              return function (m2) {
                  var f = function (v) {
                      return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(lookup(dictOrd)(v.value0)(m2))(new Data_Maybe.Just(v.value1));
                  };
                  return Data_Foldable.all(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f)(toUnfoldable(Data_List_Lazy_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var isEmpty = function (v) {
      if (v instanceof Leaf) {
          return true;
      };
      return false;
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map.Internal line 93, column 1 - line 93, column 39: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var functorWithIndexMap = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorMap;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3), v1.value4, v(v1.value4)(v1.value5), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map.Internal line 98, column 1 - line 98, column 59: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 415, column 3 - line 420, column 88: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 412, column 1 - line 412, column 80: " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal line 451, column 5 - line 456, column 108: " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 448, column 3 - line 448, column 56: " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 431, column 3 - line 431, column 55: " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function (ctxs) {
              return function (tree) {
                  if (ctxs instanceof Data_List_Types.Nil) {
                      return tree;
                  };
                  if (ctxs instanceof Data_List_Types.Cons) {
                      var $__unused = function (dictPartial1) {
                          return function ($dollar55) {
                              return $dollar55;
                          };
                      };
                      return $__unused()((function () {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              return up(ctxs.value1)(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              return up(ctxs.value1)(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 501, column 9 - line 518, column 136: " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 498, column 5 - line 518, column 136: " + [ ctxs.constructor.name ]);
              };
          };
          var removeMaxNode = function (ctx) {
              return function (m) {
                  var $__unused = function (dictPartial1) {
                      return function ($dollar57) {
                          return $dollar57;
                      };
                  };
                  return $__unused()((function () {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          return removeMaxNode(new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx))(m.value3);
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          return removeMaxNode(new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx))(m.value6);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 530, column 5 - line 534, column 107: " + [ m.constructor.name ]);
                  })());
              };
          };
          var maxNode = function (m) {
              var $__unused = function (dictPartial1) {
                  return function ($dollar59) {
                      return $dollar59;
                  };
              };
              return $__unused()((function () {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      return maxNode(m.value3);
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      return maxNode(m.value6);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 521, column 33 - line 525, column 45: " + [ m.constructor.name ]);
              })());
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 471, column 34 - line 494, column 80: " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var traversableMap = new Data_Traversable.Traversable(function () {
      return foldableMap;
  }, function () {
      return functorMap;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableMap)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              if (v instanceof Leaf) {
                  return Control_Applicative.pure(dictApplicative)(Leaf.value);
              };
              if (v instanceof Two) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Two.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3));
              };
              if (v instanceof Three) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Three.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value5)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value6));
              };
              throw new Error("Failed pattern match at Data.Map.Internal line 116, column 1 - line 116, column 47: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  });
  var foldSubmap = function (dictOrd) {
      return function (dictMonoid) {
          return function (kmin) {
              return function (kmax) {
                  return function (f) {
                      var tooSmall = (function () {
                          if (kmin instanceof Data_Maybe.Just) {
                              return function (k) {
                                  return Data_Ord.lessThan(dictOrd)(k)(kmin.value0);
                              };
                          };
                          if (kmin instanceof Data_Maybe.Nothing) {
                              return Data_Function["const"](false);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 316, column 7 - line 320, column 22: " + [ kmin.constructor.name ]);
                      })();
                      var tooLarge = (function () {
                          if (kmax instanceof Data_Maybe.Just) {
                              return function (k) {
                                  return Data_Ord.greaterThan(dictOrd)(k)(kmax.value0);
                              };
                          };
                          if (kmax instanceof Data_Maybe.Nothing) {
                              return Data_Function["const"](false);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 323, column 7 - line 327, column 22: " + [ kmax.constructor.name ]);
                      })();
                      var inBounds = (function () {
                          if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Just) {
                              return function (k) {
                                  return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k) && Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
                              };
                          };
                          if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Nothing) {
                              return function (k) {
                                  return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k);
                              };
                          };
                          if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Just) {
                              return function (k) {
                                  return Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
                              };
                          };
                          if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Nothing) {
                              return Data_Function["const"](true);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 330, column 7 - line 338, column 21: " + [ kmin.constructor.name, kmax.constructor.name ]);
                      })();
                      var go = function (v) {
                          if (v instanceof Leaf) {
                              return Data_Monoid.mempty(dictMonoid);
                          };
                          if (v instanceof Two) {
                              return Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                  var $627 = tooSmall(v.value1);
                                  if ($627) {
                                      return Data_Monoid.mempty(dictMonoid);
                                  };
                                  return go(v.value0);
                              })())(Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                  var $628 = inBounds(v.value1);
                                  if ($628) {
                                      return f(v.value1)(v.value2);
                                  };
                                  return Data_Monoid.mempty(dictMonoid);
                              })())((function () {
                                  var $629 = tooLarge(v.value1);
                                  if ($629) {
                                      return Data_Monoid.mempty(dictMonoid);
                                  };
                                  return go(v.value3);
                              })()));
                          };
                          if (v instanceof Three) {
                              return Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                  var $634 = tooSmall(v.value1);
                                  if ($634) {
                                      return Data_Monoid.mempty(dictMonoid);
                                  };
                                  return go(v.value0);
                              })())(Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                  var $635 = inBounds(v.value1);
                                  if ($635) {
                                      return f(v.value1)(v.value2);
                                  };
                                  return Data_Monoid.mempty(dictMonoid);
                              })())(Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                  var $636 = tooSmall(v.value4) || tooLarge(v.value1);
                                  if ($636) {
                                      return Data_Monoid.mempty(dictMonoid);
                                  };
                                  return go(v.value3);
                              })())(Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                  var $637 = inBounds(v.value4);
                                  if ($637) {
                                      return f(v.value4)(v.value5);
                                  };
                                  return Data_Monoid.mempty(dictMonoid);
                              })())((function () {
                                  var $638 = tooLarge(v.value4);
                                  if ($638) {
                                      return Data_Monoid.mempty(dictMonoid);
                                  };
                                  return go(v.value6);
                              })()))));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 356, column 10 - line 368, column 54: " + [ v.constructor.name ]);
                      };
                      return go;
                  };
              };
          };
      };
  };
  var findMin = (function () {
      var go = function ($copy_v) {
          return function ($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                  if (v1 instanceof Leaf) {
                      $tco_done = true;
                      return v;
                  };
                  if (v1 instanceof Two) {
                      $tco_var_v = new Data_Maybe.Just({
                          key: v1.value1,
                          value: v1.value2
                      });
                      $copy_v1 = v1.value0;
                      return;
                  };
                  if (v1 instanceof Three) {
                      $tco_var_v = new Data_Maybe.Just({
                          key: v1.value1,
                          value: v1.value2
                      });
                      $copy_v1 = v1.value0;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 294, column 5 - line 294, column 22: " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
              };
              return $tco_result;
          };
      };
      return go(Data_Maybe.Nothing.value);
  })();
  var lookupGT = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function (v) {
              if (v instanceof Leaf) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Two) {
                  var v2 = comp(k)(v.value1);
                  if (v2 instanceof Data_Ordering.EQ) {
                      return findMin(v.value3);
                  };
                  if (v2 instanceof Data_Ordering.LT) {
                      return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                          key: v.value1,
                          value: v.value2
                      })(go(v.value0)));
                  };
                  if (v2 instanceof Data_Ordering.GT) {
                      return go(v.value3);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 273, column 33 - line 276, column 21: " + [ v2.constructor.name ]);
              };
              if (v instanceof Three) {
                  var v3 = comp(k)(v.value1);
                  if (v3 instanceof Data_Ordering.EQ) {
                      return findMin(new Two(v.value3, v.value4, v.value5, v.value6));
                  };
                  if (v3 instanceof Data_Ordering.LT) {
                      return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                          key: v.value1,
                          value: v.value2
                      })(go(v.value0)));
                  };
                  if (v3 instanceof Data_Ordering.GT) {
                      return go(new Two(v.value3, v.value4, v.value5, v.value6));
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 277, column 45 - line 280, column 37: " + [ v3.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Map.Internal line 272, column 5 - line 272, column 22: " + [ v.constructor.name ]);
          };
          return go;
      };
  };
  var findMax = (function () {
      var go = function ($copy_v) {
          return function ($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                  if (v1 instanceof Leaf) {
                      $tco_done = true;
                      return v;
                  };
                  if (v1 instanceof Two) {
                      $tco_var_v = new Data_Maybe.Just({
                          key: v1.value1,
                          value: v1.value2
                      });
                      $copy_v1 = v1.value3;
                      return;
                  };
                  if (v1 instanceof Three) {
                      $tco_var_v = new Data_Maybe.Just({
                          key: v1.value4,
                          value: v1.value5
                      });
                      $copy_v1 = v1.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 286, column 5 - line 286, column 22: " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
              };
              return $tco_result;
          };
      };
      return go(Data_Maybe.Nothing.value);
  })();
  var lookupLT = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function (v) {
              if (v instanceof Leaf) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Two) {
                  var v2 = comp(k)(v.value1);
                  if (v2 instanceof Data_Ordering.EQ) {
                      return findMax(v.value0);
                  };
                  if (v2 instanceof Data_Ordering.GT) {
                      return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                          key: v.value1,
                          value: v.value2
                      })(go(v.value3)));
                  };
                  if (v2 instanceof Data_Ordering.LT) {
                      return go(v.value0);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 239, column 33 - line 242, column 20: " + [ v2.constructor.name ]);
              };
              if (v instanceof Three) {
                  var v3 = comp(k)(v.value4);
                  if (v3 instanceof Data_Ordering.EQ) {
                      return findMax(new Two(v.value0, v.value1, v.value2, v.value3));
                  };
                  if (v3 instanceof Data_Ordering.GT) {
                      return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                          key: v.value4,
                          value: v.value5
                      })(go(v.value6)));
                  };
                  if (v3 instanceof Data_Ordering.LT) {
                      return go(new Two(v.value0, v.value1, v.value2, v.value3));
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 243, column 45 - line 246, column 36: " + [ v3.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Map.Internal line 238, column 5 - line 238, column 22: " + [ v.constructor.name ]);
          };
          return go;
      };
  };
  var eqMap = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (m1) {
              return function (m2) {
                  return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toAscArray(m1))(toAscArray(m2));
              };
          });
      };
  };
  var ordMap = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqMap(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (m1) {
              return function (m2) {
                  return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(dictOrd)(dictOrd1)))(toAscArray(m1))(toAscArray(m2));
              };
          });
      };
  };
  var eq1Map = function (dictEq) {
      return new Data_Eq.Eq1(function (dictEq1) {
          return Data_Eq.eq(eqMap(dictEq)(dictEq1));
      });
  };
  var ord1Map = function (dictOrd) {
      return new Data_Ord.Ord1(function () {
          return eq1Map(dictOrd.Eq0());
      }, function (dictOrd1) {
          return Data_Ord.compare(ordMap(dictOrd)(dictOrd1));
      });
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var filterWithKey = function (dictOrd) {
      return function (predicate) {
          return function ($740) {
              return fromFoldable(dictOrd)(Data_List_Lazy_Types.foldableList)(Data_List_Lazy.filter(Data_Tuple.uncurry(predicate))(toUnfoldable(Data_List_Lazy_Types.unfoldableList)($740)));
          };
      };
  };
  var filter = function (dictOrd) {
      return function (predicate) {
          return filterWithKey(dictOrd)(Data_Function["const"](predicate));
      };
  };
  var filterKeys = function (dictOrd) {
      return function (predicate) {
          return filterWithKey(dictOrd)(function ($741) {
              return Data_Function["const"](predicate($741));
          });
      };
  };
  var fromFoldableWithIndex = function (dictOrd) {
      return function (dictFoldableWithIndex) {
          return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function (k) {
              return function (m) {
                  return function (v) {
                      return insert(dictOrd)(k)(v)(m);
                  };
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var difference = function (dictOrd) {
      return function (m1) {
          return function (m2) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(m1)(keys(m2));
          };
      };
  };
  var checkValid = function (tree) {
      var allHeights = function (v) {
          if (v instanceof Leaf) {
              return Control_Applicative.pure(Data_List_Types.applicativeList)(0);
          };
          if (v instanceof Two) {
              return Data_Functor.map(Data_List_Types.functorList)(function (n) {
                  return n + 1 | 0;
              })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(allHeights(v.value3)));
          };
          if (v instanceof Three) {
              return Data_Functor.map(Data_List_Types.functorList)(function (n) {
                  return n + 1 | 0;
              })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value3))(allHeights(v.value6))));
          };
          throw new Error("Failed pattern match at Data.Map.Internal line 185, column 3 - line 185, column 36: " + [ v.constructor.name ]);
      };
      return Data_List.length(Data_List.nub(Data_Eq.eqInt)(allHeights(tree))) === 1;
  };
  var asList = Control_Category.identity(Control_Category.categoryFn);
  var foldableWithIndexMap = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableMap;
  }, function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(Data_Tuple.uncurry(f))(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(function ($742) {
                  return Data_Tuple.uncurry(Data_Function.flip(f)($742));
              })(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Tuple.uncurry(f))(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  });
  var mapMaybeWithKey = function (dictOrd) {
      return function (f) {
          return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexMap)(function (k) {
              return function (a) {
                  return function (acc) {
                      return Data_Maybe.maybe(acc)(function (b) {
                          return insert(dictOrd)(k)(b)(acc);
                      })(f(k)(a));
                  };
              };
          })(empty);
      };
  };
  var mapMaybe = function (dictOrd) {
      return function ($743) {
          return mapMaybeWithKey(dictOrd)(Data_Function["const"]($743));
      };
  };
  var traversableWithIndexMap = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexMap;
  }, function () {
      return functorWithIndexMap;
  }, function () {
      return traversableMap;
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              if (v instanceof Leaf) {
                  return Control_Applicative.pure(dictApplicative)(Leaf.value);
              };
              if (v instanceof Two) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Two.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value1)(v.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value3));
              };
              if (v instanceof Three) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Three.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value1)(v.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value4)(v.value5)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value6));
              };
              throw new Error("Failed pattern match at Data.Map.Internal line 133, column 1 - line 133, column 67: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  });
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 539, column 15 - line 541, column 25: " + [ v.constructor.name ]);
              };
          };
      };
  };
  var fromFoldableWith = function (dictOrd) {
      return function (dictFoldable) {
          return function (f) {
              var combine = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_Maybe.Just) {
                          return Data_Maybe.Just.create(f(v)(v1.value0));
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return new Data_Maybe.Just(v);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 556, column 3 - line 556, column 38: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Foldable.foldl(dictFoldable)(function (m) {
                  return function (v) {
                      return alter(dictOrd)(combine(v.value1))(v.value0)(m);
                  };
              })(empty);
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)(function ($744) {
                              return Data_Maybe.Just.create(Data_Maybe.maybe(v.value1)(f(v.value1))($744));
                          })(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  var semigroupMap = function (dictOrd) {
      return new Data_Semigroup.Semigroup(union(dictOrd));
  };
  var monoidMap = function (dictOrd) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMap(dictOrd);
      }, empty);
  };
  var submap = function (dictOrd) {
      return function (kmin) {
          return function (kmax) {
              return foldSubmap(dictOrd)(monoidMap(dictOrd))(kmin)(kmax)(singleton);
          };
      };
  };
  var unions = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
      };
  };
  var update = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  return alter(dictOrd)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
              };
          };
      };
  };
  exports["showTree"] = showTree;
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["singleton"] = singleton;
  exports["checkValid"] = checkValid;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["lookupLE"] = lookupLE;
  exports["lookupLT"] = lookupLT;
  exports["lookupGE"] = lookupGE;
  exports["lookupGT"] = lookupGT;
  exports["findMin"] = findMin;
  exports["findMax"] = findMax;
  exports["foldSubmap"] = foldSubmap;
  exports["submap"] = submap;
  exports["fromFoldable"] = fromFoldable;
  exports["fromFoldableWith"] = fromFoldableWith;
  exports["fromFoldableWithIndex"] = fromFoldableWithIndex;
  exports["toUnfoldable"] = toUnfoldable;
  exports["toUnfoldableUnordered"] = toUnfoldableUnordered;
  exports["delete"] = $$delete;
  exports["pop"] = pop;
  exports["member"] = member;
  exports["alter"] = alter;
  exports["update"] = update;
  exports["keys"] = keys;
  exports["values"] = values;
  exports["union"] = union;
  exports["unionWith"] = unionWith;
  exports["unions"] = unions;
  exports["difference"] = difference;
  exports["isSubmap"] = isSubmap;
  exports["size"] = size;
  exports["filterWithKey"] = filterWithKey;
  exports["filterKeys"] = filterKeys;
  exports["filter"] = filter;
  exports["mapMaybeWithKey"] = mapMaybeWithKey;
  exports["mapMaybe"] = mapMaybe;
  exports["eq1Map"] = eq1Map;
  exports["eqMap"] = eqMap;
  exports["ord1Map"] = ord1Map;
  exports["ordMap"] = ordMap;
  exports["showMap"] = showMap;
  exports["semigroupMap"] = semigroupMap;
  exports["monoidMap"] = monoidMap;
  exports["functorMap"] = functorMap;
  exports["functorWithIndexMap"] = functorWithIndexMap;
  exports["foldableMap"] = foldableMap;
  exports["foldableWithIndexMap"] = foldableWithIndexMap;
  exports["traversableMap"] = traversableMap;
  exports["traversableWithIndexMap"] = traversableWithIndexMap;
})(PS["Data.Map.Internal"] = PS["Data.Map.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var $$Set = function (x) {
      return x;
  };
  var union = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return Data_Map_Internal.union(dictOrd)(v)(v1);
          };
      };
  };
  var toList = function (v) {
      return Data_Map_Internal.keys(v);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function ($64) {
          return Data_List.toUnfoldable(dictUnfoldable)(toList($64));
      };
  };
  var size = function (v) {
      return Data_Map_Internal.size(v);
  };
  var singleton = function (a) {
      return Data_Map_Internal.singleton(a)(Data_Unit.unit);
  };
  var showSet = function (dictShow) {
      return new Data_Show.Show(function (s) {
          return "(fromFoldable " + (Data_Show.show(Data_List_Types.showList(dictShow))(toList(s)) + ")");
      });
  };
  var semigroupSet = function (dictOrd) {
      return new Data_Semigroup.Semigroup(union(dictOrd));
  };
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.member(dictOrd)(a)(v);
          };
      };
  };
  var isEmpty = function (v) {
      return Data_Map_Internal.isEmpty(v);
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  };
  var foldableSet = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function ($65) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(toList($65));
          };
      };
  }, function (f) {
      return function (x) {
          return function ($66) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x)(toList($66));
          };
      };
  }, function (f) {
      return function (x) {
          return function ($67) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x)(toList($67));
          };
      };
  });
  var findMin = function (v) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
          return v1.key;
      })(Data_Map_Internal.findMin(v));
  };
  var findMax = function (v) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
          return v1.key;
      })(Data_Map_Internal.findMax(v));
  };
  var filter = function (dictOrd) {
      return function (f) {
          return function (v) {
              return Data_Map_Internal.filterWithKey(dictOrd)(function (k) {
                  return function (v1) {
                      return f(k);
                  };
              })(v);
          };
      };
  };
  var eqSet = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              return Data_Eq.eq(Data_Map_Internal.eqMap(dictEq)(Data_Eq.eqUnit))(v)(v1);
          };
      });
  };
  var ordSet = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqSet(dictOrd.Eq0());
      }, function (s1) {
          return function (s2) {
              return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(toList(s1))(toList(s2));
          };
      });
  };
  var eq1Set = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqSet(dictEq));
  });
  var ord1Set = new Data_Ord.Ord1(function () {
      return eq1Set;
  }, function (dictOrd) {
      return Data_Ord.compare(ordSet(dictOrd));
  });
  var empty = Data_Map_Internal.empty;
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };
  var intersection = function (dictOrd) {
      return function (s1) {
          return function (s2) {
              var toArray = function ($68) {
                  return Data_Array.fromFoldable(Data_List_Types.foldableList)(toList($68));
              };
              var rs = toArray(s2);
              var rl = Data_Array.length(rs);
              var ls = toArray(s1);
              var ll = Data_Array.length(ls);
              var intersect = function (acc) {
                  var go = function (l) {
                      return function (r) {
                          var $59 = l < ll && r < rl;
                          if ($59) {
                              var v = Data_Ord.compare(dictOrd)(ls[l])(rs[r]);
                              if (v instanceof Data_Ordering.EQ) {
                                  return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.push(ls[l])(acc))(function (v1) {
                                      return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Loop({
                                          a: l + 1 | 0,
                                          b: r + 1 | 0
                                      }));
                                  });
                              };
                              if (v instanceof Data_Ordering.LT) {
                                  return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Loop({
                                      a: l + 1 | 0,
                                      b: r
                                  }));
                              };
                              if (v instanceof Data_Ordering.GT) {
                                  return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Loop({
                                      a: l,
                                      b: r + 1 | 0
                                  }));
                              };
                              throw new Error("Failed pattern match at Data.Set line 176, column 12 - line 181, column 43: " + [ v.constructor.name ]);
                          };
                          return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Done(acc));
                      };
                  };
                  return Control_Monad_Rec_Class.tailRecM2(Control_Monad_ST_Internal.monadRecST)(go)(0)(0);
              };
              return fromFoldable(Data_Foldable.foldableArray)(dictOrd)(Control_Monad_ST_Internal.run(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.empty)(intersect))(Data_Array_ST.unsafeFreeze)));
          };
      };
  };
  var map = function (dictOrd) {
      return function (f) {
          return Data_Foldable.foldl(foldableSet)(function (m) {
              return function (a) {
                  return insert(dictOrd)(f(a))(m);
              };
          })(empty);
      };
  };
  var mapMaybe = function (dictOrd) {
      return function (f) {
          return Data_Foldable.foldr(foldableSet)(function (a) {
              return function (acc) {
                  return Data_Maybe.maybe(acc)(function (b) {
                      return insert(dictOrd)(b)(acc);
                  })(f(a));
              };
          })(empty);
      };
  };
  var monoidSet = function (dictOrd) {
      return new Data_Monoid.Monoid(function () {
          return semigroupSet(dictOrd);
      }, empty);
  };
  var unions = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal["delete"](dictOrd)(a)(v);
          };
      };
  };
  var difference = function (dictOrd) {
      return function (s1) {
          return function (s2) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(s1)(toList(s2));
          };
      };
  };
  var subset = function (dictOrd) {
      return function (s1) {
          return function (s2) {
              return isEmpty(difference(dictOrd)(s1)(s2));
          };
      };
  };
  var properSubset = function (dictOrd) {
      return function (s1) {
          return function (s2) {
              return subset(dictOrd)(s1)(s2) && Data_Eq.notEq(eqSet(dictOrd.Eq0()))(s1)(s2);
          };
      };
  };
  var checkValid = function (v) {
      return Data_Map_Internal.checkValid(v);
  };
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["singleton"] = singleton;
  exports["map"] = map;
  exports["checkValid"] = checkValid;
  exports["insert"] = insert;
  exports["member"] = member;
  exports["delete"] = $$delete;
  exports["size"] = size;
  exports["findMin"] = findMin;
  exports["findMax"] = findMax;
  exports["union"] = union;
  exports["unions"] = unions;
  exports["difference"] = difference;
  exports["subset"] = subset;
  exports["properSubset"] = properSubset;
  exports["intersection"] = intersection;
  exports["filter"] = filter;
  exports["mapMaybe"] = mapMaybe;
  exports["eqSet"] = eqSet;
  exports["eq1Set"] = eq1Set;
  exports["showSet"] = showSet;
  exports["ordSet"] = ordSet;
  exports["ord1Set"] = ord1Set;
  exports["monoidSet"] = monoidSet;
  exports["semigroupSet"] = semigroupSet;
  exports["foldableSet"] = foldableSet;
})(PS["Data.Set"] = PS["Data.Set"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Set = PS["Data.Set"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var keys = function ($0) {
      return Data_Functor["void"](Data_Map_Internal.functorMap)($0);
  };
  exports["keys"] = keys;
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Second = (function () {
      function Second() {

      };
      Second.value = new Second();
      return Second;
  })();
  var Minute = (function () {
      function Minute() {

      };
      Minute.value = new Minute();
      return Minute;
  })();
  var Hour = (function () {
      function Hour() {

      };
      Hour.value = new Hour();
      return Hour;
  })();
  var Day = (function () {
      function Day() {

      };
      Day.value = new Day();
      return Day;
  })();
  var Week = (function () {
      function Week() {

      };
      Week.value = new Week();
      return Week;
  })();
  var Month = (function () {
      function Month() {

      };
      Month.value = new Month();
      return Month;
  })();
  var Year = (function () {
      function Year() {

      };
      Year.value = new Year();
      return Year;
  })();
  var Duration = function (x) {
      return x;
  };
  var showDurationComponent = new Data_Show.Show(function (v) {
      if (v instanceof Minute) {
          return "Minute";
      };
      if (v instanceof Second) {
          return "Second";
      };
      if (v instanceof Hour) {
          return "Hour";
      };
      if (v instanceof Day) {
          return "Day";
      };
      if (v instanceof Week) {
          return "Week";
      };
      if (v instanceof Month) {
          return "Month";
      };
      if (v instanceof Year) {
          return "Year";
      };
      throw new Error("Failed pattern match at Data.Interval.Duration line 38, column 1 - line 38, column 57: " + [ v.constructor.name ]);
  });
  var showDuration = new Data_Show.Show(function (v) {
      return "(Duration " + (Data_Show.show(Data_Map_Internal.showMap(showDurationComponent)(Data_Show.showNumber))(v) + ")");
  });
  var newtypeDuration = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Duration);
  var eqDurationComponent = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Second && y instanceof Second) {
              return true;
          };
          if (x instanceof Minute && y instanceof Minute) {
              return true;
          };
          if (x instanceof Hour && y instanceof Hour) {
              return true;
          };
          if (x instanceof Day && y instanceof Day) {
              return true;
          };
          if (x instanceof Week && y instanceof Week) {
              return true;
          };
          if (x instanceof Month && y instanceof Month) {
              return true;
          };
          if (x instanceof Year && y instanceof Year) {
              return true;
          };
          return false;
      };
  });
  var ordDurationComponent = new Data_Ord.Ord(function () {
      return eqDurationComponent;
  }, function (x) {
      return function (y) {
          if (x instanceof Second && y instanceof Second) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Second) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Second) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Minute && y instanceof Minute) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Minute) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Minute) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Hour && y instanceof Hour) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Hour) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Hour) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Day && y instanceof Day) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Day) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Day) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Week && y instanceof Week) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Week) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Week) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Month && y instanceof Month) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Month) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Month) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Year && y instanceof Year) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Interval.Duration line 36, column 8 - line 36, column 62: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var semigroupDuration = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return Data_Map_Internal.unionWith(ordDurationComponent)(Data_Semiring.add(Data_Semiring.semiringNumber))(v)(v1);
      };
  });
  var monoidDuration = new Data_Monoid.Monoid(function () {
      return semigroupDuration;
  }, Data_Monoid.mempty(Data_Map_Internal.monoidMap(ordDurationComponent)));
  var eqDuration = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Map_Internal.eqMap(eqDurationComponent)(Data_Eq.eqNumber))(x)(y);
      };
  });
  var ordDuration = new Data_Ord.Ord(function () {
      return eqDuration;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Map_Internal.ordMap(ordDurationComponent)(Data_Ord.ordNumber))(x)(y);
      };
  });
  var durationFromComponent = function (k) {
      return function (v) {
          return Data_Map_Internal.singleton(k)(v);
      };
  };
  var hour = durationFromComponent(Hour.value);
  var millisecond = function ($32) {
      return durationFromComponent(Second.value)((function (v) {
          return v / 1000.0;
      })($32));
  };
  var minute = durationFromComponent(Minute.value);
  var month = durationFromComponent(Month.value);
  var second = durationFromComponent(Second.value);
  var week = durationFromComponent(Week.value);
  var year = durationFromComponent(Year.value);
  var day = durationFromComponent(Day.value);
  exports["Duration"] = Duration;
  exports["Second"] = Second;
  exports["Minute"] = Minute;
  exports["Hour"] = Hour;
  exports["Day"] = Day;
  exports["Week"] = Week;
  exports["Month"] = Month;
  exports["Year"] = Year;
  exports["year"] = year;
  exports["month"] = month;
  exports["week"] = week;
  exports["day"] = day;
  exports["hour"] = hour;
  exports["minute"] = minute;
  exports["second"] = second;
  exports["millisecond"] = millisecond;
  exports["eqDuration"] = eqDuration;
  exports["ordDuration"] = ordDuration;
  exports["newtypeDuration"] = newtypeDuration;
  exports["showDuration"] = showDuration;
  exports["semigroupDuration"] = semigroupDuration;
  exports["monoidDuration"] = monoidDuration;
  exports["eqDurationComponent"] = eqDurationComponent;
  exports["ordDurationComponent"] = ordDurationComponent;
  exports["showDurationComponent"] = showDurationComponent;
})(PS["Data.Interval.Duration"] = PS["Data.Interval.Duration"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Interval_Duration = PS["Data.Interval.Duration"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];                 
  var StartEnd = (function () {
      function StartEnd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StartEnd.create = function (value0) {
          return function (value1) {
              return new StartEnd(value0, value1);
          };
      };
      return StartEnd;
  })();
  var DurationEnd = (function () {
      function DurationEnd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DurationEnd.create = function (value0) {
          return function (value1) {
              return new DurationEnd(value0, value1);
          };
      };
      return DurationEnd;
  })();
  var StartDuration = (function () {
      function StartDuration(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StartDuration.create = function (value0) {
          return function (value1) {
              return new StartDuration(value0, value1);
          };
      };
      return StartDuration;
  })();
  var DurationOnly = (function () {
      function DurationOnly(value0) {
          this.value0 = value0;
      };
      DurationOnly.create = function (value0) {
          return new DurationOnly(value0);
      };
      return DurationOnly;
  })();
  var RecurringInterval = (function () {
      function RecurringInterval(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RecurringInterval.create = function (value0) {
          return function (value1) {
              return new RecurringInterval(value0, value1);
          };
      };
      return RecurringInterval;
  })();
  var showInterval = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              if (v instanceof StartEnd) {
                  return "(StartEnd " + (Data_Show.show(dictShow1)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
              };
              if (v instanceof DurationEnd) {
                  return "(DurationEnd " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
              };
              if (v instanceof StartDuration) {
                  return "(StartDuration " + (Data_Show.show(dictShow1)(v.value0) + (" " + (Data_Show.show(dictShow)(v.value1) + ")")));
              };
              if (v instanceof DurationOnly) {
                  return "(DurationOnly " + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Interval line 66, column 1 - line 66, column 65: " + [ v.constructor.name ]);
          });
      };
  };
  var showRecurringInterval = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(RecurringInterval " + (Data_Show.show(Data_Maybe.showMaybe(Data_Show.showInt))(v.value0) + (" " + (Data_Show.show(showInterval(dictShow)(dictShow1))(v.value1) + ")")));
          });
      };
  };
  var over = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(RecurringInterval.create(v.value0))(f(v.value1));
          };
      };
  };
  var interval = function (v) {
      return v.value1;
  };
  var foldableInterval = new Data_Foldable.Foldable(function (dictMonoid) {
      return Data_Foldable.foldMapDefaultL(foldableInterval)(dictMonoid);
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof StartEnd) {
                  return v(v(z)(v1.value0))(v1.value1);
              };
              if (v1 instanceof DurationEnd) {
                  return v(z)(v1.value1);
              };
              if (v1 instanceof StartDuration) {
                  return v(z)(v1.value0);
              };
              return z;
          };
      };
  }, function (x) {
      return Data_Foldable.foldrDefault(foldableInterval)(x);
  });
  var foldableRecurringInterval = new Data_Foldable.Foldable(function (dictMonoid) {
      return Data_Foldable.foldMapDefaultL(foldableRecurringInterval)(dictMonoid);
  }, function (f) {
      return function (i) {
          return function ($248) {
              return Data_Foldable.foldl(foldableInterval)(f)(i)(interval($248));
          };
      };
  }, function (f) {
      return function (i) {
          return function ($249) {
              return Data_Foldable.foldr(foldableInterval)(f)(i)(interval($249));
          };
      };
  });
  var eqInterval = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  if (x instanceof StartEnd && y instanceof StartEnd) {
                      return Data_Eq.eq(dictEq1)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
                  };
                  if (x instanceof DurationEnd && y instanceof DurationEnd) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
                  };
                  if (x instanceof StartDuration && y instanceof StartDuration) {
                      return Data_Eq.eq(dictEq1)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
                  };
                  if (x instanceof DurationOnly && y instanceof DurationOnly) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                  };
                  return false;
              };
          });
      };
  };
  var eqRecurringInterval = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(x.value0)(y.value0) && Data_Eq.eq(eqInterval(dictEq)(dictEq1))(x.value1)(y.value1);
              };
          });
      };
  };
  var ordInterval = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqInterval(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  if (x instanceof StartEnd && y instanceof StartEnd) {
                      var v = Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                      if (v instanceof Data_Ordering.LT) {
                          return Data_Ordering.LT.value;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          return Data_Ordering.GT.value;
                      };
                      return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
                  };
                  if (x instanceof StartEnd) {
                      return Data_Ordering.LT.value;
                  };
                  if (y instanceof StartEnd) {
                      return Data_Ordering.GT.value;
                  };
                  if (x instanceof DurationEnd && y instanceof DurationEnd) {
                      var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                      if (v instanceof Data_Ordering.LT) {
                          return Data_Ordering.LT.value;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          return Data_Ordering.GT.value;
                      };
                      return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
                  };
                  if (x instanceof DurationEnd) {
                      return Data_Ordering.LT.value;
                  };
                  if (y instanceof DurationEnd) {
                      return Data_Ordering.GT.value;
                  };
                  if (x instanceof StartDuration && y instanceof StartDuration) {
                      var v = Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                      if (v instanceof Data_Ordering.LT) {
                          return Data_Ordering.LT.value;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          return Data_Ordering.GT.value;
                      };
                      return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
                  };
                  if (x instanceof StartDuration) {
                      return Data_Ordering.LT.value;
                  };
                  if (y instanceof StartDuration) {
                      return Data_Ordering.GT.value;
                  };
                  if (x instanceof DurationOnly && y instanceof DurationOnly) {
                      return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  };
                  throw new Error("Failed pattern match at Data.Interval line 65, column 8 - line 65, column 68: " + [ x.constructor.name, y.constructor.name ]);
              };
          });
      };
  };
  var ordRecurringInterval = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqRecurringInterval(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  var v = Data_Ord.compare(Data_Maybe.ordMaybe(Data_Ord.ordInt))(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(ordInterval(dictOrd)(dictOrd1))(x.value1)(y.value1);
              };
          });
      };
  };
  var bifunctorInterval = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof StartEnd) {
                  return new StartEnd(v1(v2.value0), v1(v2.value1));
              };
              if (v2 instanceof DurationEnd) {
                  return new DurationEnd(v(v2.value0), v1(v2.value1));
              };
              if (v2 instanceof StartDuration) {
                  return new StartDuration(v1(v2.value0), v(v2.value1));
              };
              if (v2 instanceof DurationOnly) {
                  return new DurationOnly(v(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Interval line 75, column 1 - line 75, column 49: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var bifunctorRecurringInterval = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new RecurringInterval(v.value0, Data_Bifunctor.bimap(bifunctorInterval)(f)(g)(v.value1));
          };
      };
  });
  var functorInterval = new Data_Functor.Functor(Data_Bifunctor.bimap(bifunctorInterval)(Control_Category.identity(Control_Category.categoryFn)));
  var extendInterval = new Control_Extend.Extend(function () {
      return functorInterval;
  }, function (f) {
      return function (v) {
          if (v instanceof StartEnd) {
              return new StartEnd(f(v), f(v));
          };
          if (v instanceof DurationEnd) {
              return new DurationEnd(v.value0, f(v));
          };
          if (v instanceof StartDuration) {
              return new StartDuration(f(v), v.value1);
          };
          if (v instanceof DurationOnly) {
              return new DurationOnly(v.value0);
          };
          throw new Error("Failed pattern match at Data.Interval line 111, column 1 - line 111, column 47: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var functorRecurringInterval = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new RecurringInterval(v.value0, Data_Functor.map(functorInterval)(f)(v.value1));
      };
  });
  var extendRecurringInterval = new Control_Extend.Extend(function () {
      return functorRecurringInterval;
  }, function (f) {
      return function (v) {
          return new RecurringInterval(v.value0, Control_Extend.extend(extendInterval)(Data_Function["const"](f(v)))(v.value1));
      };
  });
  var traversableInterval = new Data_Traversable.Traversable(function () {
      return foldableInterval;
  }, function () {
      return functorInterval;
  }, function (dictApplicative) {
      return Data_Traversable.sequenceDefault(traversableInterval)(dictApplicative);
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof StartEnd) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(StartEnd.create)(v(v1.value0)))(v(v1.value1));
              };
              if (v1 instanceof DurationEnd) {
                  return Data_Functor.mapFlipped((dictApplicative.Apply0()).Functor0())(v(v1.value1))(DurationEnd.create(v1.value0));
              };
              if (v1 instanceof StartDuration) {
                  return Data_Functor.mapFlipped((dictApplicative.Apply0()).Functor0())(v(v1.value0))(function (v2) {
                      return new StartDuration(v2, v1.value1);
                  });
              };
              if (v1 instanceof DurationOnly) {
                  return Control_Applicative.pure(dictApplicative)(new DurationOnly(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Interval line 97, column 1 - line 97, column 57: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var traversableRecurringInterval = new Data_Traversable.Traversable(function () {
      return foldableRecurringInterval;
  }, function () {
      return functorRecurringInterval;
  }, function (dictApplicative) {
      return Data_Traversable.sequenceDefault(traversableRecurringInterval)(dictApplicative);
  }, function (dictApplicative) {
      return function (f) {
          return function (i) {
              return over((dictApplicative.Apply0()).Functor0())(Data_Traversable.traverse(traversableInterval)(dictApplicative)(f))(i);
          };
      };
  });
  var bifoldableInterval = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return Data_Bifoldable.bifoldMapDefaultL(bifoldableInterval)(dictMonoid);
  }, function (v) {
      return function (v1) {
          return function (z) {
              return function (v2) {
                  if (v2 instanceof StartEnd) {
                      return v1(v1(z)(v2.value0))(v2.value1);
                  };
                  if (v2 instanceof DurationEnd) {
                      return v1(v(z)(v2.value0))(v2.value1);
                  };
                  if (v2 instanceof StartDuration) {
                      return v1(v(z)(v2.value1))(v2.value0);
                  };
                  if (v2 instanceof DurationOnly) {
                      return v(z)(v2.value0);
                  };
                  throw new Error("Failed pattern match at Data.Interval line 89, column 1 - line 89, column 51: " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
              };
          };
      };
  }, function (x) {
      return Data_Bifoldable.bifoldrDefault(bifoldableInterval)(x);
  });
  var bifoldableRecurringInterval = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return Data_Bifoldable.bifoldMapDefaultL(bifoldableRecurringInterval)(dictMonoid);
  }, function (f) {
      return function (g) {
          return function (i) {
              return function ($250) {
                  return Data_Bifoldable.bifoldl(bifoldableInterval)(f)(g)(i)(interval($250));
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (i) {
              return function ($251) {
                  return Data_Bifoldable.bifoldr(bifoldableInterval)(f)(g)(i)(interval($251));
              };
          };
      };
  });
  var bitraversableInterval = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableInterval;
  }, function () {
      return bifunctorInterval;
  }, function (dictApplicative) {
      return Data_Bitraversable.bisequenceDefault(bitraversableInterval)(dictApplicative);
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof StartEnd) {
                      return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(StartEnd.create)(v1(v2.value0)))(v1(v2.value1));
                  };
                  if (v2 instanceof DurationEnd) {
                      return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(DurationEnd.create)(v(v2.value0)))(v1(v2.value1));
                  };
                  if (v2 instanceof StartDuration) {
                      return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(StartDuration.create)(v1(v2.value0)))(v(v2.value1));
                  };
                  if (v2 instanceof DurationOnly) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(DurationOnly.create)(v(v2.value0));
                  };
                  throw new Error("Failed pattern match at Data.Interval line 104, column 1 - line 104, column 57: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      };
  });
  var bitraversableRecurringInterval = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableRecurringInterval;
  }, function () {
      return bifunctorRecurringInterval;
  }, function (dictApplicative) {
      return Data_Bitraversable.bisequenceDefault(bitraversableRecurringInterval)(dictApplicative);
  }, function (dictApplicative) {
      return function (l) {
          return function (r) {
              return function (i) {
                  return over((dictApplicative.Apply0()).Functor0())(Data_Bitraversable.bitraverse(bitraversableInterval)(dictApplicative)(l)(r))(i);
              };
          };
      };
  });
  exports["StartEnd"] = StartEnd;
  exports["DurationEnd"] = DurationEnd;
  exports["StartDuration"] = StartDuration;
  exports["DurationOnly"] = DurationOnly;
  exports["RecurringInterval"] = RecurringInterval;
  exports["eqRecurringInterval"] = eqRecurringInterval;
  exports["ordRecurringInterval"] = ordRecurringInterval;
  exports["showRecurringInterval"] = showRecurringInterval;
  exports["functorRecurringInterval"] = functorRecurringInterval;
  exports["bifunctorRecurringInterval"] = bifunctorRecurringInterval;
  exports["foldableRecurringInterval"] = foldableRecurringInterval;
  exports["bifoldableRecurringInterval"] = bifoldableRecurringInterval;
  exports["traversableRecurringInterval"] = traversableRecurringInterval;
  exports["bitraversableRecurringInterval"] = bitraversableRecurringInterval;
  exports["extendRecurringInterval"] = extendRecurringInterval;
  exports["eqInterval"] = eqInterval;
  exports["ordInterval"] = ordInterval;
  exports["showInterval"] = showInterval;
  exports["functorInterval"] = functorInterval;
  exports["bifunctorInterval"] = bifunctorInterval;
  exports["foldableInterval"] = foldableInterval;
  exports["bifoldableInterval"] = bifoldableInterval;
  exports["traversableInterval"] = traversableInterval;
  exports["bitraversableInterval"] = bitraversableInterval;
  exports["extendInterval"] = extendInterval;
})(PS["Data.Interval"] = PS["Data.Interval"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Interval_Duration = PS["Data.Interval.Duration"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];                 
  var IsoDuration = function (x) {
      return x;
  };
  var IsEmpty = (function () {
      function IsEmpty() {

      };
      IsEmpty.value = new IsEmpty();
      return IsEmpty;
  })();
  var InvalidWeekComponentUsage = (function () {
      function InvalidWeekComponentUsage() {

      };
      InvalidWeekComponentUsage.value = new InvalidWeekComponentUsage();
      return InvalidWeekComponentUsage;
  })();
  var ContainsNegativeValue = (function () {
      function ContainsNegativeValue(value0) {
          this.value0 = value0;
      };
      ContainsNegativeValue.create = function (value0) {
          return new ContainsNegativeValue(value0);
      };
      return ContainsNegativeValue;
  })();
  var InvalidFractionalUse = (function () {
      function InvalidFractionalUse(value0) {
          this.value0 = value0;
      };
      InvalidFractionalUse.create = function (value0) {
          return new InvalidFractionalUse(value0);
      };
      return InvalidFractionalUse;
  })();
  var unIsoDuration = function (v) {
      return v;
  };
  var showIsoDuration = new Data_Show.Show(function (v) {
      return "(IsoDuration " + (Data_Show.show(Data_Interval_Duration.showDuration)(v) + ")");
  });
  var showError = new Data_Show.Show(function (v) {
      if (v instanceof IsEmpty) {
          return "(IsEmpty)";
      };
      if (v instanceof InvalidWeekComponentUsage) {
          return "(InvalidWeekComponentUsage)";
      };
      if (v instanceof ContainsNegativeValue) {
          return "(ContainsNegativeValue " + (Data_Show.show(Data_Interval_Duration.showDurationComponent)(v.value0) + ")");
      };
      if (v instanceof InvalidFractionalUse) {
          return "(InvalidFractionalUse " + (Data_Show.show(Data_Interval_Duration.showDurationComponent)(v.value0) + ")");
      };
      throw new Error("Failed pattern match at Data.Interval.Duration.Iso line 43, column 1 - line 43, column 33: " + [ v.constructor.name ]);
  });
  var prettyError = function (v) {
      if (v instanceof IsEmpty) {
          return "Duration is empty (has no components)";
      };
      if (v instanceof InvalidWeekComponentUsage) {
          return "Week component of Duration is used with other components";
      };
      if (v instanceof ContainsNegativeValue) {
          return "Component `" + (Data_Show.show(Data_Interval_Duration.showDurationComponent)(v.value0) + "` contains negative value");
      };
      if (v instanceof InvalidFractionalUse) {
          return "Invalid usage of Fractional value at component `" + (Data_Show.show(Data_Interval_Duration.showDurationComponent)(v.value0) + "`");
      };
      throw new Error("Failed pattern match at Data.Interval.Duration.Iso line 49, column 1 - line 49, column 31: " + [ v.constructor.name ]);
  };
  var eqIsoDuration = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Interval_Duration.eqDuration)(x)(y);
      };
  });
  var ordIsoDuration = new Data_Ord.Ord(function () {
      return eqIsoDuration;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Interval_Duration.ordDuration)(x)(y);
      };
  });
  var eqError = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof IsEmpty && y instanceof IsEmpty) {
              return true;
          };
          if (x instanceof InvalidWeekComponentUsage && y instanceof InvalidWeekComponentUsage) {
              return true;
          };
          if (x instanceof ContainsNegativeValue && y instanceof ContainsNegativeValue) {
              return Data_Eq.eq(Data_Interval_Duration.eqDurationComponent)(x.value0)(y.value0);
          };
          if (x instanceof InvalidFractionalUse && y instanceof InvalidFractionalUse) {
              return Data_Eq.eq(Data_Interval_Duration.eqDurationComponent)(x.value0)(y.value0);
          };
          return false;
      };
  });
  var ordError = new Data_Ord.Ord(function () {
      return eqError;
  }, function (x) {
      return function (y) {
          if (x instanceof IsEmpty && y instanceof IsEmpty) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof IsEmpty) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof IsEmpty) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof InvalidWeekComponentUsage && y instanceof InvalidWeekComponentUsage) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof InvalidWeekComponentUsage) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof InvalidWeekComponentUsage) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ContainsNegativeValue && y instanceof ContainsNegativeValue) {
              return Data_Ord.compare(Data_Interval_Duration.ordDurationComponent)(x.value0)(y.value0);
          };
          if (x instanceof ContainsNegativeValue) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ContainsNegativeValue) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof InvalidFractionalUse && y instanceof InvalidFractionalUse) {
              return Data_Ord.compare(Data_Interval_Duration.ordDurationComponent)(x.value0)(y.value0);
          };
          throw new Error("Failed pattern match at Data.Interval.Duration.Iso line 42, column 8 - line 42, column 38: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var checkWeekUsage = function (v) {
      var $60 = Data_Maybe.isJust(Data_Map_Internal.lookup(Data_Interval_Duration.ordDurationComponent)(Data_Interval_Duration.Week.value)(v.asMap)) && Data_Map_Internal.size(v.asMap) > 1;
      if ($60) {
          return Control_Applicative.pure(Data_List_Types.applicativeList)(InvalidWeekComponentUsage.value);
      };
      return Control_Plus.empty(Data_List_Types.plusList);
  };
  var checkNegativeValues = function (v) {
      return Data_Function.flip(Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_List_Types.monoidList))(v.asList)(function (v1) {
          var $64 = v1.value1 >= 0.0;
          if ($64) {
              return Control_Plus.empty(Data_List_Types.plusList);
          };
          return Control_Applicative.pure(Data_List_Types.applicativeList)(new ContainsNegativeValue(v1.value0));
      });
  };
  var checkFractionalUse = function (v) {
      var isFractional = function (a) {
          return $$Math.floor(a) !== a;
      };
      var checkRest = function (rest) {
          return Data_Newtype.unwrap(Data_Newtype.newtypeAdditive)(Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringNumber))(function ($81) {
              return Data_Monoid_Additive.Additive($$Math.abs(Data_Tuple.snd($81)));
          })(rest)) > 0.0;
      };
      var v1 = (function (v2) {
          return v2.rest;
      })(Data_List.span(function ($82) {
          return Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(isFractional)(Data_Tuple.snd($82));
      })(v.asList));
      if (v1 instanceof Data_List_Types.Cons && checkRest(v1.value1)) {
          return Control_Applicative.pure(Data_List_Types.applicativeList)(new InvalidFractionalUse(v1.value0.value0));
      };
      return Control_Plus.empty(Data_List_Types.plusList);
  };
  var checkEmptiness = function (v) {
      var $76 = Data_List["null"](v.asList);
      if ($76) {
          return Control_Applicative.pure(Data_List_Types.applicativeList)(IsEmpty.value);
      };
      return Control_Plus.empty(Data_List_Types.plusList);
  };
  var checkValidIsoDuration = function (v) {
      var check = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidFn(Data_List_Types.monoidList))([ checkWeekUsage, checkEmptiness, checkFractionalUse, checkNegativeValues ]);
      var asList = Data_List.reverse(Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(v));
      return check({
          asList: asList,
          asMap: v
      });
  };
  var mkIsoDuration = function (d) {
      var v = Data_List_NonEmpty.fromList(checkValidIsoDuration(d));
      if (v instanceof Data_Maybe.Just) {
          return new Data_Either.Left(v.value0);
      };
      if (v instanceof Data_Maybe.Nothing) {
          return new Data_Either.Right(d);
      };
      throw new Error("Failed pattern match at Data.Interval.Duration.Iso line 60, column 19 - line 62, column 35: " + [ v.constructor.name ]);
  };
  exports["unIsoDuration"] = unIsoDuration;
  exports["mkIsoDuration"] = mkIsoDuration;
  exports["IsEmpty"] = IsEmpty;
  exports["InvalidWeekComponentUsage"] = InvalidWeekComponentUsage;
  exports["ContainsNegativeValue"] = ContainsNegativeValue;
  exports["InvalidFractionalUse"] = InvalidFractionalUse;
  exports["prettyError"] = prettyError;
  exports["eqIsoDuration"] = eqIsoDuration;
  exports["ordIsoDuration"] = ordIsoDuration;
  exports["showIsoDuration"] = showIsoDuration;
  exports["eqError"] = eqError;
  exports["ordError"] = ordError;
  exports["showError"] = showError;
})(PS["Data.Interval.Duration.Iso"] = PS["Data.Interval.Duration.Iso"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];                 
  var uncons = function (v) {
      var v1 = Data_Lazy.force(v);
      return {
          head: v1.value0,
          tail: v1.value1
      };
  };
  var toList = function (v) {
      var v1 = Data_Lazy.force(v);
      return Data_List_Lazy_Types.cons(v1.value0)(v1.value1);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function ($54) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
                  return new Data_Tuple.Tuple(rec.head, rec.tail);
              })(Data_List_Lazy.uncons(xs));
          })(toList($54));
      };
  };
  var tail = function (v) {
      var v1 = Data_Lazy.force(v);
      return v1.value1;
  };
  var singleton = Control_Applicative.pure(Data_List_Lazy_Types.applicativeNonEmptyList);
  var repeat = function (x) {
      return Data_List_Lazy_Types.NonEmptyList(Data_Lazy.defer(function (v) {
          return new Data_NonEmpty.NonEmpty(x, Data_List_Lazy.repeat(x));
      }));
  };
  var length = function (v) {
      var v1 = Data_Lazy.force(v);
      return 1 + Data_List_Lazy.length(v1.value1) | 0;
  };
  var last = function (v) {
      var v1 = Data_Lazy.force(v);
      return Data_Maybe.fromMaybe(v1.value0)(Data_List_Lazy.last(v1.value1));
  };
  var iterate = function (f) {
      return function (x) {
          return Data_List_Lazy_Types.NonEmptyList(Data_Lazy.defer(function (v) {
              return new Data_NonEmpty.NonEmpty(x, Data_List_Lazy.iterate(f)(f(x)));
          }));
      };
  };
  var init = function (v) {
      var v1 = Data_Lazy.force(v);
      return Data_Maybe.maybe(Data_List_Lazy_Types.nil)(function (v2) {
          return Data_List_Lazy_Types.cons(v1.value0)(v2);
      })(Data_List_Lazy.init(v1.value1));
  };
  var head = function (v) {
      var v1 = Data_Lazy.force(v);
      return v1.value0;
  };
  var fromList = function (l) {
      var v = Data_List_Lazy_Types.step(l);
      if (v instanceof Data_List_Lazy_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Lazy_Types.Cons) {
          return new Data_Maybe.Just(Data_Lazy.defer(function (v1) {
              return new Data_NonEmpty.NonEmpty(v.value0, v.value1);
          }));
      };
      throw new Error("Failed pattern match at Data.List.Lazy.NonEmpty line 41, column 3 - line 43, column 61: " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return function ($55) {
          return fromList(Data_List_Lazy.fromFoldable(dictFoldable)($55));
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Lazy_Types.bindNonEmptyList));
  var appendFoldable = function (dictFoldable) {
      return function (nel) {
          return function (ys) {
              return Data_Lazy.defer(function (v) {
                  return new Data_NonEmpty.NonEmpty(head(nel), Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(tail(nel))(Data_List_Lazy.fromFoldable(dictFoldable)(ys)));
              });
          };
      };
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["fromList"] = fromList;
  exports["toList"] = toList;
  exports["singleton"] = singleton;
  exports["repeat"] = repeat;
  exports["iterate"] = iterate;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["init"] = init;
  exports["uncons"] = uncons;
  exports["length"] = length;
  exports["concatMap"] = concatMap;
  exports["appendFoldable"] = appendFoldable;
})(PS["Data.List.Lazy.NonEmpty"] = PS["Data.List.Lazy.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];                 
  var tail = function (dictPartial) {
      return function (v) {
          var $__unused = function (dictPartial1) {
              return function ($dollar5) {
                  return $dollar5;
              };
          };
          return $__unused(dictPartial)((function () {
              if (v instanceof Data_List_Types.Cons) {
                  return v.value1;
              };
              throw new Error("Failed pattern match at Data.List.Partial line 15, column 1 - line 15, column 46: " + [ v.constructor.name ]);
          })());
      };
  };
  var last = function (dictPartial) {
      return function (v) {
          var $__unused = function (dictPartial1) {
              return function ($dollar9) {
                  return $dollar9;
              };
          };
          return $__unused(dictPartial)((function () {
              if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                  return v.value0;
              };
              if (v instanceof Data_List_Types.Cons) {
                  return last(dictPartial)(v.value1);
              };
              throw new Error("Failed pattern match at Data.List.Partial line 21, column 1 - line 21, column 41: " + [ v.constructor.name ]);
          })());
      };
  };
  var init = function (dictPartial) {
      return function (v) {
          var $__unused = function (dictPartial1) {
              return function ($dollar13) {
                  return $dollar13;
              };
          };
          return $__unused(dictPartial)((function () {
              if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                  return Data_List_Types.Nil.value;
              };
              if (v instanceof Data_List_Types.Cons) {
                  return new Data_List_Types.Cons(v.value0, init(dictPartial)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.Partial line 28, column 1 - line 28, column 46: " + [ v.constructor.name ]);
          })());
      };
  };
  var head = function (dictPartial) {
      return function (v) {
          var $__unused = function (dictPartial1) {
              return function ($dollar17) {
                  return $dollar17;
              };
          };
          return $__unused(dictPartial)((function () {
              if (v instanceof Data_List_Types.Cons) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.List.Partial line 9, column 1 - line 9, column 41: " + [ v.constructor.name ]);
          })());
      };
  };
  exports["head"] = head;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["init"] = init;
})(PS["Data.List.Partial"] = PS["Data.List.Partial"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var ZipList = function (x) {
      return x;
  };
  var traversableZipList = Data_List_Lazy_Types.traversableList;
  var showZipList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(ZipList " + (Data_Show.show(Data_List_Lazy_Types.showList(dictShow))(v) + ")");
      });
  };
  var semigroupZipList = Data_List_Lazy_Types.semigroupList;
  var ordZipList = function (dictOrd) {
      return Data_List_Lazy_Types.ordList(dictOrd);
  };
  var newtypeZipList = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ZipList);
  var monoidZipList = Data_List_Lazy_Types.monoidList;
  var functorZipList = Data_List_Lazy_Types.functorList;
  var foldableZipList = Data_List_Lazy_Types.foldableList;
  var eqZipList = function (dictEq) {
      return Data_List_Lazy_Types.eqList(dictEq);
  };
  var applyZipList = new Control_Apply.Apply(function () {
      return functorZipList;
  }, function (v) {
      return function (v1) {
          return Data_List_Lazy.zipWith(Data_Function.apply)(v)(v1);
      };
  });
  var zipListIsNotBind = function (dictFail) {
      return new Control_Bind.Bind(function () {
          return applyZipList;
      }, Partial_Unsafe.unsafeCrashWith("bind: unreachable"));
  };
  var applicativeZipList = new Control_Applicative.Applicative(function () {
      return applyZipList;
  }, function ($13) {
      return ZipList(Data_List_Lazy.repeat($13));
  });
  var altZipList = new Control_Alt.Alt(function () {
      return functorZipList;
  }, Data_Semigroup.append(semigroupZipList));
  var plusZipList = new Control_Plus.Plus(function () {
      return altZipList;
  }, Data_Monoid.mempty(monoidZipList));
  var alternativeZipList = new Control_Alternative.Alternative(function () {
      return applicativeZipList;
  }, function () {
      return plusZipList;
  });
  exports["ZipList"] = ZipList;
  exports["showZipList"] = showZipList;
  exports["newtypeZipList"] = newtypeZipList;
  exports["eqZipList"] = eqZipList;
  exports["ordZipList"] = ordZipList;
  exports["semigroupZipList"] = semigroupZipList;
  exports["monoidZipList"] = monoidZipList;
  exports["foldableZipList"] = foldableZipList;
  exports["traversableZipList"] = traversableZipList;
  exports["functorZipList"] = functorZipList;
  exports["applyZipList"] = applyZipList;
  exports["applicativeZipList"] = applicativeZipList;
  exports["altZipList"] = altZipList;
  exports["plusZipList"] = plusZipList;
  exports["alternativeZipList"] = alternativeZipList;
  exports["zipListIsNotBind"] = zipListIsNotBind;
})(PS["Data.List.ZipList"] = PS["Data.List.ZipList"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Gen = PS["Control.Monad.Gen"];
  var Control_Monad_Gen_Class = PS["Control.Monad.Gen.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var genMap = function (dictMonadRec) {
      return function (dictMonadGen) {
          return function (dictOrd) {
              return function (genKey) {
                  return function (genValue) {
                      return Control_Monad_Gen_Class.sized(dictMonadGen)(function (size) {
                          return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(size))(function (v) {
                              return Control_Monad_Gen_Class.resize(dictMonadGen)(Data_Function["const"](v))(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Map_Internal.fromFoldable(dictOrd)(Data_List_Types.foldableList))(Control_Monad_Gen.unfoldable(dictMonadRec)(dictMonadGen)(Data_List_Types.unfoldableList)(Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Tuple.Tuple.create)(genKey))(genValue))));
                          });
                      });
                  };
              };
          };
      };
  };
  exports["genMap"] = genMap;
})(PS["Data.Map.Gen"] = PS["Data.Map.Gen"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Alternate = function (x) {
      return x;
  };
  var showAlternate = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Alternate " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupAlternate = function (dictAlt) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Control_Alt.alt(dictAlt)(v)(v1);
          };
      });
  };
  var plusAlternate = function (dictPlus) {
      return dictPlus;
  };
  var ordAlternate = function (dictOrd) {
      return dictOrd;
  };
  var ord1Alternate = function (dictOrd1) {
      return dictOrd1;
  };
  var monoidAlternate = function (dictPlus) {
      return new Data_Monoid.Monoid(function () {
          return semigroupAlternate(dictPlus.Alt0());
      }, Control_Plus.empty(dictPlus));
  };
  var monadAlternate = function (dictMonad) {
      return dictMonad;
  };
  var functorAlternate = function (dictFunctor) {
      return dictFunctor;
  };
  var extendAlternate = function (dictExtend) {
      return dictExtend;
  };
  var eqAlternate = function (dictEq) {
      return dictEq;
  };
  var eq1Alternate = function (dictEq1) {
      return dictEq1;
  };
  var comonadAlternate = function (dictComonad) {
      return dictComonad;
  };
  var boundedAlternate = function (dictBounded) {
      return dictBounded;
  };
  var bindAlternate = function (dictBind) {
      return dictBind;
  };
  var applyAlternate = function (dictApply) {
      return dictApply;
  };
  var applicativeAlternate = function (dictApplicative) {
      return dictApplicative;
  };
  var alternativeAlternate = function (dictAlternative) {
      return dictAlternative;
  };
  var altAlternate = function (dictAlt) {
      return dictAlt;
  };
  exports["Alternate"] = Alternate;
  exports["eqAlternate"] = eqAlternate;
  exports["eq1Alternate"] = eq1Alternate;
  exports["ordAlternate"] = ordAlternate;
  exports["ord1Alternate"] = ord1Alternate;
  exports["boundedAlternate"] = boundedAlternate;
  exports["functorAlternate"] = functorAlternate;
  exports["applyAlternate"] = applyAlternate;
  exports["applicativeAlternate"] = applicativeAlternate;
  exports["altAlternate"] = altAlternate;
  exports["plusAlternate"] = plusAlternate;
  exports["alternativeAlternate"] = alternativeAlternate;
  exports["bindAlternate"] = bindAlternate;
  exports["monadAlternate"] = monadAlternate;
  exports["extendAlternate"] = extendAlternate;
  exports["comonadAlternate"] = comonadAlternate;
  exports["showAlternate"] = showAlternate;
  exports["semigroupAlternate"] = semigroupAlternate;
  exports["monoidAlternate"] = monoidAlternate;
})(PS["Data.Monoid.Alternate"] = PS["Data.Monoid.Alternate"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Down = function (x) {
      return x;
  };
  var showDown = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Down " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var newtypeDown = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Down);
  var eqDown = function (dictEq) {
      return dictEq;
  };
  var ordDown = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqDown(dictOrd.Eq0());
      }, function (v) {
          return function (v1) {
              return Data_Ordering.invert(Data_Ord.compare(dictOrd)(v)(v1));
          };
      });
  };
  var boundedDown = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordDown(dictBounded.Ord0());
      }, Data_Bounded.top(dictBounded), Data_Bounded.bottom(dictBounded));
  };
  exports["Down"] = Down;
  exports["newtypeDown"] = newtypeDown;
  exports["eqDown"] = eqDown;
  exports["ordDown"] = ordDown;
  exports["boundedDown"] = boundedDown;
  exports["showDown"] = showDown;
})(PS["Data.Ord.Down"] = PS["Data.Ord.Down"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Set = PS["Data.Set"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var NonEmptySet = function (x) {
      return x;
  };
  var unionSet = function (dictOrd) {
      return function (s1) {
          return function (v) {
              return Data_Semigroup.append(Data_Set.semigroupSet(dictOrd))(s1)(v);
          };
      };
  };
  var toUnfoldable1 = function (dictUnfoldable1) {
      return function (v) {
          var go = function (v1) {
              var $__unused = function (dictPartial1) {
                  return function ($dollar24) {
                      return $dollar24;
                  };
              };
              return $__unused()((function () {
                  if (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Nil) {
                      return new Data_Tuple.Tuple(v1.value0, Data_Maybe.Nothing.value);
                  };
                  if (v1 instanceof Data_List_Types.Cons) {
                      return new Data_Tuple.Tuple(v1.value0, new Data_Maybe.Just(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.Set.NonEmpty line 93, column 24 - line 95, column 38: " + [ v1.constructor.name ]);
              })());
          };
          return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go)(Data_Set.toUnfoldable(Data_List_Types.unfoldableList)(v));
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (v) {
          return Data_Set.toUnfoldable(dictUnfoldable)(v);
      };
  };
  var toSet = function (v) {
      return v;
  };
  var subset = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return Data_Set.subset(dictOrd)(v)(v1);
          };
      };
  };
  var size = function (v) {
      return Data_Set.size(v);
  };
  var singleton = function (a) {
      return Data_Set.singleton(a);
  };
  var showNonEmptySet = function (dictShow) {
      return new Data_Show.Show(function (s) {
          return "(fromFoldable1 " + (Data_Show.show(Data_List_Types.showNonEmptyList(dictShow))(toUnfoldable1(Data_List_Types.unfoldable1NonEmptyList)(s)) + ")");
      });
  };
  var semigroupNonEmptySet = function (dictOrd) {
      return Data_Set.semigroupSet(dictOrd);
  };
  var properSubset = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return Data_Set.properSubset(dictOrd)(v)(v1);
          };
      };
  };
  var ordNonEmptySet = function (dictOrd) {
      return Data_Set.ordSet(dictOrd);
  };
  var ord1NonEmptySet = Data_Set.ord1Set;
  var min = function (v) {
      return Data_Maybe.fromJust()(Data_Set.findMin(v));
  };
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Set.member(dictOrd)(a)(v);
          };
      };
  };
  var max = function (v) {
      return Data_Maybe.fromJust()(Data_Set.findMax(v));
  };
  var mapMaybe = function (dictOrd) {
      return function (f) {
          return function (v) {
              return Data_Set.mapMaybe(dictOrd)(f)(v);
          };
      };
  };
  var map = function (dictOrd) {
      return function (f) {
          return function (v) {
              return Data_Set.map(dictOrd)(f)(v);
          };
      };
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Set.insert(dictOrd)(a)(v);
          };
      };
  };
  var fromSet = function (s) {
      var $77 = Data_Set.isEmpty(s);
      if ($77) {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just(s);
  };
  var intersection = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return fromSet(Data_Set.intersection(dictOrd)(v)(v1));
          };
      };
  };
  var fromFoldable1 = function (dictFoldable1) {
      return function (dictOrd) {
          return Data_Semigroup_Foldable.foldMap1(dictFoldable1)(semigroupNonEmptySet(dictOrd))(singleton);
      };
  };
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return function ($86) {
              return fromSet(Data_Set.fromFoldable(dictFoldable)(dictOrd)($86));
          };
      };
  };
  var foldableNonEmptySet = Data_Set.foldableSet;
  var foldable1NonEmptySet = new Data_Semigroup_Foldable.Foldable1(function () {
      return foldableNonEmptySet;
  }, function (dictSemigroup) {
      return Data_Semigroup_Foldable.foldMap1(foldable1NonEmptySet)(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictSemigroup) {
      return function (f) {
          return function ($87) {
              return Data_Semigroup_Foldable.foldMap1(Data_List_Types.foldable1NonEmptyList)(dictSemigroup)(f)(toUnfoldable1(Data_List_Types.unfoldable1NonEmptyList)($87));
          };
      };
  });
  var filter = function (dictOrd) {
      return function (f) {
          return function (v) {
              return Data_Set.filter(dictOrd)(f)(v);
          };
      };
  };
  var eqNonEmptySet = function (dictEq) {
      return Data_Set.eqSet(dictEq);
  };
  var eq1NonEmptySet = Data_Set.eq1Set;
  var difference = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return fromSet(Data_Set.difference(dictOrd)(v)(v1));
          };
      };
  };
  var $$delete = function (dictOrd) {
      return function (a) {
          return function (v) {
              return fromSet(Data_Set["delete"](dictOrd)(a)(v));
          };
      };
  };
  var cons = function (dictOrd) {
      return function (a) {
          return function ($88) {
              return NonEmptySet(Data_Set.insert(dictOrd)(a)($88));
          };
      };
  };
  exports["singleton"] = singleton;
  exports["cons"] = cons;
  exports["fromSet"] = fromSet;
  exports["fromFoldable"] = fromFoldable;
  exports["fromFoldable1"] = fromFoldable1;
  exports["toSet"] = toSet;
  exports["toUnfoldable"] = toUnfoldable;
  exports["toUnfoldable1"] = toUnfoldable1;
  exports["map"] = map;
  exports["member"] = member;
  exports["insert"] = insert;
  exports["delete"] = $$delete;
  exports["size"] = size;
  exports["min"] = min;
  exports["max"] = max;
  exports["unionSet"] = unionSet;
  exports["difference"] = difference;
  exports["subset"] = subset;
  exports["properSubset"] = properSubset;
  exports["intersection"] = intersection;
  exports["filter"] = filter;
  exports["mapMaybe"] = mapMaybe;
  exports["eqNonEmptySet"] = eqNonEmptySet;
  exports["eq1NonEmptySet"] = eq1NonEmptySet;
  exports["ordNonEmptySet"] = ordNonEmptySet;
  exports["ord1NonEmptySet"] = ord1NonEmptySet;
  exports["semigroupNonEmptySet"] = semigroupNonEmptySet;
  exports["foldableNonEmptySet"] = foldableNonEmptySet;
  exports["foldable1NonEmptySet"] = foldable1NonEmptySet;
  exports["showNonEmptySet"] = showNonEmptySet;
})(PS["Data.Set.NonEmpty"] = PS["Data.Set.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Prelude = PS["Prelude"];                 
  var CaseInsensitiveString = function (x) {
      return x;
  };
  var showCaseInsensitiveString = new Data_Show.Show(function (v) {
      return "(CaseInsensitiveString " + (Data_Show.show(Data_Show.showString)(v) + ")");
  });
  var newtypeCaseInsensitiveString = new Data_Newtype.Newtype(function (n) {
      return n;
  }, CaseInsensitiveString);
  var eqCaseInsensitiveString = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return Data_String_Common.toLower(v) === Data_String_Common.toLower(v1);
      };
  });
  var ordCaseInsensitiveString = new Data_Ord.Ord(function () {
      return eqCaseInsensitiveString;
  }, function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_Ord.ordString)(Data_String_Common.toLower(v))(Data_String_Common.toLower(v1));
      };
  });
  exports["CaseInsensitiveString"] = CaseInsensitiveString;
  exports["eqCaseInsensitiveString"] = eqCaseInsensitiveString;
  exports["ordCaseInsensitiveString"] = ordCaseInsensitiveString;
  exports["showCaseInsensitiveString"] = showCaseInsensitiveString;
  exports["newtypeCaseInsensitiveString"] = newtypeCaseInsensitiveString;
})(PS["Data.String.CaseInsensitive"] = PS["Data.String.CaseInsensitive"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Gen = PS["Control.Monad.Gen"];
  var Control_Monad_Gen_Class = PS["Control.Monad.Gen.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Char_Gen = PS["Data.Char.Gen"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];                 
  var genString = function (dictMonadRec) {
      return function (dictMonadGen) {
          return function (genChar) {
              return Control_Monad_Gen_Class.sized(dictMonadGen)(function (size) {
                  return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(1)(Data_Ord.max(Data_Ord.ordInt)(1)(size)))(function (v) {
                      return Control_Monad_Gen_Class.resize(dictMonadGen)(Data_Function["const"](v))(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_String_CodeUnits.fromCharArray)(Control_Monad_Gen.unfoldable(dictMonadRec)(dictMonadGen)(Data_Unfoldable.unfoldableArray)(genChar)));
                  });
              });
          };
      };
  };
  var genUnicodeString = function (dictMonadRec) {
      return function (dictMonadGen) {
          return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genUnicodeChar(dictMonadGen));
      };
  };
  var genDigitString = function (dictMonadRec) {
      return function (dictMonadGen) {
          return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genDigitChar(dictMonadGen));
      };
  };
  var genAsciiString$prime = function (dictMonadRec) {
      return function (dictMonadGen) {
          return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen["genAsciiChar'"](dictMonadGen));
      };
  };
  var genAsciiString = function (dictMonadRec) {
      return function (dictMonadGen) {
          return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genAsciiChar(dictMonadGen));
      };
  };
  var genAlphaUppercaseString = function (dictMonadRec) {
      return function (dictMonadGen) {
          return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genAlphaUppercase(dictMonadGen));
      };
  };
  var genAlphaString = function (dictMonadRec) {
      return function (dictMonadGen) {
          return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genAlpha(dictMonadGen));
      };
  };
  var genAlphaLowercaseString = function (dictMonadRec) {
      return function (dictMonadGen) {
          return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genAlphaLowercase(dictMonadGen));
      };
  };
  exports["genString"] = genString;
  exports["genUnicodeString"] = genUnicodeString;
  exports["genAsciiString"] = genAsciiString;
  exports["genAsciiString'"] = genAsciiString$prime;
  exports["genDigitString"] = genDigitString;
  exports["genAlphaString"] = genAlphaString;
  exports["genAlphaLowercaseString"] = genAlphaLowercaseString;
  exports["genAlphaUppercaseString"] = genAlphaUppercaseString;
})(PS["Data.String.Gen"] = PS["Data.String.Gen"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var NonEmptyString = function (x) {
      return x;
  };
  var NonEmptyReplacement = function (x) {
      return x;
  };
  var MakeNonEmpty = function (nes) {
      this.nes = nes;
  };
  var toUpper = function (v) {
      return Data_String_Common.toUpper(v);
  };
  var toString = function (v) {
      return v;
  };
  var toLower = function (v) {
      return Data_String_Common.toLower(v);
  };
  var showNonEmptyString = new Data_Show.Show(function (v) {
      return "(NonEmptyString.unsafeFromString " + (Data_Show.show(Data_Show.showString)(v) + ")");
  });
  var showNonEmptyReplacement = new Data_Show.Show(function (v) {
      return "(NonEmptyReplacement " + (Data_Show.show(showNonEmptyString)(v) + ")");
  });
  var semigroupNonEmptyString = Data_Semigroup.semigroupString;
  var semigroupNonEmptyReplacement = semigroupNonEmptyString;
  var replaceAll = function (pat) {
      return function (v) {
          return function (v1) {
              return Data_String_Common.replaceAll(pat)(v)(v1);
          };
      };
  };
  var replace = function (pat) {
      return function (v) {
          return function (v1) {
              return Data_String_Common.replace(pat)(v)(v1);
          };
      };
  };
  var prependString = function (s1) {
      return function (v) {
          return s1 + v;
      };
  };
  var ordNonEmptyString = Data_Ord.ordString;
  var ordNonEmptyReplacement = ordNonEmptyString;
  var nonEmptyNonEmpty = function (dictIsSymbol) {
      return new MakeNonEmpty(function (p) {
          return Data_Symbol.reflectSymbol(dictIsSymbol)(p);
      });
  };
  var nes = function (dict) {
      return dict.nes;
  };
  var makeNonEmptyBad = function (dictFail) {
      return new MakeNonEmpty(function (v) {
          return "";
      });
  };
  var localeCompare = function (v) {
      return function (v1) {
          return Data_String_Common.localeCompare(v)(v1);
      };
  };
  var liftS = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var joinWith1 = function (dictFoldable1) {
      return function (v) {
          return function ($46) {
              return NonEmptyString(Data_Foldable.intercalate(dictFoldable1.Foldable0())(Data_Monoid.monoidString)(v)($46));
          };
      };
  };
  var joinWith = function (dictFoldable) {
      return function (splice) {
          return function ($47) {
              return Data_Foldable.intercalate(dictFoldable)(Data_Monoid.monoidString)(splice)($47);
          };
      };
  };
  var join1With = function (dictFoldable1) {
      return function (splice) {
          return function ($48) {
              return NonEmptyString(joinWith(dictFoldable1.Foldable0())(splice)($48));
          };
      };
  };
  var fromString = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just(v);
  };
  var stripPrefix = function (pat) {
      return Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(fromString)(liftS(Data_String_CodeUnits.stripPrefix(pat)));
  };
  var stripSuffix = function (pat) {
      return Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(fromString)(liftS(Data_String_CodeUnits.stripSuffix(pat)));
  };
  var trim = function (v) {
      return fromString(Data_String_Common.trim(v));
  };
  var unsafeFromString = function (dictPartial) {
      return function ($49) {
          return Data_Maybe.fromJust(dictPartial)(fromString($49));
      };
  };
  var eqNonEmptyString = Data_Eq.eqString;
  var eqNonEmptyReplacement = eqNonEmptyString;
  var contains = function ($50) {
      return liftS(Data_String_CodeUnits.contains($50));
  };
  var appendString = function (v) {
      return function (s2) {
          return v + s2;
      };
  };
  exports["nes"] = nes;
  exports["NonEmptyString"] = NonEmptyString;
  exports["MakeNonEmpty"] = MakeNonEmpty;
  exports["NonEmptyReplacement"] = NonEmptyReplacement;
  exports["fromString"] = fromString;
  exports["unsafeFromString"] = unsafeFromString;
  exports["toString"] = toString;
  exports["appendString"] = appendString;
  exports["prependString"] = prependString;
  exports["stripPrefix"] = stripPrefix;
  exports["stripSuffix"] = stripSuffix;
  exports["contains"] = contains;
  exports["localeCompare"] = localeCompare;
  exports["replace"] = replace;
  exports["replaceAll"] = replaceAll;
  exports["toLower"] = toLower;
  exports["toUpper"] = toUpper;
  exports["trim"] = trim;
  exports["joinWith"] = joinWith;
  exports["join1With"] = join1With;
  exports["joinWith1"] = joinWith1;
  exports["liftS"] = liftS;
  exports["eqNonEmptyString"] = eqNonEmptyString;
  exports["ordNonEmptyString"] = ordNonEmptyString;
  exports["semigroupNonEmptyString"] = semigroupNonEmptyString;
  exports["showNonEmptyString"] = showNonEmptyString;
  exports["makeNonEmptyBad"] = makeNonEmptyBad;
  exports["nonEmptyNonEmpty"] = nonEmptyNonEmpty;
  exports["eqNonEmptyReplacement"] = eqNonEmptyReplacement;
  exports["ordNonEmptyReplacement"] = ordNonEmptyReplacement;
  exports["semigroupNonEmptyReplacement"] = semigroupNonEmptyReplacement;
  exports["showNonEmptyReplacement"] = showNonEmptyReplacement;
})(PS["Data.String.NonEmpty.Internal"] = PS["Data.String.NonEmpty.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String_NonEmpty = PS["Data.String.NonEmpty"];
  var Data_String_NonEmpty_Internal = PS["Data.String.NonEmpty.Internal"];
  var Prelude = PS["Prelude"];                 
  var CaseInsensitiveNonEmptyString = function (x) {
      return x;
  };
  var showCaseInsensitiveNonEmptyString = new Data_Show.Show(function (v) {
      return "(CaseInsensitiveNonEmptyString " + (Data_Show.show(Data_String_NonEmpty_Internal.showNonEmptyString)(v) + ")");
  });
  var newtypeCaseInsensitiveNonEmptyString = new Data_Newtype.Newtype(function (n) {
      return n;
  }, CaseInsensitiveNonEmptyString);
  var eqCaseInsensitiveNonEmptyString = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return Data_Eq.eq(Data_String_NonEmpty_Internal.eqNonEmptyString)(Data_String_NonEmpty_Internal.toLower(v))(Data_String_NonEmpty_Internal.toLower(v1));
      };
  });
  var ordCaseInsensitiveNonEmptyString = new Data_Ord.Ord(function () {
      return eqCaseInsensitiveNonEmptyString;
  }, function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_String_NonEmpty_Internal.ordNonEmptyString)(Data_String_NonEmpty_Internal.toLower(v))(Data_String_NonEmpty_Internal.toLower(v1));
      };
  });
  exports["CaseInsensitiveNonEmptyString"] = CaseInsensitiveNonEmptyString;
  exports["eqCaseInsensitiveNonEmptyString"] = eqCaseInsensitiveNonEmptyString;
  exports["ordCaseInsensitiveNonEmptyString"] = ordCaseInsensitiveNonEmptyString;
  exports["showCaseInsensitiveNonEmptyString"] = showCaseInsensitiveNonEmptyString;
  exports["newtypeCaseInsensitiveNonEmptyString"] = newtypeCaseInsensitiveNonEmptyString;
})(PS["Data.String.NonEmpty.CaseInsensitive"] = PS["Data.String.NonEmpty.CaseInsensitive"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty = PS["Data.Array.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_String_CodePoints = PS["Data.String.CodePoints"];
  var Data_String_NonEmpty_Internal = PS["Data.String.NonEmpty.Internal"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var toNonEmptyString = Unsafe_Coerce.unsafeCoerce;
  var snoc = function (c) {
      return function (s) {
          return toNonEmptyString(s + Data_String_CodePoints.singleton(c));
      };
  };
  var singleton = function ($12) {
      return toNonEmptyString(Data_String_CodePoints.singleton($12));
  };
  var liftS = Unsafe_Coerce.unsafeCoerce;
  var takeWhile = function (f) {
      return function ($13) {
          return Data_String_NonEmpty_Internal.fromString(liftS(Data_String_CodePoints.takeWhile(f))($13));
      };
  };
  var lastIndexOf$prime = function (pat) {
      return function ($14) {
          return liftS(Data_String_CodePoints["lastIndexOf'"](pat)($14));
      };
  };
  var lastIndexOf = function ($15) {
      return liftS(Data_String_CodePoints.lastIndexOf($15));
  };
  var indexOf$prime = function (pat) {
      return function ($16) {
          return liftS(Data_String_CodePoints["indexOf'"](pat)($16));
      };
  };
  var indexOf = function ($17) {
      return liftS(Data_String_CodePoints.indexOf($17));
  };
  var fromNonEmptyString = Unsafe_Coerce.unsafeCoerce;
  var length = function ($18) {
      return Data_String_CodePoints.length(fromNonEmptyString($18));
  };
  var splitAt = function (i) {
      return function (nes) {
          var v = Data_String_CodePoints.splitAt(i)(fromNonEmptyString(nes));
          return {
              before: Data_String_NonEmpty_Internal.fromString(v.before),
              after: Data_String_NonEmpty_Internal.fromString(v.after)
          };
      };
  };
  var take = function (i) {
      return function (nes) {
          var s = fromNonEmptyString(nes);
          var $9 = i < 1;
          if ($9) {
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just(toNonEmptyString(Data_String_CodePoints.take(i)(s)));
      };
  };
  var toCodePointArray = function ($19) {
      return Data_String_CodePoints.toCodePointArray(fromNonEmptyString($19));
  };
  var toNonEmptyCodePointArray = function ($20) {
      return Data_Maybe.fromJust()(Data_Array_NonEmpty.fromArray(toCodePointArray($20)));
  };
  var uncons = function (nes) {
      var s = fromNonEmptyString(nes);
      return {
          head: Data_Maybe.fromJust()(Data_String_CodePoints.codePointAt(0)(s)),
          tail: Data_String_NonEmpty_Internal.fromString(Data_String_CodePoints.drop(1)(s))
      };
  };
  var fromFoldable1 = function (dictFoldable1) {
      return Data_Semigroup_Foldable.foldMap1(dictFoldable1)(Data_String_NonEmpty_Internal.semigroupNonEmptyString)(singleton);
  };
  var fromCodePointArray = function (v) {
      if (v.length === 0) {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just(toNonEmptyString(Data_String_CodePoints.fromCodePointArray(v)));
  };
  var fromNonEmptyCodePointArray = function ($21) {
      return Data_Maybe.fromJust()(fromCodePointArray(Data_Array_NonEmpty.toArray($21)));
  };
  var dropWhile = function (f) {
      return function ($22) {
          return Data_String_NonEmpty_Internal.fromString(liftS(Data_String_CodePoints.dropWhile(f))($22));
      };
  };
  var drop = function (i) {
      return function (nes) {
          var s = fromNonEmptyString(nes);
          var $11 = i >= Data_String_CodePoints.length(s);
          if ($11) {
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just(toNonEmptyString(Data_String_CodePoints.drop(i)(s)));
      };
  };
  var countPrefix = function ($23) {
      return liftS(Data_String_CodePoints.countPrefix($23));
  };
  var cons = function (c) {
      return function (s) {
          return toNonEmptyString(Data_String_CodePoints.singleton(c) + s);
      };
  };
  var codePointAt = function ($24) {
      return liftS(Data_String_CodePoints.codePointAt($24));
  };
  exports["fromCodePointArray"] = fromCodePointArray;
  exports["fromNonEmptyCodePointArray"] = fromNonEmptyCodePointArray;
  exports["singleton"] = singleton;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["fromFoldable1"] = fromFoldable1;
  exports["toCodePointArray"] = toCodePointArray;
  exports["toNonEmptyCodePointArray"] = toNonEmptyCodePointArray;
  exports["codePointAt"] = codePointAt;
  exports["indexOf"] = indexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["lastIndexOf"] = lastIndexOf;
  exports["lastIndexOf'"] = lastIndexOf$prime;
  exports["uncons"] = uncons;
  exports["length"] = length;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["countPrefix"] = countPrefix;
  exports["splitAt"] = splitAt;
})(PS["Data.String.NonEmpty.CodePoints"] = PS["Data.String.NonEmpty.CodePoints"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty = PS["Data.Array.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_String_NonEmpty_Internal = PS["Data.String.NonEmpty.Internal"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var toNonEmptyString = Unsafe_Coerce.unsafeCoerce;
  var snoc = function (c) {
      return function (s) {
          return toNonEmptyString(s + Data_String_CodeUnits.singleton(c));
      };
  };
  var singleton = function ($13) {
      return toNonEmptyString(Data_String_CodeUnits.singleton($13));
  };
  var liftS = Unsafe_Coerce.unsafeCoerce;
  var takeWhile = function (f) {
      return function ($14) {
          return Data_String_NonEmpty_Internal.fromString(liftS(Data_String_CodeUnits.takeWhile(f))($14));
      };
  };
  var lastIndexOf$prime = function (pat) {
      return function ($15) {
          return liftS(Data_String_CodeUnits["lastIndexOf'"](pat)($15));
      };
  };
  var lastIndexOf = function ($16) {
      return liftS(Data_String_CodeUnits.lastIndexOf($16));
  };
  var indexOf$prime = function (pat) {
      return function ($17) {
          return liftS(Data_String_CodeUnits["indexOf'"](pat)($17));
      };
  };
  var indexOf = function ($18) {
      return liftS(Data_String_CodeUnits.indexOf($18));
  };
  var fromNonEmptyString = Unsafe_Coerce.unsafeCoerce;
  var length = function ($19) {
      return Data_String_CodeUnits.length(fromNonEmptyString($19));
  };
  var splitAt = function (i) {
      return function (nes) {
          var v = Data_String_CodeUnits.splitAt(i)(fromNonEmptyString(nes));
          return {
              before: Data_String_NonEmpty_Internal.fromString(v.before),
              after: Data_String_NonEmpty_Internal.fromString(v.after)
          };
      };
  };
  var take = function (i) {
      return function (nes) {
          var s = fromNonEmptyString(nes);
          var $8 = i < 1;
          if ($8) {
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.take(i)(s)));
      };
  };
  var takeRight = function (i) {
      return function (nes) {
          var s = fromNonEmptyString(nes);
          var $9 = i < 1;
          if ($9) {
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.takeRight(i)(s)));
      };
  };
  var toChar = function ($20) {
      return Data_String_CodeUnits.toChar(fromNonEmptyString($20));
  };
  var toCharArray = function ($21) {
      return Data_String_CodeUnits.toCharArray(fromNonEmptyString($21));
  };
  var toNonEmptyCharArray = function ($22) {
      return Data_Maybe.fromJust()(Data_Array_NonEmpty.fromArray(toCharArray($22)));
  };
  var uncons = function (nes) {
      var s = fromNonEmptyString(nes);
      return {
          head: Data_String_Unsafe.charAt(0)(s),
          tail: Data_String_NonEmpty_Internal.fromString(Data_String_CodeUnits.drop(1)(s))
      };
  };
  var fromFoldable1 = function (dictFoldable1) {
      return function ($23) {
          return Data_Semigroup_Foldable.fold1(dictFoldable1)(Data_String_NonEmpty_Internal.semigroupNonEmptyString)($23);
      };
  };
  var fromCharArray = function (v) {
      if (v.length === 0) {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.fromCharArray(v)));
  };
  var fromNonEmptyCharArray = function ($24) {
      return Data_Maybe.fromJust()(fromCharArray(Data_Array_NonEmpty.toArray($24)));
  };
  var dropWhile = function (f) {
      return function ($25) {
          return Data_String_NonEmpty_Internal.fromString(liftS(Data_String_CodeUnits.dropWhile(f))($25));
      };
  };
  var dropRight = function (i) {
      return function (nes) {
          var s = fromNonEmptyString(nes);
          var $11 = i >= Data_String_CodeUnits.length(s);
          if ($11) {
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.dropRight(i)(s)));
      };
  };
  var drop = function (i) {
      return function (nes) {
          var s = fromNonEmptyString(nes);
          var $12 = i >= Data_String_CodeUnits.length(s);
          if ($12) {
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.drop(i)(s)));
      };
  };
  var countPrefix = function ($26) {
      return liftS(Data_String_CodeUnits.countPrefix($26));
  };
  var cons = function (c) {
      return function (s) {
          return toNonEmptyString(Data_String_CodeUnits.singleton(c) + s);
      };
  };
  var charAt = function ($27) {
      return liftS(Data_String_CodeUnits.charAt($27));
  };
  exports["fromCharArray"] = fromCharArray;
  exports["fromNonEmptyCharArray"] = fromNonEmptyCharArray;
  exports["singleton"] = singleton;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["fromFoldable1"] = fromFoldable1;
  exports["toCharArray"] = toCharArray;
  exports["toNonEmptyCharArray"] = toNonEmptyCharArray;
  exports["charAt"] = charAt;
  exports["toChar"] = toChar;
  exports["indexOf"] = indexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["lastIndexOf"] = lastIndexOf;
  exports["lastIndexOf'"] = lastIndexOf$prime;
  exports["uncons"] = uncons;
  exports["length"] = length;
  exports["take"] = take;
  exports["takeRight"] = takeRight;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["dropRight"] = dropRight;
  exports["dropWhile"] = dropWhile;
  exports["countPrefix"] = countPrefix;
  exports["splitAt"] = splitAt;
})(PS["Data.String.NonEmpty.CodeUnits"] = PS["Data.String.NonEmpty.CodeUnits"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Partial_Unsafe = PS["Partial.Unsafe"];                 
  var unsafeRegex = function (s) {
      return function (f) {
          return Data_Either.fromRight()(Data_String_Regex.regex(s)(f));
      };
  };
  exports["unsafeRegex"] = unsafeRegex;
})(PS["Data.String.Regex.Unsafe"] = PS["Data.String.Regex.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_Gen = PS["Control.Monad.Gen"];
  var Control_Monad_Gen_Class = PS["Control.Monad.Gen.Class"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Prelude = PS["Prelude"];                 
  var genSeconds = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Time_Duration.Seconds)(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(600.0));
  };
  var genMinutes = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Time_Duration.Minutes)(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(600.0));
  };
  var genMilliseconds = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Time_Duration.Milliseconds)(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(600000.0));
  };
  var genHours = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Time_Duration.Hours)(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(240.0));
  };
  var genDays = function (dictMonadGen) {
      return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Time_Duration.Days)(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(42.0));
  };
  exports["genMilliseconds"] = genMilliseconds;
  exports["genSeconds"] = genSeconds;
  exports["genMinutes"] = genMinutes;
  exports["genHours"] = genHours;
  exports["genDays"] = genDays;
})(PS["Data.Time.Duration.Gen"] = PS["Data.Time.Duration.Gen"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var uncurry9 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry8 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry7 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry6 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry5 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0);
      };
  };
  var uncurry4 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0);
      };
  };
  var uncurry3 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1.value0)(v.value1.value1.value0);
      };
  };
  var uncurry2 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1.value0);
      };
  };
  var uncurry10 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry1 = function (f) {
      return function (v) {
          return f(v.value0);
      };
  };
  var tuple9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, Data_Unit.unit)))))))));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, Data_Unit.unit))))))));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, Data_Unit.unit)))))));
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, Data_Unit.unit))))));
                      };
                  };
              };
          };
      };
  };
  var tuple5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, Data_Unit.unit)))));
                  };
              };
          };
      };
  };
  var tuple4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, Data_Unit.unit))));
              };
          };
      };
  };
  var tuple3 = function (a) {
      return function (b) {
          return function (c) {
              return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, Data_Unit.unit)));
          };
      };
  };
  var tuple2 = function (a) {
      return function (b) {
          return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, Data_Unit.unit));
      };
  };
  var tuple10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (j) {
                                          return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, new Data_Tuple.Tuple(j, Data_Unit.unit))))))))));
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple1 = function (a) {
      return new Data_Tuple.Tuple(a, Data_Unit.unit);
  };
  var over9 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1.value1)))))))));
      };
  };
  var over8 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1))))))));
      };
  };
  var over7 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1)))))));
      };
  };
  var over6 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1))))));
      };
  };
  var over5 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1)))));
      };
  };
  var over4 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value0), v.value1.value1.value1.value1))));
      };
  };
  var over3 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value0), v.value1.value1.value1)));
      };
  };
  var over2 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(o(v.value1.value0), v.value1.value1));
      };
  };
  var over10 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1))))))))));
      };
  };
  var over1 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(o(v.value0), v.value1);
      };
  };
  var get9 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get8 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get7 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value0;
  };
  var get6 = function (v) {
      return v.value1.value1.value1.value1.value1.value0;
  };
  var get5 = function (v) {
      return v.value1.value1.value1.value1.value0;
  };
  var get4 = function (v) {
      return v.value1.value1.value1.value0;
  };
  var get3 = function (v) {
      return v.value1.value1.value0;
  };
  var get2 = function (v) {
      return v.value1.value0;
  };
  var get10 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get1 = function (v) {
      return v.value0;
  };
  var curry9 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return function (g) {
                                      return function (h) {
                                          return function (i) {
                                              return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, z))))))))));
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry8 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return function (g) {
                                      return function (h) {
                                          return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, z)))))))));
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry7 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return function (g) {
                                      return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, z))))))));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry6 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, z)))))));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry5 = function (z) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, z))))));
                          };
                      };
                  };
              };
          };
      };
  };
  var curry4 = function (z) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, z)))));
                      };
                  };
              };
          };
      };
  };
  var curry3 = function (z) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, z))));
                  };
              };
          };
      };
  };
  var curry2 = function (z) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, z)));
              };
          };
      };
  };
  var curry10 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return function (g) {
                                      return function (h) {
                                          return function (i) {
                                              return function (j) {
                                                  return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, new Data_Tuple.Tuple(j, z)))))))))));
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry1 = function (z) {
      return function (f) {
          return function (a) {
              return f(new Data_Tuple.Tuple(a, z));
          };
      };
  };
  exports["tuple1"] = tuple1;
  exports["tuple2"] = tuple2;
  exports["tuple3"] = tuple3;
  exports["tuple4"] = tuple4;
  exports["tuple5"] = tuple5;
  exports["tuple6"] = tuple6;
  exports["tuple7"] = tuple7;
  exports["tuple8"] = tuple8;
  exports["tuple9"] = tuple9;
  exports["tuple10"] = tuple10;
  exports["get1"] = get1;
  exports["get2"] = get2;
  exports["get3"] = get3;
  exports["get4"] = get4;
  exports["get5"] = get5;
  exports["get6"] = get6;
  exports["get7"] = get7;
  exports["get8"] = get8;
  exports["get9"] = get9;
  exports["get10"] = get10;
  exports["over1"] = over1;
  exports["over2"] = over2;
  exports["over3"] = over3;
  exports["over4"] = over4;
  exports["over5"] = over5;
  exports["over6"] = over6;
  exports["over7"] = over7;
  exports["over8"] = over8;
  exports["over9"] = over9;
  exports["over10"] = over10;
  exports["uncurry1"] = uncurry1;
  exports["uncurry2"] = uncurry2;
  exports["uncurry3"] = uncurry3;
  exports["uncurry4"] = uncurry4;
  exports["uncurry5"] = uncurry5;
  exports["uncurry6"] = uncurry6;
  exports["uncurry7"] = uncurry7;
  exports["uncurry8"] = uncurry8;
  exports["uncurry9"] = uncurry9;
  exports["uncurry10"] = uncurry10;
  exports["curry1"] = curry1;
  exports["curry2"] = curry2;
  exports["curry3"] = curry3;
  exports["curry4"] = curry4;
  exports["curry5"] = curry5;
  exports["curry6"] = curry6;
  exports["curry7"] = curry7;
  exports["curry8"] = curry8;
  exports["curry9"] = curry9;
  exports["curry10"] = curry10;
})(PS["Data.Tuple.Nested"] = PS["Data.Tuple.Nested"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_List_Trans = PS["Control.Monad.List.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var MonadAff = function (MonadEffect0, liftAff) {
      this.MonadEffect0 = MonadEffect0;
      this.liftAff = liftAff;
  };
  var monadAffAff = new MonadAff(function () {
      return Effect_Aff.monadEffectAff;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  var monadAffContT = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_Cont_Trans.monadEffectContT(dictMonadAff.MonadEffect0());
      }, function ($10) {
          return Control_Monad_Trans_Class.lift(Control_Monad_Cont_Trans.monadTransContT)((dictMonadAff.MonadEffect0()).Monad0())(liftAff(dictMonadAff)($10));
      });
  };
  var monadAffExceptT = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_Except_Trans.monadEffectExceptT(dictMonadAff.MonadEffect0());
      }, function ($11) {
          return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)((dictMonadAff.MonadEffect0()).Monad0())(liftAff(dictMonadAff)($11));
      });
  };
  var monadAffListT = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_List_Trans.monadEffectListT(dictMonadAff.MonadEffect0());
      }, function ($12) {
          return Control_Monad_Trans_Class.lift(Control_Monad_List_Trans.monadTransListT)((dictMonadAff.MonadEffect0()).Monad0())(liftAff(dictMonadAff)($12));
      });
  };
  var monadAffMaybe = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_Maybe_Trans.monadEffectMaybe(dictMonadAff.MonadEffect0());
      }, function ($13) {
          return Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)((dictMonadAff.MonadEffect0()).Monad0())(liftAff(dictMonadAff)($13));
      });
  };
  var monadAffRWS = function (dictMonadAff) {
      return function (dictMonoid) {
          return new MonadAff(function () {
              return Control_Monad_RWS_Trans.monadEffectRWS(dictMonoid)(dictMonadAff.MonadEffect0());
          }, function ($14) {
              return Control_Monad_Trans_Class.lift(Control_Monad_RWS_Trans.monadTransRWST(dictMonoid))((dictMonadAff.MonadEffect0()).Monad0())(liftAff(dictMonadAff)($14));
          });
      };
  };
  var monadAffReader = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_Reader_Trans.monadEffectReader(dictMonadAff.MonadEffect0());
      }, function ($15) {
          return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)((dictMonadAff.MonadEffect0()).Monad0())(liftAff(dictMonadAff)($15));
      });
  };
  var monadAffState = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_State_Trans.monadEffectState(dictMonadAff.MonadEffect0());
      }, function ($16) {
          return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)((dictMonadAff.MonadEffect0()).Monad0())(liftAff(dictMonadAff)($16));
      });
  };
  var monadAffWriter = function (dictMonadAff) {
      return function (dictMonoid) {
          return new MonadAff(function () {
              return Control_Monad_Writer_Trans.monadEffectWriter(dictMonoid)(dictMonadAff.MonadEffect0());
          }, function ($17) {
              return Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid))((dictMonadAff.MonadEffect0()).Monad0())(liftAff(dictMonadAff)($17));
          });
      };
  };
  exports["liftAff"] = liftAff;
  exports["MonadAff"] = MonadAff;
  exports["monadAffAff"] = monadAffAff;
  exports["monadAffContT"] = monadAffContT;
  exports["monadAffExceptT"] = monadAffExceptT;
  exports["monadAffListT"] = monadAffListT;
  exports["monadAffMaybe"] = monadAffMaybe;
  exports["monadAffReader"] = monadAffReader;
  exports["monadAffRWS"] = monadAffRWS;
  exports["monadAffState"] = monadAffState;
  exports["monadAffWriter"] = monadAffWriter;
})(PS["Effect.Aff.Class"] = PS["Effect.Aff.Class"] || {});
(function(exports) {
    "use strict";

  exports.mkEffectFn1 = function mkEffectFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };

  exports.mkEffectFn2 = function mkEffectFn2(fn) {
    return function(a, b) {
      return fn(a)(b)();
    };
  };

  exports.mkEffectFn3 = function mkEffectFn3(fn) {
    return function(a, b, c) {
      return fn(a)(b)(c)();
    };
  };

  exports.mkEffectFn4 = function mkEffectFn4(fn) {
    return function(a, b, c, d) {
      return fn(a)(b)(c)(d)();
    };
  };

  exports.mkEffectFn5 = function mkEffectFn5(fn) {
    return function(a, b, c, d, e) {
      return fn(a)(b)(c)(d)(e)();
    };
  };

  exports.mkEffectFn6 = function mkEffectFn6(fn) {
    return function(a, b, c, d, e, f) {
      return fn(a)(b)(c)(d)(e)(f)();
    };
  };

  exports.mkEffectFn7 = function mkEffectFn7(fn) {
    return function(a, b, c, d, e, f, g) {
      return fn(a)(b)(c)(d)(e)(f)(g)();
    };
  };

  exports.mkEffectFn8 = function mkEffectFn8(fn) {
    return function(a, b, c, d, e, f, g, h) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)();
    };
  };

  exports.mkEffectFn9 = function mkEffectFn9(fn) {
    return function(a, b, c, d, e, f, g, h, i) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)();
    };
  };

  exports.mkEffectFn10 = function mkEffectFn10(fn) {
    return function(a, b, c, d, e, f, g, h, i, j) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)();
    };
  };

  exports.runEffectFn1 = function runEffectFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };

  exports.runEffectFn2 = function runEffectFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };

  exports.runEffectFn3 = function runEffectFn3(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function() {
            return fn(a, b, c);
          };
        };
      };
    };
  };

  exports.runEffectFn4 = function runEffectFn4(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function() {
              return fn(a, b, c, d);
            };
          };
        };
      };
    };
  };

  exports.runEffectFn5 = function runEffectFn5(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function() {
                return fn(a, b, c, d, e);
              };
            };
          };
        };
      };
    };
  };

  exports.runEffectFn6 = function runEffectFn6(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function() {
                  return fn(a, b, c, d, e, f);
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runEffectFn7 = function runEffectFn7(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function(g) {
                  return function() {
                    return fn(a, b, c, d, e, f, g);
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runEffectFn8 = function runEffectFn8(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function(g) {
                  return function(h) {
                    return function() {
                      return fn(a, b, c, d, e, f, g, h);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runEffectFn9 = function runEffectFn9(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function(g) {
                  return function(h) {
                    return function(i) {
                      return function() {
                        return fn(a, b, c, d, e, f, g, h, i);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runEffectFn10 = function runEffectFn10(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function(g) {
                  return function(h) {
                    return function(i) {
                      return function(j) {
                        return function() {
                          return fn(a, b, c, d, e, f, g, h, i, j);
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Uncurried"];
  var Effect = PS["Effect"];
  exports["mkEffectFn1"] = $foreign.mkEffectFn1;
  exports["mkEffectFn2"] = $foreign.mkEffectFn2;
  exports["mkEffectFn3"] = $foreign.mkEffectFn3;
  exports["mkEffectFn4"] = $foreign.mkEffectFn4;
  exports["mkEffectFn5"] = $foreign.mkEffectFn5;
  exports["mkEffectFn6"] = $foreign.mkEffectFn6;
  exports["mkEffectFn7"] = $foreign.mkEffectFn7;
  exports["mkEffectFn8"] = $foreign.mkEffectFn8;
  exports["mkEffectFn9"] = $foreign.mkEffectFn9;
  exports["mkEffectFn10"] = $foreign.mkEffectFn10;
  exports["runEffectFn1"] = $foreign.runEffectFn1;
  exports["runEffectFn2"] = $foreign.runEffectFn2;
  exports["runEffectFn3"] = $foreign.runEffectFn3;
  exports["runEffectFn4"] = $foreign.runEffectFn4;
  exports["runEffectFn5"] = $foreign.runEffectFn5;
  exports["runEffectFn6"] = $foreign.runEffectFn6;
  exports["runEffectFn7"] = $foreign.runEffectFn7;
  exports["runEffectFn8"] = $foreign.runEffectFn8;
  exports["runEffectFn9"] = $foreign.runEffectFn9;
  exports["runEffectFn10"] = $foreign.runEffectFn10;
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Prelude = PS["Prelude"];                 
  var EffectFnCanceler = function (x) {
      return x;
  };
  var EffectFnAff = function (x) {
      return x;
  };
  var fromEffectFnAff = function (v) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = v(function ($4) {
                  return k(Data_Either.Left.create($4))();
              }, function ($5) {
                  return k(Data_Either.Right.create($5))();
              });
              return function (e) {
                  return Effect_Aff.makeAff(function (k2) {
                      return function __do() {
                          v1(e, function ($6) {
                              return k2(Data_Either.Left.create($6))();
                          }, function ($7) {
                              return k2(Data_Either.Right.create($7))();
                          });
                          return Effect_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["EffectFnAff"] = EffectFnAff;
  exports["EffectFnCanceler"] = EffectFnCanceler;
  exports["fromEffectFnAff"] = fromEffectFnAff;
})(PS["Effect.Aff.Compat"] = PS["Effect.Aff.Compat"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Unsafe = PS["Effect.Unsafe"];                 
  var unsafeThrowException = function ($0) {
      return Effect_Unsafe.unsafePerformEffect(Effect_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Effect_Exception.error($1));
  };
  exports["unsafeThrowException"] = unsafeThrowException;
  exports["unsafeThrow"] = unsafeThrow;
})(PS["Effect.Exception.Unsafe"] = PS["Effect.Exception.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.now = function () {
    return Date.now();
  };
})(PS["Effect.Now"] = PS["Effect.Now"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Now"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_DateTime_Instant = PS["Data.DateTime.Instant"];
  var Data_Functor = PS["Data.Functor"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];                 
  var nowTime = Data_Functor.map(Effect.functorEffect)(function ($0) {
      return Data_DateTime.time(Data_DateTime_Instant.toDateTime($0));
  })($foreign.now);
  var nowDateTime = Data_Functor.map(Effect.functorEffect)(Data_DateTime_Instant.toDateTime)($foreign.now);
  var nowDate = Data_Functor.map(Effect.functorEffect)(function ($1) {
      return Data_DateTime.date(Data_DateTime_Instant.toDateTime($1));
  })($foreign.now);
  exports["nowDateTime"] = nowDateTime;
  exports["nowDate"] = nowDate;
  exports["nowTime"] = nowTime;
  exports["now"] = $foreign.now;
})(PS["Effect.Now"] = PS["Effect.Now"] || {});
(function(exports) {exports.globEffect = function(reject){
    return function(resolve){
      return function(pattern){
        return function(){
          debugger
          const glob = require("glob");
          return glob(pattern, {}, function(err, results){
            if(err){
              reject(err)();
            }else{
              resolve(results)(); 
            }
          });
        };
      };
    };
  };
})(PS["Elm.Alchemy"] = PS["Elm.Alchemy"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String_Common = PS["Data.String.Common"];                 
  var bracket = function (str) {
      return "\"" + (str + "\"");
  };
  var renderBlankPage = function (application) {
      return function (pageName) {
          return "\x0amodule " + (application + (".Page." + (pageName + (" exposing (Route, Model, Msg, route, page)\x0a\x0aimport Browser exposing (Document)\x0aimport Browser.Navigation exposing (Key)\x0aimport Html exposing (text, h1)\x0aimport Url exposing (Url)\x0aimport Url.Parser exposing (s, Parser, map)\x0aimport " + (application + (".Root as Root\x0a\x0atype Msg\x0a  = NoOp\x0a\x0a\x0atype alias Model \x0a  = {}\x0a\x0a\x0atype alias Route \x0a  = ()\x0a\x0a\x0aroute : Parser (Route -> a) a\x0aroute =\x0a  map () (s " + (bracket(Data_String_Common.toLower(pageName)) + (")\x0a\x0a\x0ainit : Url -> Route -> Root.Model -> ( Model, Cmd Msg )\x0ainit _ _ _ \x0a  = ( {}, Cmd.none )\x0a\x0a\x0aupdate : Msg -> Root.Model -> Model -> ( Root.Model, Model, Cmd Msg )\x0aupdate msg root model \x0a  = ( root, model, Cmd.none )\x0a\x0a\x0asubscriptions : Root.Model -> Sub Msg\x0asubscriptions model \x0a  = Sub.none\x0a\x0a\x0aview : Root.Model -> Model -> Document Msg\x0aview state model = \x0a  { title = " + (bracket(pageName + (" - " + application)) + ("\x0a  , body = [ h1 [] [text " + (bracket(pageName) + "] ]\x0a  }\x0a\x0a\x0apage : Root.Page a Route Model Msg\x0apage = \x0a  { route = route\x0a  , init = init\x0a  , view = view\x0a  , update = update\x0a  , subscriptions = subscriptions\x0a  }\x0a\x0a")))))))))));
      };
  };
  exports["bracket"] = bracket;
  exports["renderBlankPage"] = renderBlankPage;
})(PS["Elm.Alchemy.Template.Page"] = PS["Elm.Alchemy.Template.Page"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Semigroup = PS["Data.Semigroup"];                 
  var renderRoot = function (application) {
      return "\x0amodule " + (application + ".Root exposing (..)\x0a\x0aimport Browser exposing (Document)\x0aimport Browser.Navigation exposing (Key)\x0aimport Url exposing (Url)\x0aimport Url.Parser exposing (Parser)\x0a\x0atype alias Flags \x0a  = ()\x0a\x0a-- Application global state type.\x0a\x0a\x0atype alias Model \x0a  = { key : Key }\x0a  \x0a\x0atype Msg\x0a  = NoOp\x0a\x0a\x0atype alias Page a route model msg =\x0a  { route : Parser ( route -> a ) a\x0a  , init : Url -> route -> Model -> ( model, Cmd msg )\x0a  , update : msg -> Model -> model -> ( Model, model, Cmd msg )\x0a  , subscriptions : Model -> Sub msg\x0a  , view : Model -> model -> Document msg\x0a  }\x0a\x0ainit : Flags -> Url -> Key -> ( Model, Cmd Msg )\x0ainit _ _ key \x0a  = ( { key = key }, Cmd.none )\x0a\x0a\x0aupdate : Msg -> Model -> ( Model, Cmd Msg )\x0aupdate msg model \x0a  = (model, Cmd.none)\x0a\x0a\x0asubscriptions : Sub Msg\x0asubscriptions \x0a  = Sub.none\x0a\x0a");
  };
  exports["renderRoot"] = renderRoot;
})(PS["Elm.Alchemy.Template.Root"] = PS["Elm.Alchemy.Template.Root"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Prelude = PS["Prelude"];                 
  var renderRouter = function (application) {
      return function (pages) {
          return "\x0a--------------------------\x0a-- Auto-generated codes --\x0a-- Do not edit this     -- \x0a--------------------------\x0a\x0amodule " + (application + (".Alchemy exposing (Model, Msg, program)\x0a\x0aimport Browser exposing (Document, UrlRequest(..), application)\x0aimport Browser.Navigation exposing (Key, load, pushUrl)\x0aimport Html as Html exposing (Html, text)\x0aimport Maybe as Maybe\x0aimport Url exposing (Url)\x0aimport Url.Parser as UrlParser exposing (s, oneOf, Parser, parse, (</>))\x0aimport " + (application + (".Root as Root\x0a" + (Data_String_Common.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "import " + (application + (".Page." + (page + (" as " + page))));
          })(pages)) + ("\x0a\x0atype Model = Model \x0a  { route : RouteState\x0a  , state : Root.Model\x0a  , key : Key\x0a  }\x0a\x0atype Route \x0a  = " + (Data_String_Common.joinWith("\x0a  | ")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "Route__" + (page + (" " + (page + ".Route")));
          })(pages)) + ("\x0a\x0atype RouteState \x0a  = " + (Data_String_Common.joinWith("\x0a  | ")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "State__" + (page + (" " + (page + ".Model")));
          })(pages)) + ("\x0a  \x0atype Msg\x0a  = UrlRequest UrlRequest\x0a  | Navigate Url\x0a  | Msg__Root Root.Msg\x0a" + (Data_String_Common.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "  | Msg__" + (page + (" " + (page + ".Msg")));
          })(pages)) + ("\x0a\x0a\x0aupdate : Msg -> Model -> ( Model, Cmd Msg )\x0aupdate msg (Model model) = \x0a  case msg of \x0a\x0a    Msg__Root rootMsg -> case Root.update rootMsg model.state of\x0a      (rootModel_, rootCmd) -> \x0a          (Model { model | state = rootModel_ }, Cmd.map Msg__Root rootCmd)\x0a\x0a    UrlRequest urlRequest ->\x0a      case urlRequest of\x0a        Internal url ->\x0a          ( Model model\x0a          , pushUrl model.key (Url.toString url)\x0a          )\x0a\x0a        External url ->\x0a          ( Model model\x0a          , load url\x0a          )\x0a\x0a    Navigate location -> \x0a      let \x0a          route = \x0a            parseLocation location \x0a      in \x0a      case route of \x0a\x0a" + (Data_String_Common.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "        Route__" + (page + (" routeValue -> \x0a          case \x0a            let \x0a              page = " + (page + (".page\x0a            in page.init location routeValue model.state \x0a          of \x0a            (initialModel, initialCmd) -> \x0a                ( Model { model | route = State__" + (page + (" initialModel }\x0a                , Cmd.map Msg__" + (page + " initialCmd\x0a                )\x0a        ")))))));
          })(pages)) + ("\x0a\x0a\x0a" + (Data_String_Common.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "\x0a    Msg__" + (page + (" pageMsg -> \x0a      case model.route of \x0a        State__" + (page + (" pageModel -> \x0a          case \x0a            let \x0a              page = " + (page + (".page \x0a            in \x0a            page.update pageMsg model.state pageModel \x0a          of \x0a            (model_, pageModel_, pageCmd ) -> \x0a              (Model { model | state = model_, route = State__" + (page + (" pageModel_ }, Cmd.map Msg__" + (page + (" pageCmd)\x0a        \x0a        " + (function () {
                  var $0 = 1 < Data_Array.length(pages);
                  if ($0) {
                      return "_ -> (Model model, Cmd.none)";
                  };
                  return "";
              })()))))))))));
          })(pages)) + ("\x0a\x0adocumentMap : (msg -> Msg) -> Document msg -> Document Msg\x0adocumentMap f { title, body } = { title = title, body = List.map (Html.map f) body }\x0a\x0aview : Model -> Document Msg\x0aview (Model model) = case model.route of \x0a\x0a" + (Data_String_Common.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "  State__" + (page + (" m -> documentMap Msg__" + (page + (" (let page = " + (page + ".page in page.view model.state m)")))));
          })(pages)) + ("\x0a\x0amatchers : Parser (Route -> a) a\x0amatchers =\x0a    oneOf\x0a        [ " + (Data_String_Common.joinWith("\x0a        , ")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "UrlParser.map Route__" + (page + (" (let page = " + (page + ".page in page.route)")));
          })(pages)) + ("\x0a        ]   \x0a\x0aparseLocation : Url -> Route\x0aparseLocation location =\x0a    case parse matchers location of\x0a        Just route ->\x0a            route\x0a\x0a        Nothing ->\x0a            Route__NotFound ()\x0a\x0anavigate : Url -> Msg \x0anavigate = Navigate\x0a\x0ainit : Root.Flags -> Url -> Key -> ( Model, Cmd Msg )\x0ainit flags location key = \x0a  let route = parseLocation location in \x0a    case Root.init flags location key of \x0a      (rootInitialModel, rootInitialCmd) -> \x0a        case route of\x0a\x0a" + (Data_String_Common.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "          Route__" + (page + (" routeValue -> case let page = " + (page + (".page in page.init location routeValue rootInitialModel of\x0a                (initialModel, initialCmd) -> \x0a                    ( Model \x0a                        { route = State__" + (page + (" initialModel\x0a                        , state = rootInitialModel\x0a                        , key = key\x0a                        }\x0a                    , Cmd.batch \x0a                      [ Cmd.map Msg__Root rootInitialCmd\x0a                      , Cmd.map Msg__" + (page + " initialCmd\x0a                      ]\x0a                    )\x0a                ")))))));
          })(pages)) + ("\x0a\x0asubscriptions : Model -> Sub Msg\x0asubscriptions (Model model) = \x0a    Sub.batch\x0a        (Sub.map Msg__Root Root.subscriptions :: [ " + (Data_String_Common.joinWith("\x0a        , ")(Data_Functor.map(Data_Functor.functorArray)(function (page) {
              return "Sub.map Msg__" + (page + (" (let page = " + (page + ".page in page.subscriptions model.state)")));
          })(pages)) + "  \x0a        ])\x0a\x0a\x0aprogram : Program Root.Flags Model Msg\x0aprogram =\x0a    application\x0a        { init = init\x0a        , view = view\x0a        , update = update\x0a        , subscriptions = subscriptions\x0a        , onUrlRequest = UrlRequest\x0a        , onUrlChange = Navigate\x0a        }\x0a        \x0a\x0a")))))))))))))))))))))));
      };
  };
  exports["renderRouter"] = renderRouter;
})(PS["Elm.Alchemy.Template.Router"] = PS["Elm.Alchemy.Template.Router"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Semigroup = PS["Data.Semigroup"];                 
  var renderStyle = function (application) {
      return function (pages) {
          return "\x0a/////////////////////////\x0a// AUTO GENERATED FILE //\x0a// DO NOT EDIT THIS    //\x0a/////////////////////////\x0a${\x0a  pages.filter(page => fs.existsSync(`./src/" + (application + "/Page/${page}.css`)).map(page => {\x0a    return `import './Page/${page}.css'`\x0a  }).join(\"\\n\")\x0a}\x0a");
      };
  };
  exports["renderStyle"] = renderStyle;
})(PS["Elm.Alchemy.Template.Style"] = PS["Elm.Alchemy.Template.Style"] || {});
(function(exports) {
    "use strict";
  var $foreign = PS["Elm.Alchemy"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Data_Traversable = PS["Data.Traversable"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Class_Console = PS["Effect.Class.Console"];
  var Effect_Console = PS["Effect.Console"];
  var Effect_Exception = PS["Effect.Exception"];
  var Elm_Alchemy_Template_Page = PS["Elm.Alchemy.Template.Page"];
  var Elm_Alchemy_Template_Root = PS["Elm.Alchemy.Template.Root"];
  var Elm_Alchemy_Template_Router = PS["Elm.Alchemy.Template.Router"];
  var Elm_Alchemy_Template_Style = PS["Elm.Alchemy.Template.Style"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_Encoding = PS["Node.Encoding"];
  var Node_FS_Aff = PS["Node.FS.Aff"];
  var Node_FS_Stats = PS["Node.FS.Stats"];
  var Node_Path = PS["Node.Path"];
  var Node_Process = PS["Node.Process"];
  var Prelude = PS["Prelude"];                 
  var validatePageName = function (pageName) {
      var v = Data_Functor.map(Data_Either.functorEither)(Data_Function.flip(Data_String_Regex.test)(pageName))(Data_String_Regex.regex("[A-Z][a-zA-Z0-9_]*")(Data_String_Regex_Flags.noFlags));
      if (v instanceof Data_Either.Left) {
          return false;
      };
      if (v instanceof Data_Either.Right) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Elm.Alchemy line 157, column 29 - line 159, column 27: " + [ v.constructor.name ]);
  };
  var usage = "\x0aUsage: \x0a\x0a  alchelmy init <application>\x0a\x0a    Create new application. \x0a\x0a  alchelmy update    \x0a\x0a    (Re)Generate Alchemy.elm, alchemy.js\x0a\x0a  alchelmy new <name>      \x0a\x0a    Create new page named <name>. <name> must be an valid module name.\x0a";
  var glob = function (pattern) {
      return Effect_Aff.makeAff(function (resolve) {
          return function __do() {
              var v = $foreign.globEffect(function (err) {
                  return resolve(new Data_Either.Left(err));
              })(function (results) {
                  return resolve(new Data_Either.Right(results));
              })(pattern)();
              return Effect_Aff.nonCanceler;
          };
      });
  };
  var getApplicationName = Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.readdir("./src"))(function (v) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable["for"](Effect_Aff.applicativeAff)(Data_Traversable.traversableArray)(v)(function (file) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ "./src/" ])(file)))(function (v1) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.stat(v1))(function (v2) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)((function () {
                      var $37 = Node_FS_Stats.isDirectory(v2);
                      if ($37) {
                          return new Data_Maybe.Just(file);
                      };
                      return Data_Maybe.Nothing.value;
                  })());
              });
          });
      }))(function (v1) {
          var dirs = Data_Array.catMaybes(v1);
          if (dirs.length === 1) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(dirs[0]);
          };
          return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Cannot decide the application name. Too many directory or no directory in src directory. "));
      });
  });
  var pageExists = function (pageName) {
      var $41 = validatePageName(pageName);
      if ($41) {
          return Control_Bind.bind(Effect_Aff.bindAff)(getApplicationName)(function (v) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ "./src/", v, "Page" ])(pageName + ".elm")))(function (v1) {
                  return Node_FS_Aff.exists(v1);
              });
          });
      };
      return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Invalid page name: " + (pageName + ". An page name must be an valid Elm module name.")));
  };
  var generateNewPage = function (pageName) {
      var $44 = validatePageName(pageName);
      if ($44) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Generating new page: " + pageName))(function () {
              return Control_Bind.bind(Effect_Aff.bindAff)(getApplicationName)(function (v) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Application found: " + v))(function () {
                      return Control_Bind.bind(Effect_Aff.bindAff)(pageExists(pageName))(function (v1) {
                          if (v1) {
                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                  Effect_Console.error("[Error] Directory '" + (pageName + "' already exists."))();
                                  return Node_Process.exit(1)();
                              });
                          };
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ "./src/", v ])("Page")))(function (v2) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Node_FS_Aff.mkdir(v2))(function () {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ v2 ])(pageName + ".css")))(function (v3) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Buffer.fromString("")(Node_Encoding.UTF8.value)))(function (v4) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Node_FS_Aff.writeFile(v3)(v4))(function () {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ v2 ])(pageName + ".elm")))(function (v5) {
                                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Buffer.fromString(Elm_Alchemy_Template_Page.renderBlankPage(v)(pageName))(Node_Encoding.UTF8.value)))(function (v6) {
                                                      return Node_FS_Aff.writeFile(v5)(v6);
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      };
      return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Invalid page name: " + (pageName + ". An page name must be an valid Elm module name.")));
  };
  var generateRouter = function (argv) {
      return Control_Bind.bind(Effect_Aff.bindAff)(getApplicationName)(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ "src", v ])("Root.elm")))(function (v1) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.exists(v1))(function (v2) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(!v2)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Generating " + (v + "/Root.elm")))(function () {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ ".", "src", v ])("Root.elm")))(function (v3) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Buffer.fromString(Elm_Alchemy_Template_Root.renderRoot(v))(Node_Encoding.UTF8.value)))(function (v4) {
                              return Node_FS_Aff.writeFile(v3)(v4);
                          });
                      });
                  })))(function () {
                      return Control_Bind.bind(Effect_Aff.bindAff)(pageExists("NotFound"))(function (v3) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(!v3)(generateNewPage("NotFound")))(function () {
                              return Control_Bind.bind(Effect_Aff.bindAff)(glob("./src/" + (v + "/Page/*.elm")))(function (v4) {
                                  var pages = Data_Functor.map(Data_Functor.functorArray)(function (p) {
                                      return Node_Path.basenameWithoutExt(p)(".elm");
                                  })(v4);
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(Data_Array["null"](pages))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Exception["throw"]("Pege not found."))))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Generating ./src/" + (v + ("/Alchemy.elm for " + (Data_String_Common.joinWith(", ")(pages) + "...")))))(function () {
                                          var source = Elm_Alchemy_Template_Router.renderRouter(v)(pages);
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Buffer.fromString(source)(Node_Encoding.UTF8.value)))(function (v5) {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Node_FS_Aff.writeFile("./src/" + (v + "/Alchemy.elm"))(v5))(function () {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Generating ./src/" + (v + "/alchemy.js...")))(function () {
                                                      var indexSource = Elm_Alchemy_Template_Style.renderStyle(v)(pages);
                                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ "./src/", v ])("alchemy.js")))(function (v6) {
                                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Buffer.fromString(indexSource)(Node_Encoding.UTF8.value)))(function (v7) {
                                                              return Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Done.");
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var createApplication = function (application) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ "src" ])(application)))(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.exists(v))(function (v1) {
              if (v1) {
                  return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Directory " + (application + " already exists.")));
              };
              var v2 = Data_Functor.map(Data_Either.functorEither)(Data_Function.flip(Data_String_Regex.test)(application))(Data_String_Regex.regex("[A-Z][a-zA-Z0-9_]*")(Data_String_Regex_Flags.noFlags));
              if (v2 instanceof Data_Either.Left) {
                  return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Invalid Regexp"));
              };
              if (v2 instanceof Data_Either.Right && v2.value0) {
                  return Node_FS_Aff.mkdir(v);
              };
              if (v2 instanceof Data_Either.Right && !v2.value0) {
                  return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error(application + " is not a valid package name."));
              };
              throw new Error("Failed pattern match at Elm.Alchemy line 43, column 14 - line 46, column 95: " + [ v2.constructor.name ]);
          });
      });
  };
  var main = function __do() {
      var v = Node_Process.argv();
      var v1 = Data_Array.drop(2)(v);
      if (v1.length === 2 && v1[0] === "init") {
          return Effect_Aff.launchAff_(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(createApplication(v1[1]))(function () {
              return generateRouter(v);
          }))();
      };
      if (v1.length === 2 && v1[0] === "new") {
          var $74 = validatePageName(v1[1]);
          if ($74) {
              return Effect_Aff.launchAff_(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(generateNewPage(v1[1]))(function () {
                  return generateRouter(v);
              }))();
          };
          Effect_Console.error("Invalid page name: " + (v1[1] + ". An page name must be an valid Elm module name."))();
          return Node_Process.exit(1)();
      };
      if (v1.length === 1 && v1[0] === "update") {
          return Effect_Aff.launchAff_(generateRouter(v))();
      };
      if (v1.length === 0) {
          return Effect_Class_Console.log(Effect_Class.monadEffectEffect)(usage)();
      };
      if (v1.length === 1 && v1[0] === "--help") {
          return Effect_Class_Console.log(Effect_Class.monadEffectEffect)(usage)();
      };
      if (v1.length === 1 && v1[0] === "-h") {
          return Effect_Class_Console.log(Effect_Class.monadEffectEffect)(usage)();
      };
      Effect_Console.error("[ERROR] Unknown command: " + Data_String_Common.joinWith(" ")(v1))();
      return Node_Process.exit(1)();
  };
  exports["glob"] = glob;
  exports["createApplication"] = createApplication;
  exports["generateRouter"] = generateRouter;
  exports["getApplicationName"] = getApplicationName;
  exports["main"] = main;
  exports["usage"] = usage;
  exports["validatePageName"] = validatePageName;
  exports["pageExists"] = pageExists;
  exports["generateNewPage"] = generateNewPage;
  exports["globEffect"] = $foreign.globEffect;
})(PS["Elm.Alchemy"] = PS["Elm.Alchemy"] || {});
(function(exports) {
    "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Foreign.Index"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Foreign = PS["Foreign"];
  var Prelude = PS["Prelude"];                 
  var Index = function (errorAt, hasOwnProperty, hasProperty, index) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.index = index;
  };
  var Indexable = function (ix) {
      this.ix = ix;
  };
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(Foreign.fail(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
      };
  };
  var readProp = unsafeReadProp;
  var readIndex = unsafeReadProp;
  var ix = function (dict) {
      return dict.ix;
  };
  var index = function (dict) {
      return dict.index;
  };
  var indexableExceptT = new Indexable(function (dictIndex) {
      return function (f) {
          return function (i) {
              return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Function.flip(index(dictIndex))(i))(f);
          };
      };
  });
  var indexableForeign = new Indexable(function (dictIndex) {
      return index(dictIndex);
  });
  var hasPropertyImpl = function (v) {
      return function (value) {
          if (Foreign.isNull(value)) {
              return false;
          };
          if (Foreign.isUndefined(value)) {
              return false;
          };
          if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasProperty(v, value);
          };
          return false;
      };
  };
  var hasProperty = function (dict) {
      return dict.hasProperty;
  };
  var hasOwnPropertyImpl = function (v) {
      return function (value) {
          if (Foreign.isNull(value)) {
              return false;
          };
          if (Foreign.isUndefined(value)) {
              return false;
          };
          if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasOwnProperty(v, value);
          };
          return false;
      };
  };
  var indexInt = new Index(Foreign.ErrorAtIndex.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readIndex));
  var indexString = new Index(Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readProp));
  var hasOwnProperty = function (dict) {
      return dict.hasOwnProperty;
  };
  var errorAt = function (dict) {
      return dict.errorAt;
  };
  exports["Index"] = Index;
  exports["Indexable"] = Indexable;
  exports["readProp"] = readProp;
  exports["readIndex"] = readIndex;
  exports["ix"] = ix;
  exports["index"] = index;
  exports["hasProperty"] = hasProperty;
  exports["hasOwnProperty"] = hasOwnProperty;
  exports["errorAt"] = errorAt;
  exports["indexString"] = indexString;
  exports["indexInt"] = indexInt;
  exports["indexableForeign"] = indexableForeign;
  exports["indexableExceptT"] = indexableExceptT;
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function(exports) {
    "use strict";

  exports.unsafeKeys = Object.keys || function (value) {
    var keys = [];
    for (var prop in value) {
      if (Object.prototype.hasOwnProperty.call(value, prop)) {
        keys.push(prop);
      }
    }
    return keys;
  };
})(PS["Foreign.Keys"] = PS["Foreign.Keys"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Foreign.Keys"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Foreign = PS["Foreign"];
  var Prelude = PS["Prelude"];                 
  var keys = function (value) {
      if (Foreign.isNull(value)) {
          return Foreign.fail(new Foreign.TypeMismatch("object", "null"));
      };
      if (Foreign.isUndefined(value)) {
          return Foreign.fail(new Foreign.TypeMismatch("object", "undefined"));
      };
      if (Foreign.typeOf(value) === "object") {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeKeys(value));
      };
      if (Data_Boolean.otherwise) {
          return Foreign.fail(new Foreign.TypeMismatch("object", Foreign.typeOf(value)));
      };
      throw new Error("Failed pattern match at Foreign.Keys line 15, column 1 - line 15, column 36: " + [ value.constructor.name ]);
  };
  exports["keys"] = keys;
})(PS["Foreign.Keys"] = PS["Foreign.Keys"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Gen = PS["Control.Monad.Gen"];
  var Control_Monad_Gen_Class = PS["Control.Monad.Gen.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Tuple = PS["Data.Tuple"];
  var Foreign_Object = PS["Foreign.Object"];
  var Prelude = PS["Prelude"];                 
  var genForeignObject = function (dictMonadRec) {
      return function (dictMonadGen) {
          return function (genKey) {
              return function (genValue) {
                  return Control_Monad_Gen_Class.sized(dictMonadGen)(function (size) {
                      return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(size))(function (v) {
                          return Control_Monad_Gen_Class.resize(dictMonadGen)(Data_Function["const"](v))(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Foreign_Object.fromFoldable(Data_List_Types.foldableList))(Control_Monad_Gen.unfoldable(dictMonadRec)(dictMonadGen)(Data_List_Types.unfoldableList)(Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Tuple.Tuple.create)(genKey))(genValue))));
                      });
                  });
              };
          };
      };
  };
  exports["genForeignObject"] = genForeignObject;
})(PS["Foreign.Object.Gen"] = PS["Foreign.Object.Gen"] || {});
(function(exports) {
    "use strict";

  exports.unsafeFreeze = function (m) {
    return function () {
      return m;
    };
  };
})(PS["Foreign.Object.ST.Unsafe"] = PS["Foreign.Object.ST.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Foreign.Object.ST.Unsafe"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Foreign_Object = PS["Foreign.Object"];
  var Foreign_Object_ST = PS["Foreign.Object.ST"];
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
})(PS["Foreign.Object.ST.Unsafe"] = PS["Foreign.Object.ST.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.unsafeIndex = function (m) {
    return function (k) {
      return m[k];
    };
  };
})(PS["Foreign.Object.Unsafe"] = PS["Foreign.Object.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Foreign.Object.Unsafe"];
  var Foreign_Object = PS["Foreign.Object"];
  exports["unsafeIndex"] = $foreign.unsafeIndex;
})(PS["Foreign.Object.Unsafe"] = PS["Foreign.Object.Unsafe"] || {});
(function(exports) {
  /* globals exports, JSON */
  "use strict";

  exports.unsafeStringify = function (x) {
    return JSON.stringify(x);
  };

  exports.unsafeToFixed = function (digits) {
    return function (n) {
      return n.toFixed(digits);
    };
  };

  exports.unsafeToExponential = function (digits) {
    return function (n) {
      return n.toExponential(digits);
    };
  };

  exports.unsafeToPrecision  = function (digits) {
    return function (n) {
      return n.toPrecision(digits);
    };
  };

  exports.unsafeDecodeURI = decodeURI;
  exports.unsafeEncodeURI = encodeURI;
  exports.unsafeDecodeURIComponent = decodeURIComponent;
  exports.unsafeEncodeURIComponent = encodeURIComponent;
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Global.Unsafe"];
  exports["unsafeStringify"] = $foreign.unsafeStringify;
  exports["unsafeToFixed"] = $foreign.unsafeToFixed;
  exports["unsafeToExponential"] = $foreign.unsafeToExponential;
  exports["unsafeToPrecision"] = $foreign.unsafeToPrecision;
  exports["unsafeDecodeURI"] = $foreign.unsafeDecodeURI;
  exports["unsafeEncodeURI"] = $foreign.unsafeEncodeURI;
  exports["unsafeDecodeURIComponent"] = $foreign.unsafeDecodeURIComponent;
  exports["unsafeEncodeURIComponent"] = $foreign.unsafeEncodeURIComponent;
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Alchelmy = PS["Alchelmy"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];                 
  var main = Alchelmy.main;
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
(function(exports) {
  /* global exports */
  /* global Buffer */
  "use strict";

  exports.slice = function (start) {
    return function (end) {
      return function (buff) {
        return buff.slice(start, end);
      };
    };
  };
})(PS["Node.Buffer.Unsafe"] = PS["Node.Buffer.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Node.Buffer.Unsafe"];
  var Node_Buffer = PS["Node.Buffer"];
  exports["slice"] = $foreign.slice;
})(PS["Node.Buffer.Unsafe"] = PS["Node.Buffer.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Effect = PS["Effect"];
  var Node_FS = PS["Node.FS"];
  var Node_FS_Internal = PS["Node.FS.Internal"];
  var Node_FS_Perms = PS["Node.FS.Perms"];
  var Node_Path = PS["Node.Path"];
  var Node_Stream = PS["Node.Stream"];
  var Prelude = PS["Prelude"];                 
  var readWrite = (function () {
      var rw = Data_Semiring.add(Node_FS_Perms.semiringPerm)(Node_FS_Perms.read)(Node_FS_Perms.write);
      return Node_FS_Perms.mkPerms(rw)(rw)(rw);
  })();
  var $$null = Data_Nullable.toNullable(Data_Maybe.Nothing.value);
  var nonnull = function ($4) {
      return Data_Nullable.toNullable(Data_Maybe.Just.create($4));
  };
  var fs = Node_FS_Internal.unsafeRequireFS;
  var fdCreateWriteStreamWith = function (opts) {
      return function (fd) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.createWriteStream($$null, {
                  fd: fd,
                  mode: Node_FS_Perms.permsToInt(opts.perms),
                  flags: Node_FS.fileFlagsToNode(opts.flags)
              });
          });
      };
  };
  var fdCreateReadStreamWith = function (opts) {
      return function (fd) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.createReadStream($$null, {
                  fd: fd,
                  mode: Node_FS_Perms.permsToInt(opts.perms),
                  flags: Node_FS.fileFlagsToNode(opts.flags),
                  autoClose: opts.autoClose
              });
          });
      };
  };
  var defaultWriteStreamOptions = {
      flags: Node_FS.W.value,
      perms: readWrite
  };
  var fdCreateWriteStream = fdCreateWriteStreamWith(defaultWriteStreamOptions);
  var defaultReadStreamOptions = {
      flags: Node_FS.R.value,
      perms: readWrite,
      autoClose: true
  };
  var fdCreateReadStream = fdCreateReadStreamWith(defaultReadStreamOptions);
  var createWriteStreamWith = function (opts) {
      return function (file) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.createWriteStream(nonnull(file), {
                  mode: Node_FS_Perms.permsToInt(opts.perms),
                  flags: Node_FS.fileFlagsToNode(opts.flags)
              });
          });
      };
  };
  var createWriteStream = createWriteStreamWith(defaultWriteStreamOptions);
  var createReadStreamWith = function (opts) {
      return function (file) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.createReadStream(nonnull(file), {
                  mode: Node_FS_Perms.permsToInt(opts.perms),
                  flags: Node_FS.fileFlagsToNode(opts.flags),
                  autoClose: opts.autoClose
              });
          });
      };
  };
  var createReadStream = createReadStreamWith(defaultReadStreamOptions);
  exports["createWriteStream"] = createWriteStream;
  exports["fdCreateWriteStream"] = fdCreateWriteStream;
  exports["defaultWriteStreamOptions"] = defaultWriteStreamOptions;
  exports["createWriteStreamWith"] = createWriteStreamWith;
  exports["fdCreateWriteStreamWith"] = fdCreateWriteStreamWith;
  exports["createReadStream"] = createReadStream;
  exports["fdCreateReadStream"] = fdCreateReadStream;
  exports["defaultReadStreamOptions"] = defaultReadStreamOptions;
  exports["createReadStreamWith"] = createReadStreamWith;
  exports["fdCreateReadStreamWith"] = fdCreateReadStreamWith;
})(PS["Node.FS.Stream"] = PS["Node.FS.Stream"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_DateTime_Instant = PS["Data.DateTime.Instant"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Effect = PS["Effect"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_Encoding = PS["Node.Encoding"];
  var Node_FS = PS["Node.FS"];
  var Node_FS_Internal = PS["Node.FS.Internal"];
  var Node_FS_Perms = PS["Node.FS.Perms"];
  var Node_FS_Stats = PS["Node.FS.Stats"];
  var Node_Path = PS["Node.Path"];
  var Prelude = PS["Prelude"];                 
  var fs = Node_FS_Internal.unsafeRequireFS;
  var link = function (src) {
      return function (dst) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.linkSync(src, dst);
          });
      };
  };
  var mkdir$prime = function (file) {
      return function (perms) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.mkdirSync(file, Node_FS_Perms.permsToString(perms));
          });
      };
  };
  var mkdir = Data_Function.flip(mkdir$prime)(Node_FS_Perms.mkPerms(Node_FS_Perms.all)(Node_FS_Perms.all)(Node_FS_Perms.all));
  var readFile = function (file) {
      return Node_FS_Internal.mkEffect(function (v) {
          return fs.readFileSync(file, {});
      });
  };
  var readTextFile = function (encoding) {
      return function (file) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readFileSync(file, {
                  encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
              });
          });
      };
  };
  var readdir = function (file) {
      return Node_FS_Internal.mkEffect(function (v) {
          return fs.readdirSync(file);
      });
  };
  var readlink = function (path) {
      return Node_FS_Internal.mkEffect(function (v) {
          return fs.readlinkSync(path);
      });
  };
  var realpath = function (path) {
      return Node_FS_Internal.mkEffect(function (v) {
          return fs.realpathSync(path, {});
      });
  };
  var realpath$prime = function (path) {
      return function (cache) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.realpathSync(path, cache);
          });
      };
  };
  var rename = function (oldFile) {
      return function (newFile) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.renameSync(oldFile, newFile);
          });
      };
  };
  var rmdir = function (file) {
      return Node_FS_Internal.mkEffect(function (v) {
          return fs.rmdirSync(file);
      });
  };
  var stat = function (file) {
      return Data_Functor.map(Effect.functorEffect)(Node_FS_Stats.Stats.create)(Node_FS_Internal.mkEffect(function (v) {
          return fs.statSync(file);
      }));
  };
  var symlink = function (src) {
      return function (dst) {
          return function (ty) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.symlinkSync(src, dst, Node_FS.symlinkTypeToNode(ty));
              });
          };
      };
  };
  var truncate = function (file) {
      return function (len) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.truncateSync(file, len);
          });
      };
  };
  var unlink = function (file) {
      return Node_FS_Internal.mkEffect(function (v) {
          return fs.unlinkSync(file);
      });
  };
  var utimes = function (file) {
      return function (atime) {
          return function (mtime) {
              var toEpochMilliseconds = function ($33) {
                  return Data_DateTime_Instant.unInstant(Data_DateTime_Instant.fromDateTime($33));
              };
              var ms = function (v) {
                  return Data_Int.round(v);
              };
              var fromDate = function (date) {
                  return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(ms(toEpochMilliseconds(date)))(1000);
              };
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.utimesSync(file, fromDate(atime), fromDate(mtime));
              });
          };
      };
  };
  var writeFile = function (file) {
      return function (buff) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.writeFileSync(file, buff, {});
          });
      };
  };
  var writeTextFile = function (encoding) {
      return function (file) {
          return function (text) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.writeFileSync(file, text, {
                      encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                  });
              });
          };
      };
  };
  var fdWrite = function (fd) {
      return function (buff) {
          return function (off) {
              return function (len) {
                  return function (pos) {
                      return Node_FS_Internal.mkEffect(function (v) {
                          return fs.writeSync(fd, buff, off, len, Data_Nullable.toNullable(pos));
                      });
                  };
              };
          };
      };
  };
  var fdRead = function (fd) {
      return function (buff) {
          return function (off) {
              return function (len) {
                  return function (pos) {
                      return Node_FS_Internal.mkEffect(function (v) {
                          return fs.readSync(fd, buff, off, len, Data_Nullable.toNullable(pos));
                      });
                  };
              };
          };
      };
  };
  var fdOpen = function (file) {
      return function (flags) {
          return function (mode) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.openSync(file, Node_FS.fileFlagsToNode(flags), Data_Nullable.toNullable(mode));
              });
          };
      };
  };
  var fdNext = function (fd) {
      return function (buff) {
          return function __do() {
              var v = Node_Buffer.size(buff)();
              return fdRead(fd)(buff)(0)(v)(Data_Maybe.Nothing.value)();
          };
      };
  };
  var fdFlush = function (fd) {
      return Node_FS_Internal.mkEffect(function (v) {
          return fs.fsyncSync(fd);
      });
  };
  var fdClose = function (fd) {
      return Node_FS_Internal.mkEffect(function (v) {
          return fs.closeSync(fd);
      });
  };
  var fdAppend = function (fd) {
      return function (buff) {
          return function __do() {
              var v = Node_Buffer.size(buff)();
              return fdWrite(fd)(buff)(0)(v)(Data_Maybe.Nothing.value)();
          };
      };
  };
  var exists = function (file) {
      return Node_FS_Internal.mkEffect(function (v) {
          return fs.existsSync(file);
      });
  };
  var chown = function (file) {
      return function (uid) {
          return function (gid) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.chownSync(file, uid, gid);
              });
          };
      };
  };
  var chmod = function (file) {
      return function (perms) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.chmodSync(file, Node_FS_Perms.permsToString(perms));
          });
      };
  };
  var appendTextFile = function (encoding) {
      return function (file) {
          return function (buff) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.appendFileSync(file, buff, {
                      encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                  });
              });
          };
      };
  };
  var appendFile = function (file) {
      return function (buff) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.appendFileSync(file, buff, {});
          });
      };
  };
  exports["rename"] = rename;
  exports["truncate"] = truncate;
  exports["chown"] = chown;
  exports["chmod"] = chmod;
  exports["stat"] = stat;
  exports["link"] = link;
  exports["symlink"] = symlink;
  exports["readlink"] = readlink;
  exports["realpath"] = realpath;
  exports["realpath'"] = realpath$prime;
  exports["unlink"] = unlink;
  exports["rmdir"] = rmdir;
  exports["mkdir"] = mkdir;
  exports["mkdir'"] = mkdir$prime;
  exports["readdir"] = readdir;
  exports["utimes"] = utimes;
  exports["readFile"] = readFile;
  exports["readTextFile"] = readTextFile;
  exports["writeFile"] = writeFile;
  exports["writeTextFile"] = writeTextFile;
  exports["appendFile"] = appendFile;
  exports["appendTextFile"] = appendTextFile;
  exports["exists"] = exists;
  exports["fdOpen"] = fdOpen;
  exports["fdRead"] = fdRead;
  exports["fdNext"] = fdNext;
  exports["fdWrite"] = fdWrite;
  exports["fdAppend"] = fdAppend;
  exports["fdFlush"] = fdFlush;
  exports["fdClose"] = fdClose;
})(PS["Node.FS.Sync"] = PS["Node.FS.Sync"] || {});
(function(exports) {
    "use strict";

  exports.__dirname = __dirname;
  exports.__filename = __filename;
  exports.unsafeRequire = require;

  exports.requireResolve = function (mod) {
    return function () {
      return require.resolve(mod);
    };
  };
})(PS["Node.Globals"] = PS["Node.Globals"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Node.Globals"];
  var Effect = PS["Effect"];
  exports["__dirname"] = $foreign.__dirname;
  exports["__filename"] = $foreign.__filename;
  exports["unsafeRequire"] = $foreign.unsafeRequire;
  exports["requireResolve"] = $foreign.requireResolve;
})(PS["Node.Globals"] = PS["Node.Globals"] || {});
PS["Main"].main();